{
  "timestamp": "2025-10-11T08:51:55.663447",
  "summary": {
    "total_workflows": 50,
    "successful": 50,
    "failed": 0,
    "success_rate": 100.0,
    "avg_time_per_workflow": 14.620766167640687,
    "avg_quality_score": 49.56,
    "total_duration": 247.409545
  },
  "criteria": {
    "success_rate_met": true,
    "avg_time_met": true,
    "avg_quality_met": false,
    "criteria_met": 2,
    "total_criteria": 3
  },
  "individual_results": [
    {
      "success": true,
      "workflow_id": "2462",
      "url": "https://n8n.io/workflows/2462",
      "layers": {
        "layer1": {
          "success": true,
          "workflow_id": "2462",
          "data": {
            "title": "Angie, Personal AI Assistant with Telegram Voice and Text",
            "description": "How it works: This project creates a personal AI assistant named Angie that operates through Telegram. Angie can summarize daily emails, look up calendar...",
            "author": "Igor Fediczko@igordisco",
            "use_case": "How it works: This project creates a personal AI assistant named Angie that operates through Telegram.",
            "primary_category": "Strictly necessary",
            "secondary_categories": [
              "Performance",
              "Targeting",
              "Functionality",
              "Strictly necessary cookies allow core website functionality such as user login and account management. The website cannot be used properly without strictly necessary cookies.",
              "Performance cookies are used to see how visitors use the website, eg. analytics cookies. Those cookies cannot be used to directly identify a certain visitor.",
              "Targeting cookies are used to identify visitors between different websites, eg. content partners, banner networks. Those cookies may be used by companies to build a profile of visitor interests or show relevant ads on other websites.",
              "Functionality cookies are used to remember visitor information on the website, eg. language, timezone, enhanced content."
            ],
            "node_tags": [
              "github147,222",
              "hiring"
            ],
            "general_tags": [
              "Targeting",
              "Performance",
              "Strictly necessary",
              "Functionality"
            ],
            "difficulty_level": "intermediate",
            "views": 0,
            "upvotes": 0,
            "created_date": "2025-10-11T08:48:06.724953",
            "updated_date": "2025-10-11T08:48:06.724953",
            "setup_instructions": "How it works: This project creates a personal AI assistant named Angie that operates through Telegram. Angie can summarize daily emails, look up calendar...",
            "prerequisites": [
              "token_v2",
              "or website it relates to",
              "AI Assistant: The telegram request is passed to the AI assistant (Angie).",
              "{\n\t\tcontent: attr(label);\n\t\tfont-weight: bold;\n\t\twidth: 120px;\n\t\tmin-width: 120px;\n\t}",
              "athered information and sends back to the user on Telegram"
            ],
            "estimated_setup_time": "4 minutes 59 sec",
            "industry": [
              "Strictly necessary"
            ]
          },
          "extraction_time": 19.062438011169434,
          "error": null
        },
        "layer2": {
          "success": true,
          "workflow_id": "2462",
          "data": {
            "id": 2462,
            "name": "Angie, Personal AI Assistant with Telegram Voice and Text",
            "workflow": {
              "meta": {
                "instanceId": "04ddf1130268840c229f501edc57936c3c131339e8b0cdd696fcf3a7c69e696e",
                "templateId": "2462"
              },
              "nodes": [
                {
                  "id": "c70236ea-91ab-4e47-b6f6-63a70ede5d3c",
                  "name": "Google Calendar",
                  "type": "n8n-nodes-base.googleCalendarTool",
                  "position": [
                    2000,
                    704
                  ],
                  "parameters": {
                    "options": {
                      "fields": "=items(summary, start(dateTime))",
                      "timeMin": "={{$fromAI(\"date\",\"the date after which to fetch the messages in format YYYY-MM-DDTHH:MM:SS\")}}"
                    },
                    "calendar": {
                      "__rl": true,
                      "mode": "list",
                      "value": "derekcheungsa@gmail.com",
                      "cachedResultName": "derekcheungsa@gmail.com"
                    },
                    "operation": "getAll"
                  },
                  "typeVersion": 1.1
                },
                {
                  "id": "d2287bea-de47-4180-8ee6-55d4ab1a89da",
                  "name": "Window Buffer Memory",
                  "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
                  "position": [
                    1760,
                    704
                  ],
                  "parameters": {
                    "sessionKey": "={{ $('Listen for incoming events').first().json.message.from.id }}",
                    "sessionIdType": "customKey"
                  },
                  "typeVersion": 1.2
                },
                {
                  "id": "fa955731-86f6-4e4d-8604-dab5f52dee87",
                  "name": "Get Email",
                  "type": "n8n-nodes-base.gmailTool",
                  "position": [
                    1872,
                    704
                  ],
                  "webhookId": "abf7e707-2eb8-4063-a920-b8ed975b0d70",
                  "parameters": {
                    "filters": {
                      "labelIds": [
                        "INBOX",
                        "UNREAD"
                      ],
                      "readStatus": "unread",
                      "receivedAfter": "={{$fromAI(\"date\",\"the date after which to fetch the messages in format YYYY-MM-DDTHH:MM:SS\")}}"
                    },
                    "operation": "getAll"
                  },
                  "typeVersion": 2.1
                },
                {
                  "id": "46511f47-1687-4cbe-ae41-ceb205ed1f11",
                  "name": "OpenAI Chat Model",
                  "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
                  "position": [
                    1632,
                    704
                  ],
                  "parameters": {
                    "options": {}
                  },
                  "typeVersion": 1
                },
                {
                  "id": "64fe44db-af19-43eb-9ff1-de0a72a9e645",
                  "name": "Listen for incoming events",
                  "type": "n8n-nodes-base.telegramTrigger",
                  "position": [
                    832,
                    384
                  ],
                  "webhookId": "322dce18-f93e-4f86-b9b1-3305519b7834",
                  "parameters": {
                    "updates": [
                      "message"
                    ],
                    "additionalFields": {}
                  },
                  "typeVersion": 1
                },
                {
                  "id": "e35c04ff-a050-4564-8c1b-5b22b556872f",
                  "name": "Telegram",
                  "type": "n8n-nodes-base.telegram",
                  "onError": "continueErrorOutput",
                  "position": [
                    2272,
                    384
                  ],
                  "webhookId": "e699405e-8e52-4d38-a06b-1fa8edf050bd",
                  "parameters": {
                    "text": "={{ $json.output }}",
                    "chatId": "={{ $('Listen for incoming events').first().json.message.from.id }}",
                    "additionalFields": {
                      "parse_mode": "Markdown",
                      "appendAttribution": false
                    }
                  },
                  "typeVersion": 1.1
                },
                {
                  "id": "e791d4f8-2c19-4c14-a71e-39a04f22e944",
                  "name": "If",
                  "type": "n8n-nodes-base.if",
                  "position": [
                    1200,
                    384
                  ],
                  "parameters": {
                    "options": {},
                    "conditions": {
                      "options": {
                        "version": 2,
                        "leftValue": "",
                        "caseSensitive": true,
                        "typeValidation": "strict"
                      },
                      "combinator": "and",
                      "conditions": [
                        {
                          "id": "a0bf9719-4272-46f6-ab3b-eda6f7b44fd8",
                          "operator": {
                            "type": "string",
                            "operation": "empty",
                            "singleValue": true
                          },
                          "leftValue": "={{ $json.message.text }}",
                          "rightValue": ""
                        }
                      ]
                    }
                  },
                  "typeVersion": 2.2
                },
                {
                  "id": "5bd1788a-3d08-4eb3-8e03-3ce82f44d2a7",
                  "name": "Speech to Text",
                  "type": "@n8n/n8n-nodes-langchain.openAi",
                  "position": [
                    1616,
                    384
                  ],
                  "parameters": {
                    "options": {},
                    "resource": "audio",
                    "operation": "transcribe"
                  },
                  "typeVersion": 1.3
                },
                {
                  "id": "b67a2a93-517b-469e-aaa4-32c422710743",
                  "name": "Voice or Text",
                  "type": "n8n-nodes-base.set",
                  "position": [
                    1040,
                    384
                  ],
                  "parameters": {
                    "fields": {
                      "values": [
                        {
                          "name": "text",
                          "stringValue": "={{ $json?.message?.text || \"\" }}"
                        }
                      ]
                    },
                    "options": {}
                  },
                  "typeVersion": 3.2
                },
                {
                  "id": "8105c39f-9e87-44c4-9215-b3777f0b4164",
                  "name": "Get Voice File",
                  "type": "n8n-nodes-base.telegram",
                  "position": [
                    1376,
                    384
                  ],
                  "webhookId": "24273e7e-6133-415e-8627-a9d6dc0f107c",
                  "parameters": {
                    "fileId": "={{ $('Listen for incoming events').item.json.message.voice.file_id }}",
                    "resource": "file",
                    "additionalFields": {}
                  },
                  "typeVersion": 1.1
                },
                {
                  "id": "759b975f-d17c-4386-a5b3-12413f0361f4",
                  "name": "Angie, AI Assistant \ud83d\udc69\ud83c\udffb\u200d\ud83c\udfeb",
                  "type": "@n8n/n8n-nodes-langchain.agent",
                  "position": [
                    1776,
                    384
                  ],
                  "parameters": {
                    "text": "={{ $json.text }}",
                    "options": {
                      "systemMessage": "=You are a helpful assistant.\n\nToday's date is {{ $now }}.\n\nGuidelines:\n- When fetching emails, filter out any promotional emails. \n- When summarizing emails, include Sender, Message date, subject, and brief summary of email.\n- if the user did not specify a date in the request assume they are asking for today\n- Use baserow tool to answer questions about tasks\n- When answering questions about calendar events, filter out events that don't apply to the question.  For example, the question is about events for today, only reply with events for today. Don't mention future events if it's more than 1 week away"
                    },
                    "promptType": "define"
                  },
                  "typeVersion": 1.6
                },
                {
                  "id": "5537c777-f003-4673-b48a-4993a0c10520",
                  "name": "Sticky Note",
                  "type": "n8n-nodes-base.stickyNote",
                  "position": [
                    1008,
                    288
                  ],
                  "parameters": {
                    "color": 5,
                    "width": 496.25,
                    "height": 278.75,
                    "content": "## Process Telegram Request\n"
                  },
                  "typeVersion": 1
                },
                {
                  "id": "40e92679-b47a-4213-bb23-3f8d086459f2",
                  "name": "Tasks",
                  "type": "n8n-nodes-base.baserowTool",
                  "position": [
                    2112,
                    704
                  ],
                  "parameters": {
                    "tableId": 372174,
                    "databaseId": 146496,
                    "additionalOptions": {}
                  },
                  "typeVersion": 1
                },
                {
                  "id": "570a0647-b571-4ebc-9dfe-40244b5a0b2a",
                  "name": "Contacts",
                  "type": "n8n-nodes-base.baserowTool",
                  "position": [
                    2240,
                    704
                  ],
                  "parameters": {
                    "tableId": 372177,
                    "databaseId": 146496,
                    "descriptionType": "manual",
                    "toolDescription": "Useful for getting contact information.  For example emails or phone numbers.",
                    "additionalOptions": {}
                  },
                  "typeVersion": 1
                },
                {
                  "id": "3f66a5dd-6cad-4239-94a8-1b30fbf32943",
                  "name": "Sticky Note2",
                  "type": "n8n-nodes-base.stickyNote",
                  "position": [
                    0,
                    128
                  ],
                  "parameters": {
                    "color": 5,
                    "width": 720,
                    "height": 960,
                    "content": "## [Video Tutorial](https://youtu.be/pXjowPc6V2s)\n@[youtube](pXjowPc6V2s)\n\n\n## Overview\nMeet Angie - your personal AI assistant that handles voice & text via Telegram to manage your digital life.\n\n**To get started:**\n\n1. **Connect all credentials** (Telegram, OpenAI, Gmail, etc.)\n2. **Activate the workflow** and message your Telegram bot:\n   \u2022 \"What emails do I have today?\"\n   \u2022 \"Show me my calendar for tomorrow\"\n   \u2022 \"Craete new to-do item\"\n   \u2022 \ud83c\udfa4 Send voice messages for hands-free interaction\n\n## Questions or Need Help?\n\nFor setup assistance, customization, or workflow support, join my Skool community!\n\n## [AI Automation Engineering Community](https://www.skool.com/ai-automation-engineering-3014)\n\nHappy learning! -- Derek Cheung"
                  },
                  "typeVersion": 1
                }
              ],
              "pinData": {},
              "connections": {
                "If": {
                  "main": [
                    [
                      {
                        "node": "Get Voice File",
                        "type": "main",
                        "index": 0
                      }
                    ],
                    [
                      {
                        "node": "Angie, AI Assistant \ud83d\udc69\ud83c\udffb\u200d\ud83c\udfeb",
                        "type": "main",
                        "index": 0
                      }
                    ]
                  ]
                },
                "Tasks": {
                  "ai_tool": [
                    [
                      {
                        "node": "Angie, AI Assistant \ud83d\udc69\ud83c\udffb\u200d\ud83c\udfeb",
                        "type": "ai_tool",
                        "index": 0
                      }
                    ]
                  ]
                },
                "Contacts": {
                  "ai_tool": [
                    [
                      {
                        "node": "Angie, AI Assistant \ud83d\udc69\ud83c\udffb\u200d\ud83c\udfeb",
                        "type": "ai_tool",
                        "index": 0
                      }
                    ]
                  ]
                },
                "Get Email": {
                  "ai_tool": [
                    [
                      {
                        "node": "Angie, AI Assistant \ud83d\udc69\ud83c\udffb\u200d\ud83c\udfeb",
                        "type": "ai_tool",
                        "index": 0
                      }
                    ]
                  ]
                },
                "Voice or Text": {
                  "main": [
                    [
                      {
                        "node": "If",
                        "type": "main",
                        "index": 0
                      }
                    ]
                  ]
                },
                "Get Voice File": {
                  "main": [
                    [
                      {
                        "node": "Speech to Text",
                        "type": "main",
                        "index": 0
                      }
                    ]
                  ]
                },
                "Speech to Text": {
                  "main": [
                    [
                      {
                        "node": "Angie, AI Assistant \ud83d\udc69\ud83c\udffb\u200d\ud83c\udfeb",
                        "type": "main",
                        "index": 0
                      }
                    ]
                  ]
                },
                "Google Calendar": {
                  "ai_tool": [
                    [
                      {
                        "node": "Angie, AI Assistant \ud83d\udc69\ud83c\udffb\u200d\ud83c\udfeb",
                        "type": "ai_tool",
                        "index": 0
                      }
                    ]
                  ]
                },
                "OpenAI Chat Model": {
                  "ai_languageModel": [
                    [
                      {
                        "node": "Angie, AI Assistant \ud83d\udc69\ud83c\udffb\u200d\ud83c\udfeb",
                        "type": "ai_languageModel",
                        "index": 0
                      }
                    ]
                  ]
                },
                "Window Buffer Memory": {
                  "ai_memory": [
                    [
                      {
                        "node": "Angie, AI Assistant \ud83d\udc69\ud83c\udffb\u200d\ud83c\udfeb",
                        "type": "ai_memory",
                        "index": 0
                      }
                    ]
                  ]
                },
                "Listen for incoming events": {
                  "main": [
                    [
                      {
                        "node": "Voice or Text",
                        "type": "main",
                        "index": 0
                      }
                    ]
                  ]
                },
                "Angie, AI Assistant \ud83d\udc69\ud83c\udffb\u200d\ud83c\udfeb": {
                  "main": [
                    [
                      {
                        "node": "Telegram",
                        "type": "main",
                        "index": 0
                      }
                    ]
                  ]
                }
              }
            }
          },
          "node_count": 15,
          "connection_count": 12,
          "extraction_time": 0.280283,
          "error": null
        },
        "layer3": {
          "success": true,
          "data": {
            "introduction": "How it works:This project creates a personal AI assistant named Angie that operates through Telegram. Angie can summarize daily emails, look up calendar entries, remind users of upcoming tasks, and retrieve contact information. The assistant can interact with users via both voice and text inputs.Step-by-step:Telegram Trigger: The workflow starts with a Telegram trigger that listens for incoming message events. The system determines if the incoming message is voice or text. If voice, the voice file is retrieved and transcribed to text using OpenAI's API Speech to TextAI Assistant: The telegram request is passed to the AI assistant (Angie).Tools Integration: The AI assistant is equipped with several tools:Get Email: Uses Gmail API to fetch recent emails, filtering by date.Get Calendar: Retrieves calendar entries for specified dates.Get Tasks: Connects to a Baserow (open-source Airtable alternative) database to fetch to-do list items.Get Contacts: Also uses Baserow to retrieve contact information.Response Generation: The AI formulates a response based on the gathered information and sends back to the user on Telegram",
            "overview": "",
            "tutorial_text": "How it works:This project creates a personal AI assistant named Angie that operates through Telegram. Angie can summarize daily emails, look up calendar entries, remind users of upcoming tasks, and retrieve contact information. The assistant can interact with users via both voice and text inputs.Step-by-step:Telegram Trigger: The workflow starts with a Telegram trigger that listens for incoming message events. The system determines if the incoming message is voice or text. If voice, the voice file is retrieved and transcribed to text using OpenAI's API Speech to TextAI Assistant: The telegram request is passed to the AI assistant (Angie).Tools Integration: The AI assistant is equipped with several tools:Get Email: Uses Gmail API to fetch recent emails, filtering by date.Get Calendar: Retrieves calendar entries for specified dates.Get Tasks: Connects to a Baserow (open-source Airtable alternative) database to fetch to-do list items.Get Contacts: Also uses Baserow to retrieve contact information.Response Generation: The AI formulates a response based on the gathered information and sends back to the user on Telegram",
            "tutorial_sections": [],
            "step_by_step": [],
            "best_practices": [],
            "common_pitfalls": [],
            "image_urls": [
              "https://n8n.io/nodes/telegram.svg",
              "https://gravatar.com/avatar/1d8dbb30401a76425734d4319abbaa38548b7572064ca080740bbfe60324772a?r=pg&d=retro&size=200",
              "https://n8n.io/nodes/http-request.svg",
              "https://n8n.io/nodes/telegram-trigger.svg",
              "https://n8n.io/nodes/merge.svg",
              "https://n8n.io/nodes/openai-chat-model.svg",
              "https://gravatar.com/avatar/b3d1a47322f05a8be3d2e7bad6a80c29161bd58b91e4762cbb3ac25e5d0db5a8?r=pg&d=retro&size=200",
              "https://gravatar.com/avatar/74234187cf4a650d53f6a86e7b03d1bcb8cfef4cbd0552eabd8d966cd808cc54?r=pg&d=retro&size=200",
              "https://gravatar.com/avatar/4ab99e51473df76838beeaac908747f7928c625f869794815cabe34016967d51?r=pg&d=retro&size=200",
              "https://gravatar.com/avatar/a551e67c6fe7affd5f882a527dee154bb6c3ac90cf878326accb3fb3ec77c8a6?r=pg&d=retro&size=200",
              "https://n8n.io/images/stars-footer.svg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/avatar_igordisco_9243b86232_cd9a5c94ce.jpg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/neutral_avatar_purple_fee36bffe3.PNG",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/avatar_anderoav_589989fc39_ceb1c71a0c.jpg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/avatar_maxim_poulsen_48f450887b_852d0439bc.jpeg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/Felix_Leber_f7a5b3c776_130aeca79d.jpeg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/avatar_Ironben_0a4b3e7d12_e35805265c.jpg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/Francois_lassl_d5cfb504c7_710c87121d.jpeg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/twitter_x_62a44e965e.svg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/github_e1f217d7a3_b9a271324f.svg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/discord_253947c90b_191e8f60fa.svg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/linkedin_d710e84d63_6ed0dc28aa.svg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/youtube_de4bdef50a_4b3a8b8aac.svg"
            ],
            "video_urls": [],
            "code_snippets": [],
            "conclusion": "",
            "troubleshooting": {
              "common_issues": [],
              "error_messages": []
            },
            "related_workflows": []
          },
          "errors": [],
          "extraction_time": 6.003936,
          "metadata": {
            "workflow_id": "2462",
            "url": "https://n8n.io/workflows/2462",
            "extracted_at": "2025-10-11T08:48:08.235858",
            "extractor_version": "1.0.0"
          }
        }
      },
      "multimodal": null,
      "transcripts": null,
      "validation": {
        "layer1": {
          "score": 80,
          "issues": [
            "Difficulty level not set",
            "No engagement metrics available"
          ],
          "valid": true,
          "layer": "layer1"
        },
        "layer2": {
          "score": 100,
          "issues": [],
          "valid": true,
          "layer": "layer2"
        },
        "layer3": {
          "score": 35,
          "issues": [
            "No tutorial sections extracted",
            "No images extracted",
            "Missing required fields: title, description, steps",
            "No step-by-step content extracted"
          ],
          "valid": false,
          "layer": "layer3"
        }
      },
      "quality": {
        "overall_score": 70.0,
        "classification": "Fair",
        "layer1_score": 80,
        "layer2_score": 100,
        "layer3_score": 35,
        "consistency_score": 100.0,
        "total_issues": 6
      },
      "extraction_time": 26.03748607635498,
      "errors": [],
      "timestamp": "2025-10-11T08:47:48.249810"
    },
    {
      "success": true,
      "workflow_id": "1804",
      "url": "https://n8n.io/workflows/1804",
      "layers": {
        "layer1": {
          "success": true,
          "workflow_id": "1804",
          "data": {
            "title": "Sync your GitHub issues to your Notion database",
            "description": "This workflow syncs your GitHub issues to your Notion database. Whenever a new issue is opened in your GitHub repository, it will be shown in your Notion...",
            "author": "Igor Fediczko@igordisco",
            "use_case": "This workflow syncs your GitHub issues to your Notion database.",
            "primary_category": "Strictly necessary",
            "secondary_categories": [
              "Performance",
              "Targeting",
              "Functionality",
              "Strictly necessary cookies allow core website functionality such as user login and account management. The website cannot be used properly without strictly necessary cookies.",
              "Performance cookies are used to see how visitors use the website, eg. analytics cookies. Those cookies cannot be used to directly identify a certain visitor.",
              "Targeting cookies are used to identify visitors between different websites, eg. content partners, banner networks. Those cookies may be used by companies to build a profile of visitor interests or show relevant ads on other websites.",
              "Functionality cookies are used to remember visitor information on the website, eg. language, timezone, enhanced content."
            ],
            "node_tags": [
              "github147,222",
              "hiring"
            ],
            "general_tags": [
              "Targeting",
              "Performance",
              "Strictly necessary",
              "Functionality"
            ],
            "difficulty_level": "intermediate",
            "views": 0,
            "upvotes": 0,
            "created_date": "2025-10-11T08:48:05.895575",
            "updated_date": "2025-10-11T08:48:05.895575",
            "setup_instructions": "This workflow syncs your GitHub issues to your Notion database. Whenever a new issue is opened in your GitHub repository, it will be shown in your Notion...",
            "prerequisites": [
              "token_v2",
              "or website it relates to",
              "{\n\t\tcontent: attr(label);\n\t\tfont-weight: bold;\n\t\twidth: 120px;\n\t\tmin-width: 120px;\n\t}",
              "and [GitHub credentials](https://docs",
              "visiting the said website"
            ],
            "estimated_setup_time": "4 minutes 59 sec",
            "industry": [
              "Strictly necessary"
            ]
          },
          "extraction_time": 18.307416200637817,
          "error": null
        },
        "layer2": {
          "success": true,
          "workflow_id": "1804",
          "data": {
            "id": 1804,
            "name": "Sync your GitHub issues to your Notion database",
            "workflow": {
              "meta": {
                "instanceId": "237600ca44303ce91fa31ee72babcdc8493f55ee2c0e8aa2b78b3b4ce6f70bd9"
              },
              "nodes": [
                {
                  "id": "0bd18974-8414-4b83-b3fb-85d2f6a74164",
                  "name": "Create database page",
                  "type": "n8n-nodes-base.notion",
                  "position": [
                    1220,
                    400
                  ],
                  "parameters": {
                    "title": "={{$json[\"body\"][\"issue\"][\"title\"]}}",
                    "resource": "databasePage",
                    "databaseId": "5026700b-6693-473a-8100-8cc6ddef62a6",
                    "propertiesUi": {
                      "propertyValues": [
                        {
                          "key": "Issue ID|number",
                          "numberValue": "={{$node[\"Trigger on issues\"].json[\"body\"][\"issue\"][\"id\"]}}"
                        },
                        {
                          "key": "Link|url",
                          "urlValue": "={{$node[\"Trigger on issues\"].json[\"body\"][\"issue\"][\"html_url\"]}}"
                        }
                      ]
                    }
                  },
                  "credentials": {
                    "notionApi": {
                      "id": "9",
                      "name": "[UPDATE ME]"
                    }
                  },
                  "typeVersion": 2
                },
                {
                  "id": "dfce23fd-7ff8-42d1-9544-694345156080",
                  "name": "Note",
                  "type": "n8n-nodes-base.stickyNote",
                  "position": [
                    1220,
                    800
                  ],
                  "parameters": {
                    "content": "## IF & Switch\nDepends on what action was taken on an issue in GitHub."
                  },
                  "typeVersion": 1
                },
                {
                  "id": "577e0d7a-0539-414f-8ec8-00ce12807d5b",
                  "name": "Find database page",
                  "type": "n8n-nodes-base.notion",
                  "position": [
                    1400,
                    600
                  ],
                  "parameters": {
                    "options": {},
                    "resource": "databasePage",
                    "operation": "getAll",
                    "returnAll": true,
                    "databaseId": "5026700b-6693-473a-8100-8cc6ddef62a6",
                    "filterJson": "={{$node[\"Create custom Notion filters\"].json[\"notionfilter\"]}}",
                    "filterType": "json"
                  },
                  "credentials": {
                    "notionApi": {
                      "id": "9",
                      "name": "[UPDATE ME]"
                    }
                  },
                  "typeVersion": 2
                },
                {
                  "id": "91b0586c-eb08-41d0-bbb0-8a03c4a0ac3a",
                  "name": "Switch",
                  "type": "n8n-nodes-base.switch",
                  "position": [
                    1580,
                    600
                  ],
                  "parameters": {
                    "rules": {
                      "rules": [
                        {
                          "value2": "edited"
                        },
                        {
                          "output": 1,
                          "value2": "deleted"
                        },
                        {
                          "output": 2,
                          "value2": "closed"
                        },
                        {
                          "output": 3,
                          "value2": "reopened"
                        }
                      ]
                    },
                    "value1": "={{$node[\"Trigger on issues\"].json[\"body\"][\"action\"]}}",
                    "dataType": "string"
                  },
                  "typeVersion": 1
                },
                {
                  "id": "5262e14e-adc2-45d1-9e3f-c0eba013077a",
                  "name": "IF",
                  "type": "n8n-nodes-base.if",
                  "position": [
                    1040,
                    500
                  ],
                  "parameters": {
                    "conditions": {
                      "string": [
                        {
                          "value1": "={{$node[\"Trigger on issues\"].json[\"body\"][\"action\"]}}",
                          "value2": "opened"
                        }
                      ]
                    }
                  },
                  "typeVersion": 1
                },
                {
                  "id": "735ef0b3-70c3-4a88-ad02-35edf8f749c4",
                  "name": "Edit issue",
                  "type": "n8n-nodes-base.notion",
                  "position": [
                    1760,
                    360
                  ],
                  "parameters": {
                    "pageId": "={{ $node[\"Find database page\"].json[\"id\"] }}",
                    "resource": "databasePage",
                    "operation": "update",
                    "propertiesUi": {
                      "propertyValues": [
                        {
                          "key": "Issue|title",
                          "title": "={{$node[\"Trigger on issues\"].json[\"body\"][\"issue\"][\"title\"]}}"
                        }
                      ]
                    }
                  },
                  "credentials": {
                    "notionApi": {
                      "id": "9",
                      "name": "[UPDATE ME]"
                    }
                  },
                  "typeVersion": 2
                },
                {
                  "id": "39b75e78-bd62-40e4-9e88-12c6a1901c34",
                  "name": "Delete issue",
                  "type": "n8n-nodes-base.notion",
                  "position": [
                    1760,
                    520
                  ],
                  "parameters": {
                    "pageId": "={{$node[\"Find database page\"].json[\"id\"]}}",
                    "operation": "archive"
                  },
                  "credentials": {
                    "notionApi": {
                      "id": "9",
                      "name": "[UPDATE ME]"
                    }
                  },
                  "typeVersion": 2
                },
                {
                  "id": "d8fee72d-c19d-4b99-85c2-dcc5d4fa6756",
                  "name": "Create custom Notion filters",
                  "type": "n8n-nodes-base.function",
                  "position": [
                    1220,
                    600
                  ],
                  "parameters": {
                    "functionCode": "const new_items = [];\nfor (item of $items(\"Trigger on issues\")) {\n\n  // do not process this item if action is created\n  if (item.json[\"body\"][\"action\"] == \"opened\") {\n    continue;\n  }\n\n  // build the output template\n  var new_item = {\n    \"json\": {\n      \"notionfilter\": \"\"\n    }\n  };\n  new_item = JSON.stringify(new_item);\n  new_item = JSON.parse(new_item);\n  new_items.push(new_item);\n\n  // create Notion filter to find specific database page by issue ID\n  notionfilter = {\n    or: [],\n  }\n\n  const filter = {\n    property: 'Issue ID',\n    number: {\n      equals: parseInt(item.json[\"body\"][\"issue\"][\"id\"])\n    }\n  }\n  notionfilter[\"or\"].push(filter);\n\n  new_item.json.notionfilter = JSON.stringify(notionfilter); \n}\n\nreturn new_items;"
                  },
                  "typeVersion": 1
                },
                {
                  "id": "99c69200-d932-4379-9a36-96cd8420f21c",
                  "name": "Close issue",
                  "type": "n8n-nodes-base.notion",
                  "position": [
                    1760,
                    680
                  ],
                  "parameters": {
                    "pageId": "={{$node[\"Find database page\"].json[\"id\"]}}",
                    "resource": "databasePage",
                    "operation": "update",
                    "propertiesUi": {
                      "propertyValues": [
                        {
                          "key": "Closed|checkbox",
                          "checkboxValue": true
                        }
                      ]
                    }
                  },
                  "credentials": {
                    "notionApi": {
                      "id": "9",
                      "name": "[UPDATE ME]"
                    }
                  },
                  "typeVersion": 2
                },
                {
                  "id": "3f4b27d3-33ae-44f8-ab18-1c23ae7cf890",
                  "name": "Reopen issue",
                  "type": "n8n-nodes-base.notion",
                  "position": [
                    1760,
                    840
                  ],
                  "parameters": {
                    "pageId": "={{$node[\"Find database page\"].json[\"id\"]}}",
                    "resource": "databasePage",
                    "operation": "update",
                    "propertiesUi": {
                      "propertyValues": [
                        {
                          "key": "Closed|checkbox"
                        }
                      ]
                    }
                  },
                  "credentials": {
                    "notionApi": {
                      "id": "9",
                      "name": "[UPDATE ME]"
                    }
                  },
                  "typeVersion": 2
                },
                {
                  "id": "62e1a9d3-3fc6-46de-a048-cf8176f30f94",
                  "name": "Trigger on issues",
                  "type": "n8n-nodes-base.githubTrigger",
                  "position": [
                    860,
                    500
                  ],
                  "webhookId": "bc0a0a44-00db-473b-8746-b60b3b36039c",
                  "parameters": {
                    "owner": "John-n8n",
                    "events": [
                      "issues"
                    ],
                    "repository": "DemoRepo"
                  },
                  "credentials": {
                    "githubApi": {
                      "id": "20",
                      "name": "[UPDATE ME]"
                    }
                  },
                  "typeVersion": 1
                }
              ],
              "connections": {
                "IF": {
                  "main": [
                    [
                      {
                        "node": "Create database page",
                        "type": "main",
                        "index": 0
                      }
                    ],
                    [
                      {
                        "node": "Create custom Notion filters",
                        "type": "main",
                        "index": 0
                      }
                    ]
                  ]
                },
                "Switch": {
                  "main": [
                    [
                      {
                        "node": "Edit issue",
                        "type": "main",
                        "index": 0
                      }
                    ],
                    [
                      {
                        "node": "Delete issue",
                        "type": "main",
                        "index": 0
                      }
                    ],
                    [
                      {
                        "node": "Close issue",
                        "type": "main",
                        "index": 0
                      }
                    ],
                    [
                      {
                        "node": "Reopen issue",
                        "type": "main",
                        "index": 0
                      }
                    ]
                  ]
                },
                "Trigger on issues": {
                  "main": [
                    [
                      {
                        "node": "IF",
                        "type": "main",
                        "index": 0
                      }
                    ]
                  ]
                },
                "Find database page": {
                  "main": [
                    [
                      {
                        "node": "Switch",
                        "type": "main",
                        "index": 0
                      }
                    ]
                  ]
                },
                "Create custom Notion filters": {
                  "main": [
                    [
                      {
                        "node": "Find database page",
                        "type": "main",
                        "index": 0
                      }
                    ]
                  ]
                }
              }
            }
          },
          "node_count": 11,
          "connection_count": 5,
          "extraction_time": 0.618939,
          "error": null
        },
        "layer3": {
          "success": true,
          "data": {
            "introduction": "This workflow syncs your GitHub issues to your Notion database. Whenever a new issue is opened in your GitHub repository, it will be shown in your Notion database, syncing the status property (opened/edited/closed/deleted). In case there\u2019s no Notion database existing yet, a new one will be created automatically.PrerequisitesNotion account andNotion credentialsGitHub account andGitHub credentialsHow it worksGithub trigger starts the workflow when a new issue is created in a GitHub repository.If node splits the workflow conditionally, showing whether the issue is new or an update of an existing issue.If data is new, the Notion node will create a new database page in Notion.If the data is not new, the Function node will create a Notion filter that will find its specific database page by issue ID.Switch node will then conditionally route the data into the appropriate Notion page, based on the update made upon it.",
            "overview": "",
            "tutorial_text": "This workflow syncs your GitHub issues to your Notion database. Whenever a new issue is opened in your GitHub repository, it will be shown in your Notion database, syncing the status property (opened/edited/closed/deleted). In case there\u2019s no Notion database existing yet, a new one will be created automatically.PrerequisitesNotion account andNotion credentialsGitHub account andGitHub credentialsHow it worksGithub trigger starts the workflow when a new issue is created in a GitHub repository.If node splits the workflow conditionally, showing whether the issue is new or an update of an existing issue.If data is new, the Notion node will create a new database page in Notion.If the data is not new, the Function node will create a Notion filter that will find its specific database page by issue ID.Switch node will then conditionally route the data into the appropriate Notion page, based on the update made upon it.",
            "tutorial_sections": [],
            "step_by_step": [],
            "best_practices": [],
            "common_pitfalls": [],
            "image_urls": [
              "https://n8n.io/nodes/github-trigger.svg",
              "https://gravatar.com/avatar/b3d1a47322f05a8be3d2e7bad6a80c29161bd58b91e4762cbb3ac25e5d0db5a8?r=pg&d=retro&size=200",
              "https://n8n.io/nodes/http-request.svg",
              "https://n8n.io/nodes/merge.svg",
              "https://n8n.io/nodes/microsoft-teams.svg",
              "https://gravatar.com/avatar/7ee0febc0cbec2f1f6b24ddec3c4322e27c82c91dc729cfecf6ce12bfddd058d?r=pg&d=retro&size=200",
              "https://gravatar.com/avatar/eb8eb92141f57c72c5f5a9fb5e8c85dca42047f764de54ab5466999cbb691079?r=pg&d=retro&size=200",
              "https://gravatar.com/avatar/6d3d2053279bc63e9be7bf4cd3fb74e13e7cc1309d32eab0b72140332cff577e?r=pg&d=retro&size=200",
              "https://n8n.io/images/stars-footer.svg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/avatar_igordisco_9243b86232_cd9a5c94ce.jpg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/neutral_avatar_purple_fee36bffe3.PNG",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/avatar_anderoav_589989fc39_ceb1c71a0c.jpg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/avatar_maxim_poulsen_48f450887b_852d0439bc.jpeg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/Felix_Leber_f7a5b3c776_130aeca79d.jpeg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/avatar_Ironben_0a4b3e7d12_e35805265c.jpg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/Francois_lassl_d5cfb504c7_710c87121d.jpeg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/twitter_x_62a44e965e.svg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/github_e1f217d7a3_b9a271324f.svg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/discord_253947c90b_191e8f60fa.svg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/linkedin_d710e84d63_6ed0dc28aa.svg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/youtube_de4bdef50a_4b3a8b8aac.svg"
            ],
            "video_urls": [],
            "code_snippets": [],
            "conclusion": "",
            "troubleshooting": {
              "common_issues": [],
              "error_messages": []
            },
            "related_workflows": []
          },
          "errors": [],
          "extraction_time": 5.962502,
          "metadata": {
            "workflow_id": "1804",
            "url": "https://n8n.io/workflows/1804",
            "extracted_at": "2025-10-11T08:48:07.891826",
            "extractor_version": "1.0.0"
          }
        }
      },
      "multimodal": null,
      "transcripts": null,
      "validation": {
        "layer1": {
          "score": 80,
          "issues": [
            "Difficulty level not set",
            "No engagement metrics available"
          ],
          "valid": true,
          "layer": "layer1"
        },
        "layer2": {
          "score": 100,
          "issues": [],
          "valid": true,
          "layer": "layer2"
        },
        "layer3": {
          "score": 35,
          "issues": [
            "No tutorial sections extracted",
            "No images extracted",
            "Missing required fields: title, description, steps",
            "No step-by-step content extracted"
          ],
          "valid": false,
          "layer": "layer3"
        }
      },
      "quality": {
        "overall_score": 70.0,
        "classification": "Fair",
        "layer1_score": 80,
        "layer2_score": 100,
        "layer3_score": 35,
        "consistency_score": 100.0,
        "total_issues": 6
      },
      "extraction_time": 25.644426822662354,
      "errors": [],
      "timestamp": "2025-10-11T08:47:48.251480"
    },
    {
      "success": true,
      "workflow_id": "1956",
      "url": "https://n8n.io/workflows/1956",
      "layers": {
        "layer1": {
          "success": true,
          "workflow_id": "1956",
          "data": {
            "title": "AI: Summarize podcast episode and enhance using Wikipedia",
            "description": "The workflow automates the process of creating a summarized and enriched podcast digest, which is then sent via email. Note that to use this template, you...",
            "author": "Igor Fediczko@igordisco",
            "use_case": "The workflow automates the process of creating a summarized and enriched podcast digest, which is then sent via email.",
            "primary_category": "Strictly necessary",
            "secondary_categories": [
              "Performance",
              "Targeting",
              "Functionality",
              "Strictly necessary cookies allow core website functionality such as user login and account management. The website cannot be used properly without strictly necessary cookies.",
              "Performance cookies are used to see how visitors use the website, eg. analytics cookies. Those cookies cannot be used to directly identify a certain visitor.",
              "Targeting cookies are used to identify visitors between different websites, eg. content partners, banner networks. Those cookies may be used by companies to build a profile of visitor interests or show relevant ads on other websites.",
              "Functionality cookies are used to remember visitor information on the website, eg. language, timezone, enhanced content."
            ],
            "node_tags": [
              "github147,222",
              "hiring"
            ],
            "general_tags": [
              "Targeting",
              "Performance",
              "Strictly necessary",
              "Functionality"
            ],
            "difficulty_level": "intermediate",
            "views": 0,
            "upvotes": 0,
            "created_date": "2025-10-11T08:48:05.090117",
            "updated_date": "2025-10-11T08:48:05.090117",
            "setup_instructions": "The workflow automates the process of creating a summarized and enriched podcast digest, which is then sent via email. Note that to use this template, you...",
            "prerequisites": [
              "token_v2",
              "or website it relates to",
              "{\n\t\tcontent: attr(label);\n\t\tfont-weight: bold;\n\t\twidth: 120px;\n\t\tmin-width: 120px;\n\t}",
              "visiting the said website",
              "__Secure-ROLLOUT_TOKEN"
            ],
            "estimated_setup_time": "4 minutes 59 sec",
            "industry": [
              "Strictly necessary"
            ]
          },
          "extraction_time": 17.6147882938385,
          "error": null
        },
        "layer2": {
          "success": true,
          "workflow_id": "1956",
          "data": {
            "id": 1956,
            "name": "AI: Summarize podcast episode and enhance using Wikipedia",
            "workflow": {
              "meta": {
                "instanceId": "408f9fb9940c3cb18ffdef0e0150fe342d6e655c3a9fac21f0f644e8bedabcd9",
                "templateCredsSetupCompleted": true
              },
              "nodes": [
                {
                  "id": "b2c3ff9d-936e-4c3c-b3da-84b44f12b6f0",
                  "name": "When clicking \"Execute Workflow\"",
                  "type": "n8n-nodes-base.manualTrigger",
                  "position": [
                    -980,
                    500
                  ],
                  "parameters": {},
                  "typeVersion": 1
                },
                {
                  "id": "8ddbbd62-a49b-44d9-b8db-d710c2cc7f07",
                  "name": "Sticky Note",
                  "type": "n8n-nodes-base.stickyNote",
                  "position": [
                    -560,
                    360
                  ],
                  "parameters": {
                    "width": 456,
                    "height": 638,
                    "content": "## Chunk the transcript into several parts, and refine-summarize it "
                  },
                  "typeVersion": 1
                },
                {
                  "id": "007400f1-97b8-4b31-a126-f9b76ffabc65",
                  "name": "Sticky Note1",
                  "type": "n8n-nodes-base.stickyNote",
                  "position": [
                    -80,
                    360
                  ],
                  "parameters": {
                    "width": 615.8516011477997,
                    "height": 443.66706715913415,
                    "content": "## Generate Questions and Topics from the summary and make sure the response follows required schema."
                  },
                  "typeVersion": 1
                },
                {
                  "id": "7e27d8fa-a21c-4690-bf84-6366695d49b6",
                  "name": "Sticky Note3",
                  "type": "n8n-nodes-base.stickyNote",
                  "position": [
                    560,
                    360
                  ],
                  "parameters": {
                    "width": 479,
                    "height": 508,
                    "content": "## Ask Agent to research and explain each topic using Wikipedia\n\n"
                  },
                  "typeVersion": 1
                },
                {
                  "id": "e6cef3c3-0811-49dc-9706-f98befeadfc0",
                  "name": "Sticky Note4",
                  "type": "n8n-nodes-base.stickyNote",
                  "position": [
                    1080,
                    360
                  ],
                  "parameters": {
                    "width": 452,
                    "height": 351,
                    "content": "## Format as HTML and send via Gmail"
                  },
                  "typeVersion": 1
                },
                {
                  "id": "cb911db1-d2af-4d2b-9338-3804f89d6de2",
                  "name": "Default Data Loader",
                  "type": "@n8n/n8n-nodes-langchain.documentDefaultDataLoader",
                  "position": [
                    -380,
                    722.5
                  ],
                  "parameters": {
                    "options": {}
                  },
                  "typeVersion": 1
                },
                {
                  "id": "20e60d3a-bc0d-4918-b0bc-53dea0b31e15",
                  "name": "OpenAI Chat Model",
                  "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
                  "position": [
                    -500,
                    720
                  ],
                  "parameters": {
                    "model": {
                      "__rl": true,
                      "mode": "list",
                      "value": "gpt-4o-mini"
                    },
                    "options": {}
                  },
                  "credentials": {
                    "openAiApi": {
                      "id": "8gccIjcuf3gvaoEr",
                      "name": "OpenAi account"
                    }
                  },
                  "typeVersion": 1.2
                },
                {
                  "id": "e6d03a52-ba51-4661-a3ff-647bffe1dc4a",
                  "name": "AI Agent",
                  "type": "@n8n/n8n-nodes-langchain.agent",
                  "position": [
                    680,
                    500
                  ],
                  "parameters": {
                    "text": "=Question: {{ $json.question }}\nWhy: {{ $json.why }}\n\nContext:  {{ $('Summarize Transcript').first().json.response.text }}\n",
                    "options": {},
                    "promptType": "define"
                  },
                  "typeVersion": 1.8
                },
                {
                  "id": "70c1fa3b-40b2-4015-b6dd-5f0750c80c1b",
                  "name": "Wikipedia",
                  "type": "@n8n/n8n-nodes-langchain.toolWikipedia",
                  "position": [
                    860,
                    720
                  ],
                  "parameters": {},
                  "typeVersion": 1
                },
                {
                  "id": "968816a8-2da1-4af0-abe1-e46f9df21883",
                  "name": "Podcast Episode Transcript",
                  "type": "n8n-nodes-base.code",
                  "position": [
                    -760,
                    500
                  ],
                  "parameters": {
                    "jsCode": "return { transcript: `So throughout the last couple episodes we\u2019ve been doing on the philosophy of mind\u2026there\u2019s been an IDEA that we\u2019ve referenced MULTIPLE TIMES\u2026 and really just glossed over it as something, that\u2019s PRACTICALLY self evident. \n\n\n\nThe idea\u2026 is that when we THINK about consciousness\u2026 we can SPLIT it into two different types\u2026there\u2019s ACCESS consciousness on the one hand\u2026 and PHENOMENAL consciousness on the other. This is what we\u2019ve been saying. \n\n\n\nWhen it comes to ACCESS consciousness\u2026that\u2019s stuff we CAN explain with neuroscience things like memories, information processing, our field of visual awareness\u2026we can CLEARLY EXPLAIN a bit about how all THAT stuff works.\n\n\n\nBut in this conversation so far, what KEEPS on being said\u2026 is that what we CAN\u2019T SEEM to explain\u2026is PHENOMENAL consciousness\u2026you know, the subjective experience, that UNDERLIES conscious thought. That it FEELS like something to be me. There\u2019s this idea\u2026that this phenomenal consciousness is something separate\u2026something fundamental, something in a category ALL IT\u2019S OWN\u2026 that needs to be explained. You can explain a lot of stuff about access consciousness\u2026but you can\u2019t explain PHENOMENAL consciousness. \n\n\n\nBut if you were a good materialist listening to the discussions on this series so far\u2026and you\u2019re sitting in the back of the room, being SUPER PATIENT, NOT SAYING ANYTHING trying to be respectful to all the other ideas being presented\u2026maybe there\u2019s a part of you so far that\u2019s just been BOILING inside, because you\u2019re waiting for the part of the show where we\u2019re ACTUALLY going to call that GIANT assumption that\u2019s being made into question. \n\n\n\nBecause a materialist might say, SURE\u2026phenomenal consciousness is PRETTY mysterious and all. But DOES that necessarily mean that it\u2019s something that NEEDS a further explanation? \n\n\n\nThis is a good question. What is the difference\u2026 between EXPLAINING ALL of the component PARTS of our subjective experience again the thoughts, memories, information processing\u2026what\u2019s the difference between explaining all that and explaining phenomenal consciousness\u2026 in itself? Like what does that even mean?\n\n\n\nThat\u2019s kinda like you saying\u2026well\u2026 you can EXPLAIN the delicious waffle cone. You can EXPLAIN the creamy chocolatey goodness inside, you can EXPLAIN the RAINBOW colored SPRINKLES. But you CAN\u2019T explain the ICE CREAM CONE\u2026in ITSELF, now can you? \n\n\n\nI mean at a CERTAIN point what are we even talking about anymore? IS phenomenal consciousness REALLY something that\u2019s ENTIRELY SEPARATE that needs to be explained? \n\n\n\nMaybe, it DOESN\u2019T need to be explained. Maybe phenomenal consciousness is less a thing in itself\u2026and MORE a sort of ATTRIBUTION we make\u2026 about a particular INTERSECTION of those component parts that we CAN study and explain. \n\n\n\nNow obviously there\u2019s a bit to clarify there\u2026 and going over some popular arguments as to why that might be the case will take a good portion of the episode here today. But maybe a good place to start is to ask the question\u2026if the hard problem of consciousness is to be able to explain why it FEELS like something to be me\u2026and your SOLUTION to that is that maybe we don\u2019t even need to explain that. One thing you\u2019re gonna HAVE to explain no matter what\u2026 is why it SEEMS to MOST people living in today\u2019s world\u2026that phenomenal consciousness IS something that needs to be explained. \n\n\n\nRight before we began this series we did an episode on Susan Sontag and the power of the metaphors we casually use in conversations. And we talked about how these metaphors ACTUALLY go on to have a pretty huge impact on the way we contextualize the things in our lives. \n\n\n\nWell the philosopher Susan Blackmore, and apparently\u2026 I ONLY cover female philosophers by the name of Susan or Simone on this show\u2026but anyway SUSAN BLACKMORE, huge player in these modern conversations about the mysteries of consciousness\u2026and she thinks that if it\u2019s DIFFICULT for someone to wrap their brain around the idea that phenomenal consciousness is NOT something that is conceptually distinct\u2026it MAY BE because of the METAPHORS about consciousness that we use in everyday conversation that are directing the way you THINK about consciousness\u2026 into a particular lane that\u2019s incorrect.  \n\n\n\nFor example, there\u2019s a way people think about consciousness\u2026 that\u2019s TRAGICALLY common in today\u2019s world\u2026it\u2019s become known as the Cartesian theater. So Cartesian obviously referring to Descartes. And when Descartes arrives at his substance dualism where the MIND is something ENTIRELY SEPARATE from the BODY\u2026this EVENT in the history of philosophy goes on to CHANGE the way that people start to see their conscious experience. They start to think\u2026 well what I am\u2026is I\u2019m this conscious creature, sort of perched up here inside of this head\u2026and I\u2019m essentially\u2026sitting in a theater, LOOKING OUT through a set of eyes which are kind of like the screen in a theater\u2026and on the screen what I SEE is the outside world. \n\n\n\nNow nobody ACTUALLY believes this is what is happening. Every person on this god forsaken planet KNOWS that there isn\u2019t a movie theater up in their heads. But hearing and using this metaphor DOES SHADE the way that they see their own conscious experience. The casual use of the metaphor\u2026 ALLOWS people to smuggle in assumptions about their subjective experience, that we REALLY have no evidence to be assuming. \n\n\n\nFor example, when the mind and body is totally separate\u2026maybe it becomes EASIER for people to believe that they\u2019re a SPIRIT that\u2019s INHABITING a body. Maybe it just makes it easier for people to VIEW their subjective, phenomenal consciousness as something SEPARATE from the body that needs to be explained in itself. WHATEVER IT IS though\u2026the point to Susan Blackmore is that metaphors you use have an IMPACT on your intuitions about consciousness. And she thinks there\u2019s several OTHER examples that fall into the very same CATEGORY as the Cartesian Theater.   \n\n\n\nHow about the idea that there\u2019s a unified, single, STREAM of consciousness that you\u2019re experiencing. The STREAM being the metaphor there. Susan Blackmore asks is a SINGLE, unified STREAM, REALLY the way that you experience your conscious thought? Like when you REALLY pay attention is that how you\u2019re existing?\n\n\n\nShe says most likely the only reason people SEE their consciousness in terms of a stream\u2026is because of the specific way that people are often asked to OBSERVE their own consciousness. There\u2019s a BIAS built into the way that we\u2019re checking in. How do people typically do it? Well they\u2019ll take a moment\u2026they\u2019ll stop what they\u2019re doing\u2026and they\u2019ll ask themselves: what does it feel like to be ME right now. They\u2019ll pay attention, they\u2019ll listen, they\u2019ll try to come up with an answer to the question\u2026and they\u2019ll realize that there\u2019s a PARTICULAR set of thoughts, feelings and perceptions that it FEELS like, to be YOU in THAT moment. \n\n\n\nBut then that person can wait for an hour\u2026come back later, and ask the very SAME QUESTION in a different moment: what does it feel like to be me right now\u2026and low and behold a totally DIFFERENT set of thoughts, feelings and perceptions come up. \n\n\n\nAnd then what we OFTEN DO as people at that point\u2026 is we FILL IN that empty space between those two moments with some ethereal STREAM of consciousness that we assume MUST HAVE existed between the two. \n\n\n\nBut at some OTHER level\u2026RATIONALLY we KNOW\u2026that for the whole time that we WEREN\u2019T doing this accounting of what it FEELS like to be me\u2026we KNOW that there were TONS of different unconscious meta-processes going on\u2026all doing their own things, sometimes interacting with each other, most of the time not. We KNOW that our EXPERIENCE of consciousness is just directing our attention to one PIECE of our mental activity or another\u2026 and that all those pieces of mental activity KEEP on operating whether we\u2019re FOCUSING on one of them or not. \n\n\n\nSo is there a specific LOCATION where there\u2019s some sort of collective STREAM where all of this stuff is bound together HOLISTICALLY? Is there ANY good reason to ASSUME that it NEEDS to BE that way? Could it be that the continuity of this mental activity is more of an ILLUSION\u2026 than it is a reality?\n\n\n\nAnd if this sounds impossible at first\u2026think of OTHER illusions that we KNOW go on in the brain. Think of how any SINGLE sector of the brain CREATES a similar sort of illusion. Memories. We KNOW that DIFFERENT parts of the brain are responsible for different types of memory. Semantic memory in the frontal cortex, episodic memory in the hippocampus, procedural memory in the cerebellum. ALL of these different areas work together in concert with each other, it\u2019s ALL seemingly unified. \n\n\n\nWhen someone cuts me off in traffic and I\u2019m choosing a reaction\u2026I don\u2019t CONSCIOUSLY, travel down to my cerebellum and say hey 200 million years ago how did my lizard grandfather react when a lizard cut him off in traffic\u2026no MULTIPLE different parts of the brain work together and create an ILLUSION of continuity. And the SAME thing goes for our VISUAL experience of the world. The SAME thing happens with our emotions. \n\n\n\nHere\u2019s Susan Blackmore saying: the traditional METAPHORS that we casually throw around about consciousness\u2026even with just a LITTLE bit of careful observation of your own experience\u2026being someone up in a theater in your head with a unified, continuous STREAM of your own consciousness\u2026this ISN\u2019T even how our experiences SEEM. \n\n\n\nNow it should be said if you were sufficiently COMMITTED to the process\u2026you could ABSOLUTELY carry on in life with a complete LACK of self awareness fueled by the METAPHORS of pop-psychology and MOVIES and TV shows, and you could DEFINITELY LIVE in a state of illusion about it. But that DOESN\u2019T make it right\u2026and what happens she asks when those METAPHORS go on to impact the way we conduct science or break things down philosophically? She says:\n\n\n\n\u201cNeuroscience and disciplined introspection give the same answer: there are multiple parallel processes with no clear distinction between conscious and unconscious ones. Consciousness is an attribution we make, not a property of only some special events or processes. Notions of the stream, contents, continuity and function of consciousness are all misguided as is the search for the neural correlates of consciousness.\u201d\n\n\n\nThe MORE you think about the ILLUSIONS that our brains create for the sake of simplicity\u2026the more the question starts to emerge: what if there is no CENTRALIZED HEADQUARTERS of the brain where the subjective experience of YOU\u2026is being produced? \n\n\n\nWhat if consciousness\u2026is an emergent property that exists\u2026ONLY, when there is a VERY SPECIFIC organization of physical systems? \n\n\n\nThere are people that believe that phenomenal consciousness\u2026 is an ILLUSION, they\u2019re often called Illusionists\u2026and what someone like THAT may say is sure, fully acknowledge there are other theories about what may ultimately explain phenomenal consciousness\u2026but isn\u2019t it ALSO, ENTIRELY POSSIBLE\u2026that what it FEELS like to be YOU\u2026is an illusion created by several, distributed processes of the brain running in parallel? Multiple different channels, exerting simultaneous influence on a variety of subsystems of the brain. That these subsystems talk to each other, they compete with each other, they ebb and flow between various states of representation. \n\n\n\nBut that these different DRAFTS of cognitive processes come together, to create a type of simplification of what\u2019s going on in aggregate\u2026 and that simplification is what YOU experience as\u2026 YOU. I mean we have our five senses that help us map the EXTERNAL world and they do so in a way that is often crude and incomplete. Could it be\u2026 that we SIMILARLY\u2026 have a crude misrepresentation of our own brain activity that SIMILARLY, allows us to be able to function efficiently as a person? \n\n\n\nIf you were looking for another METAPHOR to apply here that an illusionist might say is probably better for people to think of themselves in terms of\u2026 because its not gonna lead us down that rabbit hole of the cartesian theater\u2026its to THINK of phenomenal CONSCIOUSNESS\u2026as being SIMILAR to a USER INTERFACE or a DESKTOP on a computer. \n\n\n\nThe idea is: what IS the desktop of a computer? Well its a bunch of simplified ICONS on a screen, that allow you to essentially manipulate the ELECTRICAL VOLTAGE going on in between transistors on computer hardware. But AS you\u2019re pushing buttons to CHANNEL this electricity, getting things DONE on the computer\u2026you don\u2019t ACTUALLY need to know ANYTHING ABOUT the complex inner workings of how the software and hardware are operating.\n\n\n\nThe philosopher Daniel Dennett INTRODUCES the metaphor here in his famous book called Consciousness Explained (1991). He says:\n\n\n\n\u201cWhen I interact with the computer, I have limited access to the events occurring within it. Thanks to the schemes of presentation devised by the programmers, I am treated to an elaborate audiovisual metaphor, an interactive drama acted out on the stage of keyboard, mouse, and screen. I, the User, am subjected to a series of benign illusions: I seem to be able to move the cursor (a powerful and visible servant) to the very place in the computer where I keep my file, and once that I see that the cursor has arrived \u2018there\u2019, by pressing a key I get it to retrieve the file, spreading it out on a long scroll that unrolls in front of a window (the screen) at my command. I can make all sorts of things happen inside the computer by typing in various commands, pressing various buttons, and I don\u2019t have to know the details; I maintain control by relying on my understanding of the detailed audiovisual metaphors provided by the User illusion.\u201d\n\n\n\nSo if we take this metaphor seriously\u2026then the idea that you are some sort of privileged observer of everything that\u2019s going on in your mind\u2026that starts to seem like it\u2019s just FALSE. To Daniel Dennett\u2026we don\u2019t know what\u2019s REALLY happening at the deepest levels of our brains\u2026we only know what SEEMS to be happening. We are constantly acting in certain ways, doing things\u2026and then AFTER the fact making up reasons for why we ACTED in the way that we did.\n\n\n\nPoint is: you don\u2019t need to know EVERYTHING that\u2019s going on at EVERY LEVEL of a computer\u2026 to be able to for example, drag a file that you don\u2019t need anymore into the trash can on your desktop. You just drag the file into the trash can on this convenient, intuitive SCREEN. In fact you could make the argument that KNOWING about all the information being processed at other levels would get in the way of you being able to get things done that are USEFUL.\n\n\n\nBut\u2026 as its been said many times before\u2026to RELATE this back to our subjective experience of consciousness\u2026to an ILLUSIONIST\u2026 we have to acknowledge the fact\u2026that there is NO MORE\u2026 a TRASH CAN inside of your computer screen\u2026as there is a separate PHENOMENAL SUBJECT inside of your brain that needs to be explained. THAT\u2026is an ILLUSION. What you HAVE\u2026 Daniel Dennett refers to as an EDITED DIGEST, of events that are going on inside your brain. \n\n\n\nSo again just to clarify\u2026an ILLUSIONIST\u2026 doesn\u2019t DOUBT the existence of access consciousness, they\u2019re not saying that the OUTSIDE WORLD is an illusion\u2026 No, just the phenomenal REPRESENTATION of brain activity\u2026just the subjective YOU that experiences the world phenomenologically.\n\n\n\nThe philosopher Keith Frankish gives the example of a television set to describe the type of illusion they\u2019re talking about. He says: \n\n\n\u201cThink of watching a movie. What your eyes are actually witnessing is a series of still images rapidly succeeding each other. But your visual system represents these images as a single fluid moving image. The motion is an illusion. Similarly, illusionists argue, your introspective system misrepresents complex patterns of brain activity as simple phenomenal properties. The phenomenality is an illusion.\u201d\n\n\n\nWhen it FEELS LIKE SOMETHING to be you\u2026these phenomena are \u201cmetaphorical representations\u201d of REAL neural events that are going on\u2026and they definitely help us navigate reality\u2026they definitely ARE useful\u2026 but nothing about those phenomena\u2026 offer ANY sort of deep insight into the processes involved to produce that experience. So in THAT sense, they are an illusion. \n\n\n\nAnd Daniel Dennett goes HARD on ANYONE trying to smuggle in ANY MORE MAGIC than needs to be brought in to EXPLAIN consciousness. He wrote a GREAT entry in the journal of consciousness studies in 2016 called Illusionism as the obvious default theory of consciousness. \n\n\n\nNow what\u2019s he GETTING at with that title? Why should consciousness being an ILLUSION\u2026 be the DEFAULT theory we should all START from? Well he COMPARES the possibility of consciousness being an illusion\u2026with ANOTHER kind of illusion. The kind of illusion that you\u2019d see in VEGAS at a MAGIC show. \n\n\n\nBecause what HAPPENS at a MAGIC show? Well there are GREAT efforts MADE by the magician you\u2019re watching\u2026to TRICK you into thinking that what you\u2019re seeing is real. \n\n\n\nYou\u2019re watching the magic show from a VERY specific point of view\u2026CAREFULLY selected by the magician to LIMIT the information you have. They got lights and smoke and music to DISTRACT you, they\u2019re usually wearing some kind of bedazzled, cowboy costume looks like they got it at spirit Halloween, their poor assistant is dressed in God knows what to distract you. \n\n\n\nAnd when they DO the trick and the ILLUSION is finally COMPLETE\u2026and you\u2019re sitting there AMAZED, WONDERING as to how they defied the laws of nature and actually sawed someone in half and put them back together in front of you\u2026imagine someone in the crowd writing a REVIEW of the show the next day and saying, welp\u2026I guess EVERYTHING we KNOW about science needs to be rethought\u2026I mean this man is CLEARLY a wizard\u2026he is CLEARLY outside the bounds of natural constraints that we THOUGHT existed\u2026it\u2019s time to RETHINK our ENTIRE theoretical model.\n\n\n\nDaniel Dennett says who would EVER TAKE that person seriously? They\u2019d be laughed off the internet if they wrote that. And RIGHTFULLY SO. And SIMILARLY when it comes to these modern conversations about consciousness\u2026why would we EVER assume that our entire theoretical MODEL is flawed? Why would we ASSUME the supernatural? Why wouldn\u2019t we assume that anything that seems magical or mysterious definitely HAS a natural explanation\u2026and that we just don\u2019t understand it yet? \n\n\n\nIf you ONLY saw a magic trick from a single angle, like sitting in the audience of a theater\u2026it would be silly for us to assume that there wasn\u2019t a different perspective available that would SHOW how the trick was done. Similarly\u2026 we ONLY REALLY SEE the qualia of our subjective experience from the angle of introspection. \n\n\n\nThis is why to daniel dennett\u2026the DEFAULT position we should be starting from\u2026the MOST parsimonious explanation for a mystery that contradicts everything else we know\u2026is that it\u2019s an illusion. \n\n\n\nIt\u2019s funny because it\u2019s an argument that\u2019s coming from a place that\u2019s SIMILAR to where a panpsychist may be coming from, but it\u2019s arriving at a totally different conclusion. Panpsychist might say that we don\u2019t yet know enough about the human brain to write OFF the possibility that consciousness exists at some level underneath. Here\u2019s an illusionist position that\u2019s saying, yeah, we certainly HAVEN\u2019T been doing science long enough to know EVERYTHING about the brain\u2026and think of all the low hanging fruit in the sciences that could potentially EXPLAIN this mystery if only we have more time to study it. \n\n\n\nMore than that\u2026to an illusionist\u2026maybe there is something ABOUT the nature of the illusion that we\u2019re experiencing, that is NOT fully explainable by studying the physical properties of the brain. Maybe studying the ILLUSION ITSELF\u2026 is where we should be focusing more of our attention. \n\n\n\nBut that said\u2026there\u2019s no shortage of people out there that have PROBLEMS with saying consciousness is an illusion. For example\u2026 the philosopher Massimo Pigliucci, who by the way fun trivia fact is the only person OTHER than phillip goff that we\u2019ve ever interviewed on this show all the way back in our HUME series\u2026anyway HE once wrote an article where he talks about how Illusionism\u2026AS an ANSWER to the hard problem of consciousness\u2026is something that HE thinks HEAVILY relies on the specific definition you\u2019re using of what an ILLUSION is or what CONSCIOUSNESS is. \n\n\n\nTo explain what he means\u2026 let\u2019s go back to the metaphor about the icons on the computer screen. Massimo Pigliucci says this metaphor that Daniel Dennett presents in Consciousness Explained\u2026is a POWERFUL metaphor when it comes to describing the relationship between phenomenal consciousness\u2026 and the underlying neural machinery that makes it possible. It\u2019s great. But what HE can\u2019t seem to understand is why ANYONE would EVER CALL what\u2019s going ON there\u2026an \u201cillusion\u201d? Why USE the word illusion? \n\n\n\nWhen you hear the word illusion he says\u2026 you think of mind trickery, smoke and mirrors. But that\u2019s not what\u2019s happening when it comes to the user interface of a computer. He says, \u201ccomputer icons, cursors and so forth are not illusions, they are causally efficacious representations\u2026 of underlying machine language processes.\u201d \n\n\n\nWhat he\u2019s getting at\u2026 is that there\u2019s no ILLUSION going on here. There IS a connection between the underlying processes of the brain and our phenomenal experience of it. If it were truly an illusion, there would BE no real connection. But he says if you wanted to use that same logic\u2026would you say that the wheel of your CAR is an illusion? I mean when you\u2019re driving down the road and you turn the wheel\u2026you\u2019re not aware of the complexity of everything the car is doing, all of the internal communication going on to be able to turn the car in whatever direction you\u2019re going. Does that make it an illusion when you turn the steering wheel left and everything moves that makes the car go left? No, the steering wheel is causally connected to the underlying machinery\u2026 and that steering wheel makes it POSSIBLE for you to actually be able to drive the car efficiently. So why would you ever choose the word ILLUSION\u2026 to describe\u2026 what\u2019s going ON there? \n\n\n\nMassimo Pigliucci thinks there\u2019s an easy trap for someone to fall into living in today\u2019s world\u2026he calls it a sort of reductionist temptation\u2026we come from a LONG HISTORY in the sciences of progressively reducing things to a deeper, more fundamental level of their component parts\u2026 and then the assumption has usually been that if you can find a lower level of description about something\u2026for example if we can explain what PHENOMENAL CONSCIOUSNESS is, with a neurobiological explanation\u2026well then THAT explanation, must be MORE TRUE than anything going on at a more macro level\u2026at the level of the consciousness we experience every day. It must be a more FUNDAMENTAL explanation, and therefore a BETTER explanation. \n\n\n\nYou\u2019ll see this same kind of thinking going on when someone assumes the atoms that MAKE UP an apple\u2026 are more REAL in some sense than the apple in macroscopic reality\u2026the assumption being that the apple as WE experience it is some kind of an illusion created by our flawed SENSES and that it\u2019s somehow less valuable.  \n\n\n\nBut this whole way of thinking\u2026is UNWORKABLE he says. We\u2019ve learned over the course of THOUSANDS of years of trying to STUDY the things around us\u2026that different levels of description\u2026 are USEFUL for different purposes. \n\n\n\nHe gives a series of examples: he says, \u201cIf we are interested in the biochemistry of the brain, then the proper level of description is the subcellular one, taking lower levels (eg, the quantum one) as background conditions. If we want a broader picture of how the brain works, we need to move up to the anatomical level, which takes all previous levels, from the subcellular to the quantum one, as background conditions. But if we want to talk to other human beings about how we feel and what we are experiencing, then it is the psychological level of description (the equivalent of Dennett\u2019s icons and cursors) that, far from being illusory, is the most valuable.\u201d\n\n\n\nReality plays by different sets of rules at different scales. And different SCALES of reality are USEFUL for different types of inquiry. When you\u2019re going about your everyday life do you assume that the ground is solid? Or do you use the lower level of description at the atomic level where the ground is really 99.9% empty space?\n\n\n\nSo when it comes to consciousness\u2026if we\u2019re gonna SAY that a neurobiological description of what\u2019s going on invalidates the experience of what\u2019s going on at the level of subjectivity, that subjectivity is nothing but an illusion\u2026then why stop at the neurobiological level he says? Why not say that neurons are actually an illusion because they\u2019re ultimately made up of molecules? Why not say that MOLECULES are illusions because they\u2019re really made up of quarks and gluons. You can do this INFINITELY. \n\n\n\nAnd maybe on a more GENERAL note\u2026JUST when it comes to this lifelong process of trying to be as clear thinking of a human being as you possibly CAN be\u2026maybe part of that whole process\u2026 is accepting the fact that there is no, single, monistic way of analyzing reality that is the ULTIMATE METHOD of understanding it. Maybe understanding reality\u2026 just takes a more pluralistic approach, maybe GETTING as close to the truth as we can as people takes LOOKING at reality from many different angles at many different scales, and maybe phenomenal consciousness is an important scale of reality\u2026 that we need to be considering. \n\n\n\nSo from Daniel Dennett and Keith Frankish offering a take on HOW consciousness might be an illusion\u2026to Susan Blackmore offering a take on WHY the illusion of consciousness is such an easy trap to FALL into\u2026I think if anyone you\u2019re in a conversation with calls themselves an illusionist\u2026then unless you\u2019re talking to David Copperfield I think you\u2019ll at LEAST be able to understand the main reasons for why someone may THINK this way about consciousness. \n\n\n\nAnd this is the point in the conversation where we hit a bit of a crossroads\u2026SAME crossroads that we\u2019ve seen with OTHER theories of consciousness in the series so far. At a certain point...there are GOOD reasons to believe that phenomenal consciousness may be an illusion\u2026and there are good reasons to DOUBT whether that is true or not. As we\u2019ve talked about at a certain point with these conversations you just have to CHOOSE to believe in something, and then deal with the prescriptive implications of BELIEVING it after the fact\u2026and one of the ones with Illusionism in particular is you can start to wonder, the more you think about it, how much consciousness being an illusion, ACTUALLY has an impact on ANYTHING going on in your everyday life or your relationship to society. \n\n\n\nIt\u2019s actually pretty interesting to consider\u2026how much the possibility of consciousness being an illusion\u2026DIRECTLY MIRRORS, OTHER, unsolved conversations in the philosophy of mind more broadly. Like for example\u2026the ongoing debate about whether FREE WILL is an illusion. \n\n\n\nIn fact in order to be able to talk about the societal impacts of consciousness being an illusion we have to talk about free will being one as well. \n\n\n\nNext episode we\u2019re going to dive into it. Free will, free wont, hard determinism and the implications of ALL of these when it comes to structuring our societies. Keep your eyes open for it, it will be out soon! Thanks for everyone on Patreon and thanks for checking out the website at philosophizethis.org\n\n\n\nBut as always, thank you for listening. Talk to you next time. `}"
                  },
                  "typeVersion": 2
                },
                {
                  "id": "a2ba5d04-8c28-4899-b131-29ade473526e",
                  "name": "Summarize Transcript",
                  "type": "@n8n/n8n-nodes-langchain.chainSummarization",
                  "position": [
                    -484,
                    500
                  ],
                  "parameters": {
                    "options": {},
                    "operationMode": "documentLoader"
                  },
                  "typeVersion": 2
                },
                {
                  "id": "47b73fb3-0d0c-4125-8639-8809ebccb9f6",
                  "name": "Recursive Character Text Splitter",
                  "type": "@n8n/n8n-nodes-langchain.textSplitterRecursiveCharacterTextSplitter",
                  "position": [
                    -280,
                    860
                  ],
                  "parameters": {
                    "options": {},
                    "chunkSize": 6000,
                    "chunkOverlap": 1000
                  },
                  "typeVersion": 1
                },
                {
                  "id": "0830e349-2c8e-45ad-89be-14a77d0d083e",
                  "name": "Extract Topics & Questions",
                  "type": "@n8n/n8n-nodes-langchain.informationExtractor",
                  "position": [
                    -4,
                    500
                  ],
                  "parameters": {
                    "text": "=Podcast Summary:  {{ $json.response.output_text }}",
                    "options": {
                      "systemPromptTemplate": "=Come up with a list of questions and further topics to explore that are relevant for the context. Make sure questions are relevant to the topics but not verbatim. Think hard about what the appropriate questions should be and how it relates to the summarization."
                    },
                    "schemaType": "manual",
                    "inputSchema": "{\n  \"type\": \"object\",\n  \"properties\": {\n    \"questions\": {\n      \"type\": \"array\",\n      \"items\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"question\": {\n            \"type\": \"string\"\n          },\n          \"why\": {\n            \"type\": \"string\",\n            \"description\": \"Explanation of why this question is relevant for the context\"\n          }\n        },\n        \"required\": [\n          \"question\",\n          \"why\"\n        ]\n      }\n    },\n    \"topics\": {\n      \"type\": \"array\",\n      \"items\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"topic\": {\n            \"type\": \"string\"\n          },\n          \"why\": {\n            \"type\": \"string\",\n            \"description\": \"A few sentences explanation of why this topic is relevant for the context\"\n          }\n        },\n        \"required\": [\n          \"topic\",\n          \"why\"\n        ]\n      }\n    }\n  },\n  \"required\": [\n    \"questions\",\n    \"topics\"\n  ]\n}"
                  },
                  "typeVersion": 1
                },
                {
                  "id": "e9e8239d-2154-406a-98c2-b77511a70f3e",
                  "name": "OpenAI Chat Model3",
                  "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
                  "position": [
                    80,
                    660
                  ],
                  "parameters": {
                    "model": {
                      "__rl": true,
                      "mode": "list",
                      "value": "gpt-4o-mini"
                    },
                    "options": {}
                  },
                  "credentials": {
                    "openAiApi": {
                      "id": "8gccIjcuf3gvaoEr",
                      "name": "OpenAi account"
                    }
                  },
                  "typeVersion": 1.2
                },
                {
                  "id": "b3abb262-f334-4ef4-b8f7-a8e6e8aa3b5f",
                  "name": "Topics",
                  "type": "n8n-nodes-base.splitOut",
                  "position": [
                    340,
                    500
                  ],
                  "parameters": {
                    "options": {},
                    "fieldToSplitOut": "output.questions"
                  },
                  "typeVersion": 1
                },
                {
                  "id": "0bd53e7e-e1dd-47bb-86a1-e4f270c4dab3",
                  "name": "OpenAI Chat Model1",
                  "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
                  "position": [
                    700,
                    720
                  ],
                  "parameters": {
                    "model": {
                      "__rl": true,
                      "mode": "list",
                      "value": "gpt-4o-mini"
                    },
                    "options": {}
                  },
                  "credentials": {
                    "openAiApi": {
                      "id": "8gccIjcuf3gvaoEr",
                      "name": "OpenAi account"
                    }
                  },
                  "typeVersion": 1.2
                },
                {
                  "id": "6c05ed75-e890-4500-9804-6118adca6ee6",
                  "name": "Format topic text & title",
                  "type": "n8n-nodes-base.code",
                  "position": [
                    1160,
                    500
                  ],
                  "parameters": {
                    "jsCode": "const inputItems = $input.all();\nconst topics = [];\nconst questions = [];\nconst summary = $('Summarize Transcript').first().json.response.text;\n// Format Topics\nfor (const [index, topic] of inputItems.entries()) {\n  const title = $('Topics').all()[index].json.question\n\n  topics.push(`\n    <h3>${title}</h3>\n    <p>${topic.json.output}</p>`.trim()\n  )\n}\n\n// Format Questions\nfor (const question of $('Extract Topics & Questions').first().json.output.questions) {\n  questions.push(`\n    <h3>${question.question}</h3>\n    <p>${question.why}</p>`.trim()\n  )\n}\n\nreturn { topics, summary, questions }"
                  },
                  "typeVersion": 2
                },
                {
                  "id": "836c1897-04bd-4547-897f-d7bf5ad91762",
                  "name": "Send Digest",
                  "type": "n8n-nodes-base.gmail",
                  "position": [
                    1340,
                    500
                  ],
                  "webhookId": "8c4cf2db-e22b-46e6-b27a-c03044bd38dc",
                  "parameters": {
                    "sendTo": "oleg@n8n.io",
                    "message": "=Greetings \ud83d\udc4b,\nHope you're doing well! Here's your digest for this week's episode of Philoshopy This! \n\n<h2>\ud83c\udf99 Episode Summary</h2>\n{{ $json.summary }}\n\n<h2>\ud83d\udca1 Topics Discussed</h2>\n{{ $json.topics.join('\\n') }}\n\n<h2>\u2753 Questions to Ponder</h2>\n{{ $json.questions.join('\\n') }}",
                    "options": {},
                    "subject": "Podcast Digest"
                  },
                  "credentials": {
                    "gmailOAuth2": {
                      "id": "Sf5Gfl9NiFTNXFWb",
                      "name": "Gmail account"
                    }
                  },
                  "typeVersion": 2.1
                }
              ],
              "pinData": {},
              "connections": {
                "Topics": {
                  "main": [
                    [
                      {
                        "node": "AI Agent",
                        "type": "main",
                        "index": 0
                      }
                    ]
                  ]
                },
                "AI Agent": {
                  "main": [
                    [
                      {
                        "node": "Format topic text & title",
                        "type": "main",
                        "index": 0
                      }
                    ]
                  ]
                },
                "Wikipedia": {
                  "ai_tool": [
                    [
                      {
                        "node": "AI Agent",
                        "type": "ai_tool",
                        "index": 0
                      }
                    ]
                  ]
                },
                "OpenAI Chat Model": {
                  "ai_languageModel": [
                    [
                      {
                        "node": "Summarize Transcript",
                        "type": "ai_languageModel",
                        "index": 0
                      }
                    ]
                  ]
                },
                "OpenAI Chat Model1": {
                  "ai_languageModel": [
                    [
                      {
                        "node": "AI Agent",
                        "type": "ai_languageModel",
                        "index": 0
                      }
                    ]
                  ]
                },
                "OpenAI Chat Model3": {
                  "ai_languageModel": [
                    [
                      {
                        "node": "Extract Topics & Questions",
                        "type": "ai_languageModel",
                        "index": 0
                      }
                    ]
                  ]
                },
                "Default Data Loader": {
                  "ai_document": [
                    [
                      {
                        "node": "Summarize Transcript",
                        "type": "ai_document",
                        "index": 0
                      }
                    ]
                  ]
                },
                "Summarize Transcript": {
                  "main": [
                    [
                      {
                        "node": "Extract Topics & Questions",
                        "type": "main",
                        "index": 0
                      }
                    ]
                  ]
                },
                "Format topic text & title": {
                  "main": [
                    [
                      {
                        "node": "Send Digest",
                        "type": "main",
                        "index": 0
                      }
                    ]
                  ]
                },
                "Extract Topics & Questions": {
                  "main": [
                    [
                      {
                        "node": "Topics",
                        "type": "main",
                        "index": 0
                      }
                    ]
                  ]
                },
                "Podcast Episode Transcript": {
                  "main": [
                    [
                      {
                        "node": "Summarize Transcript",
                        "type": "main",
                        "index": 0
                      }
                    ]
                  ]
                },
                "When clicking \"Execute Workflow\"": {
                  "main": [
                    [
                      {
                        "node": "Podcast Episode Transcript",
                        "type": "main",
                        "index": 0
                      }
                    ]
                  ]
                },
                "Recursive Character Text Splitter": {
                  "ai_textSplitter": [
                    [
                      {
                        "node": "Default Data Loader",
                        "type": "ai_textSplitter",
                        "index": 0
                      }
                    ]
                  ]
                }
              }
            }
          },
          "node_count": 18,
          "connection_count": 13,
          "extraction_time": 0.756763,
          "error": null
        },
        "layer3": {
          "success": true,
          "data": {
            "introduction": "The workflow automates the process of creating a summarized and enriched podcast digest, which is then sent via email.Note that to use this template, you need to be on n8n version 1.19.4 or later.",
            "overview": "",
            "tutorial_text": "The workflow automates the process of creating a summarized and enriched podcast digest, which is then sent via email.Note that to use this template, you need to be on n8n version 1.19.4 or later.",
            "tutorial_sections": [],
            "step_by_step": [],
            "best_practices": [],
            "common_pitfalls": [],
            "image_urls": [
              "https://n8n.io/nodes/gmail.svg",
              "https://n8n.io/nodes/code.svg",
              "https://gravatar.com/avatar/b3d1a47322f05a8be3d2e7bad6a80c29161bd58b91e4762cbb3ac25e5d0db5a8?r=pg&d=retro&size=200",
              "https://n8n.io/nodes/github-trigger.svg",
              "https://n8n.io/nodes/http-request.svg",
              "https://n8n.io/nodes/merge.svg",
              "https://n8n.io/nodes/google-sheets.svg",
              "https://gravatar.com/avatar/988a46579257f9e8c522aeb7b906f1ee96e47c4298faa548e41b04957f455ae3?r=pg&d=retro&size=200",
              "https://gravatar.com/avatar/d41b8a0aa81139243509c58870f5b4be292824a507ab57d10ed066d8628ed8da?r=pg&d=retro&size=200",
              "https://gravatar.com/avatar/e1fc0901703aede75c35d38ff26caf8e44b424893e1330efb483d68f5f67e059?r=pg&d=retro&size=200",
              "https://n8n.io/nodes/openai-chat-model.svg",
              "https://gravatar.com/avatar/d6c9cb4d0092909e227e9de518409cdf679228a7df550714ce808d77976221af?r=pg&d=retro&size=200",
              "https://n8n.io/nodes/webhook.svg",
              "https://n8n.io/nodes/telegram.svg",
              "https://gravatar.com/avatar/e7ca218dfc87b68344bbd66f40da01546d2f6fc1cf884267821e8a77e3e8410a?r=pg&d=retro&size=200",
              "https://n8n.io/images/stars-footer.svg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/avatar_igordisco_9243b86232_cd9a5c94ce.jpg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/neutral_avatar_purple_fee36bffe3.PNG",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/avatar_anderoav_589989fc39_ceb1c71a0c.jpg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/avatar_maxim_poulsen_48f450887b_852d0439bc.jpeg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/Felix_Leber_f7a5b3c776_130aeca79d.jpeg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/avatar_Ironben_0a4b3e7d12_e35805265c.jpg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/Francois_lassl_d5cfb504c7_710c87121d.jpeg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/twitter_x_62a44e965e.svg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/github_e1f217d7a3_b9a271324f.svg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/discord_253947c90b_191e8f60fa.svg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/linkedin_d710e84d63_6ed0dc28aa.svg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/youtube_de4bdef50a_4b3a8b8aac.svg"
            ],
            "video_urls": [],
            "code_snippets": [],
            "conclusion": "",
            "troubleshooting": {
              "common_issues": [],
              "error_messages": []
            },
            "related_workflows": []
          },
          "errors": [],
          "extraction_time": 6.35626,
          "metadata": {
            "workflow_id": "1956",
            "url": "https://n8n.io/workflows/1956",
            "extracted_at": "2025-10-11T08:48:07.889687",
            "extractor_version": "1.0.0"
          }
        }
      },
      "multimodal": null,
      "transcripts": null,
      "validation": {
        "layer1": {
          "score": 80,
          "issues": [
            "Difficulty level not set",
            "No engagement metrics available"
          ],
          "valid": true,
          "layer": "layer1"
        },
        "layer2": {
          "score": 100,
          "issues": [],
          "valid": true,
          "layer": "layer2"
        },
        "layer3": {
          "score": 25,
          "issues": [
            "Tutorial text short (recommended 200+ characters)",
            "No tutorial sections extracted",
            "No images extracted",
            "Missing required fields: title, description, steps",
            "No step-by-step content extracted"
          ],
          "valid": false,
          "layer": "layer3"
        }
      },
      "quality": {
        "overall_score": 66.0,
        "classification": "Fair",
        "layer1_score": 80,
        "layer2_score": 100,
        "layer3_score": 25,
        "consistency_score": 100.0,
        "total_issues": 7
      },
      "extraction_time": 26.03718400001526,
      "errors": [],
      "timestamp": "2025-10-11T08:47:48.252116"
    },
    {
      "success": true,
      "workflow_id": "2021",
      "url": "https://n8n.io/workflows/2021",
      "layers": {
        "layer1": {
          "success": true,
          "workflow_id": "2021",
          "data": {
            "title": "Unknown Title",
            "description": "",
            "author": "Unknown Author",
            "use_case": "General workflow automation",
            "primary_category": "Strictly necessary",
            "secondary_categories": [
              "Performance",
              "Targeting",
              "Functionality",
              "Strictly necessary cookies allow core website functionality such as user login and account management. The website cannot be used properly without strictly necessary cookies.",
              "Performance cookies are used to see how visitors use the website, eg. analytics cookies. Those cookies cannot be used to directly identify a certain visitor.",
              "Targeting cookies are used to identify visitors between different websites, eg. content partners, banner networks. Those cookies may be used by companies to build a profile of visitor interests or show relevant ads on other websites.",
              "Functionality cookies are used to remember visitor information on the website, eg. language, timezone, enhanced content."
            ],
            "node_tags": [],
            "general_tags": [
              "Targeting",
              "Performance",
              "Strictly necessary",
              "Functionality"
            ],
            "difficulty_level": "intermediate",
            "views": 0,
            "upvotes": 0,
            "created_date": "2025-10-11T08:48:18.722496",
            "updated_date": "2025-10-11T08:48:18.722496",
            "setup_instructions": "",
            "prerequisites": [
              "token_v2",
              "or website it relates to",
              "{\n\t\tcontent: attr(label);\n\t\tfont-weight: bold;\n\t\twidth: 120px;\n\t\tmin-width: 120px;\n\t}",
              "visiting the said website",
              "__Secure-ROLLOUT_TOKEN"
            ],
            "estimated_setup_time": "4 minutes 59 sec",
            "industry": [
              "Strictly necessary"
            ]
          },
          "extraction_time": 5.327899932861328,
          "error": null
        },
        "layer2": {
          "success": false,
          "workflow_id": "2021",
          "data": null,
          "node_count": 0,
          "connection_count": 0,
          "extraction_time": 0.183447,
          "error": "Workflow not found (404)"
        },
        "layer3": {
          "success": true,
          "data": {
            "introduction": "",
            "overview": "",
            "tutorial_text": "",
            "tutorial_sections": [],
            "step_by_step": [],
            "best_practices": [],
            "common_pitfalls": [],
            "image_urls": [],
            "video_urls": [],
            "code_snippets": [],
            "conclusion": "",
            "troubleshooting": {
              "common_issues": [],
              "error_messages": []
            },
            "related_workflows": []
          },
          "errors": [],
          "extraction_time": 5.615184,
          "metadata": {
            "workflow_id": "2021",
            "url": "https://n8n.io/workflows/2021",
            "extracted_at": "2025-10-11T08:48:20.004903",
            "extractor_version": "1.0.0"
          }
        }
      },
      "multimodal": null,
      "transcripts": null,
      "validation": {
        "layer1": {
          "score": 55,
          "issues": [
            "Description missing or too short (minimum 20 characters)",
            "Difficulty level not set",
            "Author not identified",
            "No engagement metrics available"
          ],
          "valid": false,
          "layer": "layer1"
        },
        "layer2": null,
        "layer3": {
          "score": 5,
          "issues": [
            "Tutorial text missing",
            "No tutorial sections extracted",
            "No images extracted",
            "Missing required fields: title, description, steps",
            "No step-by-step content extracted"
          ],
          "valid": false,
          "layer": "layer3"
        }
      },
      "quality": {
        "overall_score": 20.0,
        "classification": "Poor",
        "layer1_score": 55,
        "layer2_score": null,
        "layer3_score": 5,
        "consistency_score": 70.0,
        "total_issues": 9
      },
      "extraction_time": 11.763798952102661,
      "errors": [
        "Layer 2 extraction failed: Workflow not found (404)"
      ],
      "timestamp": "2025-10-11T08:48:13.896263"
    },
    {
      "success": true,
      "workflow_id": "1799",
      "url": "https://n8n.io/workflows/1799",
      "layers": {
        "layer1": {
          "success": true,
          "workflow_id": "1799",
          "data": {
            "title": "RSS feed for ARD Audiothek podcasts",
            "description": "This workflow builds a valid RSS feed (which is an XML feed under the hood) for ARD Audiothek podcasts. This allows you to subscribe to such podcasts using...",
            "author": "Igor Fediczko@igordisco",
            "use_case": "This workflow builds a valid RSS feed (which is an XML feed under the hood) for ARD Audiothek podcasts.",
            "primary_category": "Strictly necessary",
            "secondary_categories": [
              "Performance",
              "Targeting",
              "Functionality",
              "Strictly necessary cookies allow core website functionality such as user login and account management. The website cannot be used properly without strictly necessary cookies.",
              "Performance cookies are used to see how visitors use the website, eg. analytics cookies. Those cookies cannot be used to directly identify a certain visitor.",
              "Targeting cookies are used to identify visitors between different websites, eg. content partners, banner networks. Those cookies may be used by companies to build a profile of visitor interests or show relevant ads on other websites.",
              "Functionality cookies are used to remember visitor information on the website, eg. language, timezone, enhanced content."
            ],
            "node_tags": [
              "github147,222",
              "hiring"
            ],
            "general_tags": [
              "Targeting",
              "Performance",
              "Strictly necessary",
              "Functionality"
            ],
            "difficulty_level": "intermediate",
            "views": 0,
            "upvotes": 0,
            "created_date": "2025-10-11T08:48:22.193333",
            "updated_date": "2025-10-11T08:48:22.193333",
            "setup_instructions": "This workflow builds a valid RSS feed (which is an XML feed under the hood) for ARD Audiothek podcasts. This allows you to subscribe to such podcasts using...",
            "prerequisites": [
              "token_v2",
              "or website it relates to",
              "{\n\t\tcontent: attr(label);\n\t\tfont-weight: bold;\n\t\twidth: 120px;\n\t\tmin-width: 120px;\n\t}",
              "visiting the said website",
              "__Secure-ROLLOUT_TOKEN"
            ],
            "estimated_setup_time": "4 minutes 59 sec",
            "industry": [
              "Strictly necessary"
            ]
          },
          "extraction_time": 8.45937180519104,
          "error": null
        },
        "layer2": {
          "success": true,
          "workflow_id": "1799",
          "data": {
            "id": 1799,
            "name": "RSS feed for ARD Audiothek podcasts",
            "workflow": {
              "nodes": [
                {
                  "id": "35c4aa9f-7535-4315-9174-fe97afc6de2e",
                  "name": "On clicking 'execute'",
                  "type": "n8n-nodes-base.manualTrigger",
                  "position": [
                    240,
                    300
                  ],
                  "parameters": {},
                  "typeVersion": 1
                },
                {
                  "id": "ed1f4f78-733f-4dd5-9785-969c9ec0d637",
                  "name": "Get overview page",
                  "type": "n8n-nodes-base.httpRequest",
                  "position": [
                    460,
                    300
                  ],
                  "parameters": {
                    "url": "https://www.ardaudiothek.de/sendung/kalk-und-welk/10777871/",
                    "options": {},
                    "responseFormat": "string"
                  },
                  "typeVersion": 2
                },
                {
                  "id": "28333c78-aa8f-401a-8033-2007a5e6991c",
                  "name": "Extract links",
                  "type": "n8n-nodes-base.htmlExtract",
                  "position": [
                    680,
                    300
                  ],
                  "parameters": {
                    "options": {},
                    "extractionValues": {
                      "values": [
                        {
                          "key": "links",
                          "attribute": "href",
                          "cssSelector": "a[href*=\"/episode/\"]",
                          "returnArray": true,
                          "returnValue": "attribute"
                        }
                      ]
                    }
                  },
                  "typeVersion": 1
                },
                {
                  "id": "58840494-4208-49ce-b82a-d7cf8abd3b29",
                  "name": "Remove duplicate links",
                  "type": "n8n-nodes-base.itemLists",
                  "position": [
                    1120,
                    300
                  ],
                  "parameters": {
                    "operation": "removeDuplicates"
                  },
                  "typeVersion": 1
                },
                {
                  "id": "17efb905-b947-4538-ab34-d50bf7fdbd75",
                  "name": "Split out lists",
                  "type": "n8n-nodes-base.itemLists",
                  "position": [
                    900,
                    300
                  ],
                  "parameters": {
                    "options": {
                      "destinationFieldName": "link"
                    },
                    "fieldToSplitOut": "links"
                  },
                  "typeVersion": 1
                },
                {
                  "id": "59a69e64-ebba-42cb-b8d0-8dd73f0ae962",
                  "name": "Get episode page",
                  "type": "n8n-nodes-base.httpRequest",
                  "position": [
                    1340,
                    300
                  ],
                  "parameters": {
                    "url": "=https://www.ardaudiothek.de{{ $json[\"link\"] }}",
                    "options": {},
                    "responseFormat": "string"
                  },
                  "typeVersion": 2
                },
                {
                  "id": "68749bff-1499-4ef5-aefd-c4b6233d0fa7",
                  "name": "Extract script",
                  "type": "n8n-nodes-base.htmlExtract",
                  "position": [
                    1560,
                    300
                  ],
                  "parameters": {
                    "options": {},
                    "extractionValues": {
                      "values": [
                        {
                          "key": "script",
                          "cssSelector": "script:nth-of-type(2)",
                          "returnValue": "html"
                        }
                      ]
                    }
                  },
                  "typeVersion": 1
                },
                {
                  "id": "158e7b18-f58d-453f-80f8-97e65f0b1fde",
                  "name": "Parse JSON",
                  "type": "n8n-nodes-base.set",
                  "position": [
                    1780,
                    300
                  ],
                  "parameters": {
                    "values": {
                      "string": [
                        {
                          "name": "data",
                          "value": "={{ JSON.parse($json.script) }}"
                        }
                      ]
                    },
                    "options": {},
                    "keepOnlySet": true
                  },
                  "typeVersion": 1
                },
                {
                  "id": "a613c52e-395b-4d88-ab7d-b1cf2b664b43",
                  "name": "Define feed items",
                  "type": "n8n-nodes-base.function",
                  "position": [
                    2000,
                    300
                  ],
                  "parameters": {
                    "functionCode": "const escapeHTML = str => str.replace(/[&<>'\"]/g, \n  tag => ({\n      '&': '&amp;',\n      '<': '&lt;',\n      '>': '&gt;',\n      \"'\": '&#39;',\n      '\"': '&quot;'\n    }[tag]));\n\nlet feedItems = [];\nfor (item of items) {\n  feedItems.push(`<item>\n  <title>${escapeHTML(item.json.data.name)}</title>\n  <enclosure url=\"${item.json.data.associatedMedia.contentUrl}\" length=\"${item.json.data.timeRequired * 20 * 1000}\" type=\"${item.json.data.encodingFormat}\"/>\n  <guid isPermaLink=\"false\">${item.json.data.identifier}</guid>\n  <pubDate>${DateTime.fromISO(item.json.data.datePublished).toRFC2822()}</pubDate>\n  <description>${escapeHTML(item.json.data.description)}</description>\n</item>`);\n}\n\nreturn [{\n  data: `<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<rss version=\"2.0\" xmlns:itunes=\"http://www.itunes.com/dtds/podcast-1.0.dtd\" xmlns:content=\"http://purl.org/rss/1.0/modules/content/\">\n  <channel>\n    <title>${escapeHTML(items[0].json.data.partOfSeries.name)}</title>\n    <description>${escapeHTML(items[0].json.data.partOfSeries.about)}</description>\n    <itunes:image href=\"${escapeHTML(items[0].json.data.image)}\" />\n    <language>${items[0].json.data.inLanguage}</language>\n    <itunes:category text=\"Comedy\" />\n    <itunes:explicit>no</itunes:explicit>\n    <link>${items[0].json.data.partOfSeries.url}</link>\n    <copyright>\u00a9 ${$now.toFormat('yyyy')} ${escapeHTML(items[0].json.data.productionCompany)}</copyright>\n    <itunes:author>${escapeHTML(items[0].json.data.productionCompany)}</itunes:author>\n    ${feedItems.join('\\n')}\n  </channel>\n</rss>\n`\n}];\n"
                  },
                  "typeVersion": 1
                },
                {
                  "id": "cbdc367d-a685-4f0b-a9f3-0aedc2c8b3c1",
                  "name": "Feed",
                  "type": "n8n-nodes-base.webhook",
                  "position": [
                    240,
                    100
                  ],
                  "webhookId": "3fbd94de-2fb3-4b32-a46e-c237865479b9",
                  "parameters": {
                    "path": "3fbd94de-2fb3-4b32-a46e-c237865479b9.rss",
                    "options": {},
                    "responseMode": "responseNode"
                  },
                  "typeVersion": 1
                },
                {
                  "id": "0dfb02cc-1944-4542-b5c5-9e0b198e143d",
                  "name": "Serve feed",
                  "type": "n8n-nodes-base.respondToWebhook",
                  "position": [
                    2220,
                    300
                  ],
                  "parameters": {
                    "options": {
                      "responseCode": 200,
                      "responseHeaders": {
                        "entries": [
                          {
                            "name": "Content-Type",
                            "value": "application/rss+xml"
                          }
                        ]
                      }
                    },
                    "respondWith": "text",
                    "responseBody": "={{ $json[\"data\"] }}"
                  },
                  "typeVersion": 1
                }
              ],
              "connections": {
                "Feed": {
                  "main": [
                    [
                      {
                        "node": "Get overview page",
                        "type": "main",
                        "index": 0
                      }
                    ]
                  ]
                },
                "Parse JSON": {
                  "main": [
                    [
                      {
                        "node": "Define feed items",
                        "type": "main",
                        "index": 0
                      }
                    ]
                  ]
                },
                "Extract links": {
                  "main": [
                    [
                      {
                        "node": "Split out lists",
                        "type": "main",
                        "index": 0
                      }
                    ]
                  ]
                },
                "Extract script": {
                  "main": [
                    [
                      {
                        "node": "Parse JSON",
                        "type": "main",
                        "index": 0
                      }
                    ]
                  ]
                },
                "Split out lists": {
                  "main": [
                    [
                      {
                        "node": "Remove duplicate links",
                        "type": "main",
                        "index": 0
                      }
                    ]
                  ]
                },
                "Get episode page": {
                  "main": [
                    [
                      {
                        "node": "Extract script",
                        "type": "main",
                        "index": 0
                      }
                    ]
                  ]
                },
                "Define feed items": {
                  "main": [
                    [
                      {
                        "node": "Serve feed",
                        "type": "main",
                        "index": 0
                      }
                    ]
                  ]
                },
                "Get overview page": {
                  "main": [
                    [
                      {
                        "node": "Extract links",
                        "type": "main",
                        "index": 0
                      }
                    ]
                  ]
                },
                "On clicking 'execute'": {
                  "main": [
                    [
                      {
                        "node": "Get overview page",
                        "type": "main",
                        "index": 0
                      }
                    ]
                  ]
                },
                "Remove duplicate links": {
                  "main": [
                    [
                      {
                        "node": "Get episode page",
                        "type": "main",
                        "index": 0
                      }
                    ]
                  ]
                }
              }
            }
          },
          "node_count": 11,
          "connection_count": 10,
          "extraction_time": 0.330847,
          "error": null
        },
        "layer3": {
          "success": true,
          "data": {
            "introduction": "This workflow builds a valid RSS feed (which is an XML feed under the hood) for ARD Audiothek podcasts. This allows you to subscribe to such podcasts using your favourite podcatcher without using the ARD Audiothek app.The example builds a feed for Kalk & Welk, but the workflow can be easily adjusted by providing another podcast URL on theGet overview pageHTTP Request node.To subscribe to the feed, active your n8n workflow and then use theProduction URLfrom the intitial Feed Webhook node in your podcatcher.I've tested the resulting feed usingPocket Casts......andMiniflux:When using Miniflux, you can add your feed viathis pageto your account. Make sure you selectPrivatewhen doing so to avoid sharing your n8n instance with the world.The resulting feed passes theW3C Feed Validation Service:The workflow can also be used as a foundation to free other podcasts from propriertary big media platforms, though not all of them will be as simple to deal with as the ARD Audiothek.",
            "overview": "",
            "tutorial_text": "This workflow builds a valid RSS feed (which is an XML feed under the hood) for ARD Audiothek podcasts. This allows you to subscribe to such podcasts using your favourite podcatcher without using the ARD Audiothek app.The example builds a feed for Kalk & Welk, but the workflow can be easily adjusted by providing another podcast URL on theGet overview pageHTTP Request node.To subscribe to the feed, active your n8n workflow and then use theProduction URLfrom the intitial Feed Webhook node in your podcatcher.I've tested the resulting feed usingPocket Casts......andMiniflux:When using Miniflux, you can add your feed viathis pageto your account. Make sure you selectPrivatewhen doing so to avoid sharing your n8n instance with the world.The resulting feed passes theW3C Feed Validation Service:The workflow can also be used as a foundation to free other podcasts from propriertary big media platforms, though not all of them will be as simple to deal with as the ARD Audiothek.",
            "tutorial_sections": [],
            "step_by_step": [],
            "best_practices": [],
            "common_pitfalls": [],
            "image_urls": [
              "https://n8n.io/nodes/http-request.svg",
              "https://gravatar.com/avatar/7a3710173e907baffaf7ed7ebffc37955c9cdeadb8612200225a34a2e056aa17?r=pg&d=retro&size=200",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/grafik_9957b88da3.png",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/grafik_638b6efcfa.png",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/grafik_94307e4b69.png",
              "https://n8n.io/nodes/airtable.svg",
              "https://n8n.io/nodes/customer-datastore-n8n-training.svg",
              "https://gravatar.com/avatar/8ed14c592510a0627ebe55fdad3a42a3917a77a9e081b93209ce05ecf3c2ba8f?r=pg&d=retro&size=200",
              "https://gravatar.com/avatar/74234187cf4a650d53f6a86e7b03d1bcb8cfef4cbd0552eabd8d966cd808cc54?r=pg&d=retro&size=200",
              "https://n8n.io/nodes/code.svg",
              "https://n8n.io/images/stars-footer.svg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/avatar_igordisco_9243b86232_cd9a5c94ce.jpg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/neutral_avatar_purple_fee36bffe3.PNG",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/avatar_anderoav_589989fc39_ceb1c71a0c.jpg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/avatar_maxim_poulsen_48f450887b_852d0439bc.jpeg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/Felix_Leber_f7a5b3c776_130aeca79d.jpeg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/avatar_Ironben_0a4b3e7d12_e35805265c.jpg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/Francois_lassl_d5cfb504c7_710c87121d.jpeg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/twitter_x_62a44e965e.svg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/github_e1f217d7a3_b9a271324f.svg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/discord_253947c90b_191e8f60fa.svg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/linkedin_d710e84d63_6ed0dc28aa.svg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/youtube_de4bdef50a_4b3a8b8aac.svg"
            ],
            "video_urls": [],
            "code_snippets": [],
            "conclusion": "",
            "troubleshooting": {
              "common_issues": [],
              "error_messages": []
            },
            "related_workflows": []
          },
          "errors": [],
          "extraction_time": 5.75457,
          "metadata": {
            "workflow_id": "1799",
            "url": "https://n8n.io/workflows/1799",
            "extracted_at": "2025-10-11T08:48:23.660436",
            "extractor_version": "1.0.0"
          }
        }
      },
      "multimodal": null,
      "transcripts": null,
      "validation": {
        "layer1": {
          "score": 80,
          "issues": [
            "Difficulty level not set",
            "No engagement metrics available"
          ],
          "valid": true,
          "layer": "layer1"
        },
        "layer2": {
          "score": 90,
          "issues": [
            "Missing or invalid workflow metadata"
          ],
          "valid": true,
          "layer": "layer2"
        },
        "layer3": {
          "score": 35,
          "issues": [
            "No tutorial sections extracted",
            "No images extracted",
            "Missing required fields: title, description, steps",
            "No step-by-step content extracted"
          ],
          "valid": false,
          "layer": "layer3"
        }
      },
      "quality": {
        "overall_score": 67.0,
        "classification": "Fair",
        "layer1_score": 80,
        "layer2_score": 90,
        "layer3_score": 35,
        "consistency_score": 100.0,
        "total_issues": 7
      },
      "extraction_time": 15.165209293365479,
      "errors": [],
      "timestamp": "2025-10-11T08:48:14.287710"
    },
    {
      "success": true,
      "workflow_id": "2165",
      "url": "https://n8n.io/workflows/2165",
      "layers": {
        "layer1": {
          "success": true,
          "workflow_id": "2165",
          "data": {
            "title": "Chat with PDF docs using AI (quoting sources)",
            "description": "This workflow allows you to ask questions about a PDF document. The answers are provided by an AI model of your choice, and the answer includes a citation...",
            "author": "Igor Fediczko@igordisco",
            "use_case": "This workflow allows you to ask questions about a PDF document.",
            "primary_category": "Strictly necessary",
            "secondary_categories": [
              "Performance",
              "Targeting",
              "Functionality",
              "Strictly necessary cookies allow core website functionality such as user login and account management. The website cannot be used properly without strictly necessary cookies.",
              "Performance cookies are used to see how visitors use the website, eg. analytics cookies. Those cookies cannot be used to directly identify a certain visitor.",
              "Targeting cookies are used to identify visitors between different websites, eg. content partners, banner networks. Those cookies may be used by companies to build a profile of visitor interests or show relevant ads on other websites.",
              "Functionality cookies are used to remember visitor information on the website, eg. language, timezone, enhanced content."
            ],
            "node_tags": [
              "github147,222",
              "hiring"
            ],
            "general_tags": [
              "Targeting",
              "Performance",
              "Strictly necessary",
              "Functionality"
            ],
            "difficulty_level": "intermediate",
            "views": 0,
            "upvotes": 0,
            "created_date": "2025-10-11T08:48:21.446883",
            "updated_date": "2025-10-11T08:48:21.446883",
            "setup_instructions": "This workflow allows you to ask questions about a PDF document. The answers are provided by an AI model of your choice, and the answer includes a citation...",
            "prerequisites": [
              "token_v2",
              "or website it relates to",
              "{\n\t\tcontent: attr(label);\n\t\tfont-weight: bold;\n\t\twidth: 120px;\n\t\tmin-width: 120px;\n\t}",
              "A Pinecone account (they have a free tier at the time of writing tha",
              "visiting the said website"
            ],
            "estimated_setup_time": "4 minutes 59 sec",
            "industry": [
              "Strictly necessary"
            ]
          },
          "extraction_time": 7.6688618659973145,
          "error": null
        },
        "layer2": {
          "success": true,
          "workflow_id": "2165",
          "data": {
            "id": 2165,
            "name": "Chat with PDF docs using AI (quoting sources)",
            "workflow": {
              "meta": {
                "instanceId": "408f9fb9940c3cb18ffdef0e0150fe342d6e655c3a9fac21f0f644e8bedabcd9",
                "templateCredsSetupCompleted": true
              },
              "nodes": [
                {
                  "id": "e2e61eae-6306-47db-908c-9d82758f6516",
                  "name": "When clicking \"Execute Workflow\"",
                  "type": "n8n-nodes-base.manualTrigger",
                  "position": [
                    -660,
                    40
                  ],
                  "parameters": {},
                  "typeVersion": 1
                },
                {
                  "id": "a45afcc0-d780-462a-9ed7-27daf01363a7",
                  "name": "Sticky Note",
                  "type": "n8n-nodes-base.stickyNote",
                  "position": [
                    -500,
                    -140
                  ],
                  "parameters": {
                    "color": 7,
                    "width": 1086.039382705461,
                    "height": 728.4168721167887,
                    "content": "## 1. Setup: Fetch file from Google Drive, split it into chunks and insert into a vector database\nNote that running this part multiple times will insert multiple copies into your DB"
                  },
                  "typeVersion": 1
                },
                {
                  "id": "a3c56569-0728-4246-8d87-fa106d373566",
                  "name": "Sticky Note2",
                  "type": "n8n-nodes-base.stickyNote",
                  "position": [
                    -960,
                    -60
                  ],
                  "parameters": {
                    "height": 350.7942096493649,
                    "content": "# Try me out\n1. In Pinecone, create an index with 1536 dimensions and select it in the two vector store nodes\n2. Populate Pinecone by clicking the 'test workflow' button below\n3. Click the 'chat' button below and enter the following:\n\n_Which email provider does the creator of Bitcoin use?_"
                  },
                  "typeVersion": 1
                },
                {
                  "id": "c1543b8a-dbea-42a9-a35e-e22ed86f565b",
                  "name": "Sticky Note1",
                  "type": "n8n-nodes-base.stickyNote",
                  "position": [
                    -500,
                    640
                  ],
                  "parameters": {
                    "color": 7,
                    "width": 1594,
                    "height": 529,
                    "content": "## 2. Chat with file, getting citations in reponse"
                  },
                  "typeVersion": 1
                },
                {
                  "id": "5300d5dd-4186-4402-9442-88adab4e9a89",
                  "name": "Sticky Note4",
                  "type": "n8n-nodes-base.stickyNote",
                  "position": [
                    -480,
                    -40
                  ],
                  "parameters": {
                    "color": 7,
                    "width": 179.58883583572606,
                    "height": 257.75985739596473,
                    "content": "Will fetch the Bitcoin whitepaper, but you can change this"
                  },
                  "typeVersion": 1
                },
                {
                  "id": "9f707f2b-6cb2-47b8-88fc-65cfd09b6cae",
                  "name": "Pinecone Vector Store",
                  "type": "@n8n/n8n-nodes-langchain.vectorStorePinecone",
                  "position": [
                    80,
                    40
                  ],
                  "parameters": {
                    "mode": "insert",
                    "options": {},
                    "pineconeIndex": {
                      "__rl": true,
                      "mode": "id",
                      "value": "test-index"
                    }
                  },
                  "credentials": {
                    "pineconeApi": {
                      "id": "OHDlDbBkaPDgpnOY",
                      "name": "PineconeApi account"
                    }
                  },
                  "typeVersion": 1
                },
                {
                  "id": "a32ac59e-efdc-4ff3-92dd-be794c2be7f7",
                  "name": "When chat message received",
                  "type": "@n8n/n8n-nodes-langchain.chatTrigger",
                  "position": [
                    -660,
                    760
                  ],
                  "webhookId": "cd2703a7-f912-46fe-8787-3fb83ea116ab",
                  "parameters": {
                    "options": {}
                  },
                  "typeVersion": 1.1
                },
                {
                  "id": "e14145d2-0c18-4813-9555-263314cb0376",
                  "name": "OpenAI Chat Model1",
                  "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
                  "position": [
                    340,
                    980
                  ],
                  "parameters": {
                    "model": {
                      "__rl": true,
                      "mode": "list",
                      "value": "gpt-4o-mini"
                    },
                    "options": {}
                  },
                  "credentials": {
                    "openAiApi": {
                      "id": "8gccIjcuf3gvaoEr",
                      "name": "OpenAi account"
                    }
                  },
                  "typeVersion": 1.2
                },
                {
                  "id": "e6863abd-d3df-4b45-9083-96b82cd46773",
                  "name": "Set file URL in Google Drive",
                  "type": "n8n-nodes-base.set",
                  "position": [
                    -440,
                    40
                  ],
                  "parameters": {
                    "options": {},
                    "assignments": {
                      "assignments": [
                        {
                          "id": "dc7a70e3-9b04-404b-8892-ba0fcc4274c2",
                          "name": "file_url",
                          "type": "string",
                          "value": " https://drive.google.com/file/d/11Koq9q53nkk0F5Y8eZgaWJUVR03I4-MM/view"
                        }
                      ]
                    }
                  },
                  "typeVersion": 3.4
                },
                {
                  "id": "80d241f1-7c8a-489e-9255-84bc79ec11c7",
                  "name": "Download file",
                  "type": "n8n-nodes-base.googleDrive",
                  "position": [
                    -220,
                    40
                  ],
                  "parameters": {
                    "fileId": {
                      "__rl": true,
                      "mode": "url",
                      "value": "={{ $json.file_url }}"
                    },
                    "options": {},
                    "operation": "download"
                  },
                  "credentials": {
                    "googleDriveOAuth2Api": {
                      "id": "yOwz41gMQclOadgu",
                      "name": "Google Drive account"
                    }
                  },
                  "typeVersion": 3
                },
                {
                  "id": "8483b283-1ff4-4540-891a-09886c146e16",
                  "name": "Default Data Loader",
                  "type": "@n8n/n8n-nodes-langchain.documentDefaultDataLoader",
                  "position": [
                    180,
                    240
                  ],
                  "parameters": {
                    "options": {
                      "metadata": {
                        "metadataValues": [
                          {
                            "name": "file_url",
                            "value": "={{ $('Set file URL in Google Drive').first().json.file_url }}"
                          },
                          {
                            "name": "file_name",
                            "value": "={{ $('Download file').first().binary.data.fileName }}"
                          }
                        ]
                      }
                    },
                    "dataType": "binary"
                  },
                  "typeVersion": 1
                },
                {
                  "id": "c262df34-b2d9-4f48-b975-d694469e6e5a",
                  "name": "Embeddings OpenAI2",
                  "type": "@n8n/n8n-nodes-langchain.embeddingsOpenAi",
                  "position": [
                    -220,
                    980
                  ],
                  "parameters": {
                    "options": {}
                  },
                  "credentials": {
                    "openAiApi": {
                      "id": "8gccIjcuf3gvaoEr",
                      "name": "OpenAi account"
                    }
                  },
                  "typeVersion": 1.2
                },
                {
                  "id": "45c8e8cb-a29e-48ad-985f-e0136065840f",
                  "name": "Embeddings OpenAI",
                  "type": "@n8n/n8n-nodes-langchain.embeddingsOpenAi",
                  "position": [
                    40,
                    240
                  ],
                  "parameters": {
                    "options": {}
                  },
                  "credentials": {
                    "openAiApi": {
                      "id": "8gccIjcuf3gvaoEr",
                      "name": "OpenAi account"
                    }
                  },
                  "typeVersion": 1.2
                },
                {
                  "id": "8c852568-f100-4849-a06f-86e71733512a",
                  "name": "Recursive Character Text Splitter",
                  "type": "@n8n/n8n-nodes-langchain.textSplitterRecursiveCharacterTextSplitter",
                  "position": [
                    260,
                    400
                  ],
                  "parameters": {
                    "options": {},
                    "chunkSize": 3000,
                    "chunkOverlap": 200
                  },
                  "typeVersion": 1
                },
                {
                  "id": "319e5b2d-c648-4ef5-8238-7732c62d34f5",
                  "name": "Set max chunks to send to model",
                  "type": "n8n-nodes-base.set",
                  "position": [
                    -420,
                    760
                  ],
                  "parameters": {
                    "options": {},
                    "assignments": {
                      "assignments": [
                        {
                          "id": "33f4addf-72f3-4618-a6ba-5b762257d723",
                          "name": "chunks",
                          "type": "number",
                          "value": 4
                        }
                      ]
                    },
                    "includeOtherFields": true
                  },
                  "typeVersion": 3.4
                },
                {
                  "id": "91b9132e-ef51-4044-be1b-f391aeeb467c",
                  "name": "Get top chunks matching query",
                  "type": "@n8n/n8n-nodes-langchain.vectorStorePinecone",
                  "position": [
                    -220,
                    760
                  ],
                  "parameters": {
                    "mode": "load",
                    "topK": "={{ $json.chunks }}",
                    "prompt": "={{ $json.chatInput }}",
                    "options": {},
                    "pineconeIndex": {
                      "__rl": true,
                      "mode": "id",
                      "value": "test-index"
                    }
                  },
                  "credentials": {
                    "pineconeApi": {
                      "id": "OHDlDbBkaPDgpnOY",
                      "name": "PineconeApi account"
                    }
                  },
                  "typeVersion": 1
                },
                {
                  "id": "5ad6e0fd-c296-4507-8232-164b5be57f4a",
                  "name": "Prepare chunks",
                  "type": "n8n-nodes-base.code",
                  "position": [
                    140,
                    760
                  ],
                  "parameters": {
                    "jsCode": "let out = \"\"\nfor (const i in $input.all()) {\n  let itemText = \"--- CHUNK \" + i + \" ---\\n\"\n  itemText += $input.all()[i].json.document.pageContent + \"\\n\"\n  itemText += \"\\n\"\n  out += itemText\n}\n\nreturn {\n  'context': out\n};"
                  },
                  "typeVersion": 2
                },
                {
                  "id": "770b066a-abb2-443e-bcaa-14632c6696f4",
                  "name": "Answer the query based on chunks",
                  "type": "@n8n/n8n-nodes-langchain.informationExtractor",
                  "position": [
                    340,
                    760
                  ],
                  "parameters": {
                    "text": "={{ $json.context }}\n\nQuestion: {{ $('When chat message received').first().json.chatInput }}\nHelpful Answer:",
                    "options": {
                      "systemPromptTemplate": "=Use the following pieces of context to answer the question at the end. If you don't know the answer, just say that you don't know, don't try to make up an answer. Important: In your response, also include the the indexes of the chunks you used to generate the answer."
                    },
                    "schemaType": "manual",
                    "inputSchema": "{\n  \"type\": \"object\",\n  \"required\": [\"answer\", \"citations\"],\n  \"properties\": {\n    \"answer\": {\n      \"type\": \"string\"\n    },\n    \"citations\": {\n      \"type\": \"array\",\n      \"items\": {\n        \"type\": \"number\"\n      }\n    }\n  }\n}"
                  },
                  "typeVersion": 1
                },
                {
                  "id": "e43abc0c-cedf-4e73-a766-7fad57601cfe",
                  "name": "Compose citations",
                  "type": "n8n-nodes-base.set",
                  "position": [
                    700,
                    760
                  ],
                  "parameters": {
                    "options": {},
                    "assignments": {
                      "assignments": [
                        {
                          "id": "ace6185e-8b3d-4f89-ae36-dfe0c391a0a9",
                          "name": "citations",
                          "type": "array",
                          "value": "={{ $json.citations.map(i => '[' + $('Get top chunks matching query').all()[$json.citations].json.document.metadata.file_name + ', lines ' + $('Get top chunks matching query').all()[$json.citations].json.document.metadata['loc.lines.from'] + '-' + $('Get top chunks matching query').all()[$json.citations].json.document.metadata['loc.lines.to'] + ']') }}"
                        }
                      ]
                    }
                  },
                  "typeVersion": 3.4
                },
                {
                  "id": "f82df340-42fc-4e92-9e9d-d808f19e0407",
                  "name": "Generate response",
                  "type": "n8n-nodes-base.set",
                  "position": [
                    900,
                    760
                  ],
                  "parameters": {
                    "options": {},
                    "assignments": {
                      "assignments": [
                        {
                          "id": "11396286-0378-4c3a-86e1-c9ef51afbfc7",
                          "name": "text",
                          "type": "string",
                          "value": "={{ $json.answer }} {{ $if(!$json.citations.isEmpty(), \"\\n\" + $json.citations.join(\"\"), '') }}"
                        }
                      ]
                    }
                  },
                  "typeVersion": 3.4
                }
              ],
              "pinData": {},
              "connections": {
                "Download file": {
                  "main": [
                    [
                      {
                        "node": "Pinecone Vector Store",
                        "type": "main",
                        "index": 0
                      }
                    ]
                  ]
                },
                "Prepare chunks": {
                  "main": [
                    [
                      {
                        "node": "Answer the query based on chunks",
                        "type": "main",
                        "index": 0
                      }
                    ]
                  ]
                },
                "Compose citations": {
                  "main": [
                    [
                      {
                        "node": "Generate response",
                        "type": "main",
                        "index": 0
                      }
                    ]
                  ]
                },
                "Embeddings OpenAI": {
                  "ai_embedding": [
                    [
                      {
                        "node": "Pinecone Vector Store",
                        "type": "ai_embedding",
                        "index": 0
                      }
                    ]
                  ]
                },
                "Embeddings OpenAI2": {
                  "ai_embedding": [
                    [
                      {
                        "node": "Get top chunks matching query",
                        "type": "ai_embedding",
                        "index": 0
                      }
                    ]
                  ]
                },
                "OpenAI Chat Model1": {
                  "ai_languageModel": [
                    [
                      {
                        "node": "Answer the query based on chunks",
                        "type": "ai_languageModel",
                        "index": 0
                      }
                    ]
                  ]
                },
                "Default Data Loader": {
                  "ai_document": [
                    [
                      {
                        "node": "Pinecone Vector Store",
                        "type": "ai_document",
                        "index": 0
                      }
                    ]
                  ]
                },
                "When chat message received": {
                  "main": [
                    [
                      {
                        "node": "Set max chunks to send to model",
                        "type": "main",
                        "index": 0
                      }
                    ]
                  ]
                },
                "Set file URL in Google Drive": {
                  "main": [
                    [
                      {
                        "node": "Download file",
                        "type": "main",
                        "index": 0
                      }
                    ]
                  ]
                },
                "Get top chunks matching query": {
                  "main": [
                    [
                      {
                        "node": "Prepare chunks",
                        "type": "main",
                        "index": 0
                      }
                    ]
                  ]
                },
                "Set max chunks to send to model": {
                  "main": [
                    [
                      {
                        "node": "Get top chunks matching query",
                        "type": "main",
                        "index": 0
                      }
                    ]
                  ]
                },
                "Answer the query based on chunks": {
                  "main": [
                    [
                      {
                        "node": "Compose citations",
                        "type": "main",
                        "index": 0
                      }
                    ]
                  ]
                },
                "When clicking \"Execute Workflow\"": {
                  "main": [
                    [
                      {
                        "node": "Set file URL in Google Drive",
                        "type": "main",
                        "index": 0
                      }
                    ]
                  ]
                },
                "Recursive Character Text Splitter": {
                  "ai_textSplitter": [
                    [
                      {
                        "node": "Default Data Loader",
                        "type": "ai_textSplitter",
                        "index": 0
                      }
                    ]
                  ]
                }
              }
            }
          },
          "node_count": 20,
          "connection_count": 14,
          "extraction_time": 0.654811,
          "error": null
        },
        "layer3": {
          "success": true,
          "data": {
            "introduction": "This workflow allows you to ask questions about a PDF document. The answers are provided by an AI model of your choice, and the answer includes a citation pointing to the information it used.You can use n8n\u2019s built-in chat interface to ask the questions, or you could customise this workflow to use another one (e.g. Slack, Teams, etc.)ExampleThe workflow is set up with the Bitcoin whitepaper. So you could ask things like:Question: \u201cWhich email provider does the creator of Bitcoin use?\u201cAnswer: \u201cGMX [Bitcoin whitepaper.pdf, lines 1-35]\u201dRequirementsA Pinecone account (they have a free tier at the time of writing that is easily enough for this workflow)Access to a large language model (e.g. an OpenAI account)Customizing this workflowThe workflow only reads in one document, but you could customise it to read in all the documents in a folder (or more).The workflow is set up to use GPT 3.5, but you could swap that out for any other model (including self-hosted ones).",
            "overview": "",
            "tutorial_text": "This workflow allows you to ask questions about a PDF document. The answers are provided by an AI model of your choice, and the answer includes a citation pointing to the information it used.You can use n8n\u2019s built-in chat interface to ask the questions, or you could customise this workflow to use another one (e.g. Slack, Teams, etc.)ExampleThe workflow is set up with the Bitcoin whitepaper. So you could ask things like:Question: \u201cWhich email provider does the creator of Bitcoin use?\u201cAnswer: \u201cGMX [Bitcoin whitepaper.pdf, lines 1-35]\u201dRequirementsA Pinecone account (they have a free tier at the time of writing that is easily enough for this workflow)Access to a large language model (e.g. an OpenAI account)Customizing this workflowThe workflow only reads in one document, but you could customise it to read in all the documents in a folder (or more).The workflow is set up to use GPT 3.5, but you could swap that out for any other model (including self-hosted ones).",
            "tutorial_sections": [],
            "step_by_step": [],
            "best_practices": [],
            "common_pitfalls": [],
            "image_urls": [
              "https://n8n.io/nodes/google-drive.svg",
              "https://gravatar.com/avatar/4cda9c7c1c24fdb61896cac588296d1dad03655a439ab71ef34f4c62c0ba8524?r=pg&d=retro&size=200",
              "https://n8n.io/nodes/http-request.svg",
              "https://n8n.io/nodes/webhook.svg",
              "https://n8n.io/nodes/respond-to-webhook.svg",
              "https://gravatar.com/avatar/7ee0febc0cbec2f1f6b24ddec3c4322e27c82c91dc729cfecf6ce12bfddd058d?r=pg&d=retro&size=200",
              "https://n8n.io/nodes/notion.svg",
              "https://n8n.io/nodes/google-drive-trigger.svg",
              "https://gravatar.com/avatar/a3f78329cbd3f3239726910fb8b0f8e5e7bb340868f57b959989e7f8d8ea1608?r=pg&d=retro&size=200",
              "https://gravatar.com/avatar/a73ca84b07b557e95322815bc04859245e9243c7cfd5bf9a14568fd0ce3e72c5?r=pg&d=retro&size=200",
              "https://n8n.io/nodes/binary-input-loader.svg",
              "https://n8n.io/nodes/openai-chat-model.svg",
              "https://n8n.io/images/stars-footer.svg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/avatar_igordisco_9243b86232_cd9a5c94ce.jpg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/neutral_avatar_purple_fee36bffe3.PNG",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/avatar_anderoav_589989fc39_ceb1c71a0c.jpg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/avatar_maxim_poulsen_48f450887b_852d0439bc.jpeg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/Felix_Leber_f7a5b3c776_130aeca79d.jpeg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/avatar_Ironben_0a4b3e7d12_e35805265c.jpg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/Francois_lassl_d5cfb504c7_710c87121d.jpeg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/twitter_x_62a44e965e.svg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/github_e1f217d7a3_b9a271324f.svg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/discord_253947c90b_191e8f60fa.svg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/linkedin_d710e84d63_6ed0dc28aa.svg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/youtube_de4bdef50a_4b3a8b8aac.svg"
            ],
            "video_urls": [],
            "code_snippets": [],
            "conclusion": "",
            "troubleshooting": {
              "common_issues": [],
              "error_messages": []
            },
            "related_workflows": []
          },
          "errors": [],
          "extraction_time": 5.841792,
          "metadata": {
            "workflow_id": "2165",
            "url": "https://n8n.io/workflows/2165",
            "extracted_at": "2025-10-11T08:48:23.231376",
            "extractor_version": "1.0.0"
          }
        }
      },
      "multimodal": null,
      "transcripts": null,
      "validation": {
        "layer1": {
          "score": 80,
          "issues": [
            "Difficulty level not set",
            "No engagement metrics available"
          ],
          "valid": true,
          "layer": "layer1"
        },
        "layer2": {
          "score": 100,
          "issues": [],
          "valid": true,
          "layer": "layer2"
        },
        "layer3": {
          "score": 35,
          "issues": [
            "No tutorial sections extracted",
            "No images extracted",
            "Missing required fields: title, description, steps",
            "No step-by-step content extracted"
          ],
          "valid": false,
          "layer": "layer3"
        }
      },
      "quality": {
        "overall_score": 70.0,
        "classification": "Fair",
        "layer1_score": 80,
        "layer2_score": 100,
        "layer3_score": 35,
        "consistency_score": 100.0,
        "total_issues": 6
      },
      "extraction_time": 14.806370973587036,
      "errors": [],
      "timestamp": "2025-10-11T08:48:14.311211"
    },
    {
      "success": true,
      "workflow_id": "2318",
      "url": "https://n8n.io/workflows/2318",
      "layers": {
        "layer1": {
          "success": true,
          "workflow_id": "2318",
          "data": {
            "title": "Enrich Pipedrive's Organization Data with OpenAI GPT-4o & Notify it in Slack",
            "description": "This workflow enriches new Pipedrive organization's data by adding a note to the organization object in Pipedrive. It assumes there is a custom \"website\"...",
            "author": "Igor Fediczko@igordisco",
            "use_case": "This workflow enriches new Pipedrive organization's data by adding a note to the organization object in Pipedrive.",
            "primary_category": "Strictly necessary",
            "secondary_categories": [
              "Performance",
              "Targeting",
              "Functionality",
              "Strictly necessary cookies allow core website functionality such as user login and account management. The website cannot be used properly without strictly necessary cookies.",
              "Performance cookies are used to see how visitors use the website, eg. analytics cookies. Those cookies cannot be used to directly identify a certain visitor.",
              "Targeting cookies are used to identify visitors between different websites, eg. content partners, banner networks. Those cookies may be used by companies to build a profile of visitor interests or show relevant ads on other websites.",
              "Functionality cookies are used to remember visitor information on the website, eg. language, timezone, enhanced content."
            ],
            "node_tags": [
              "github147,222",
              "hiring"
            ],
            "general_tags": [
              "Targeting",
              "Performance",
              "Strictly necessary",
              "Functionality"
            ],
            "difficulty_level": "intermediate",
            "views": 0,
            "upvotes": 0,
            "created_date": "2025-10-11T08:48:32.925537",
            "updated_date": "2025-10-11T08:48:32.925537",
            "setup_instructions": "This workflow enriches new Pipedrive organization's data by adding a note to the organization object in Pipedrive. It assumes there is a custom \"website\"...",
            "prerequisites": [
              "token_v2",
              "or website it relates to",
              "{\n\t\tcontent: attr(label);\n\t\tfont-weight: bold;\n\t\twidth: 120px;\n\t\tmin-width: 120px;\n\t}",
              "This workflow uses a scraping API. Before using it, ensure you comply with the regu",
              "lations regarding web scraping in your country or state."
            ],
            "estimated_setup_time": "4 minutes 59 sec",
            "industry": [
              "Strictly necessary"
            ]
          },
          "extraction_time": 7.909832239151001,
          "error": null
        },
        "layer2": {
          "success": true,
          "workflow_id": "2318",
          "data": {
            "id": 2318,
            "name": "Enrich Pipedrive's Organization Data with OpenAI GPT-4o & Notify it in Slack",
            "workflow": {
              "id": "",
              "meta": {
                "instanceId": "",
                "templateCredsSetupCompleted": true
              },
              "name": "piepdrive-test",
              "tags": [],
              "nodes": [
                {
                  "id": "b2838678-c796-4c99-a3da-a2cd1b42ea97",
                  "name": "Pipedrive Trigger - An Organization is created",
                  "type": "n8n-nodes-base.pipedriveTrigger",
                  "position": [
                    820,
                    380
                  ],
                  "webhookId": "f5de09a8-6601-4ad5-8bc8-9b3f4b83e997",
                  "parameters": {
                    "action": "added",
                    "object": "organization"
                  },
                  "credentials": {
                    "pipedriveApi": {
                      "id": "",
                      "name": "Pipedrive Connection"
                    }
                  },
                  "typeVersion": 1
                },
                {
                  "id": "5aa05d79-b2fa-4040-b4ca-cad83adf2798",
                  "name": "Sticky Note",
                  "type": "n8n-nodes-base.stickyNote",
                  "position": [
                    -20,
                    120
                  ],
                  "parameters": {
                    "width": 656.3637637842876,
                    "height": 1455.9537026322007,
                    "content": "# Enrich Pipedrive's Organization Data with GPT-4o When an Organization is Created in Pipedrive\n\nThis workflow **enriches a Pipedrive organization's data by adding a note to the organization object in Pipedrive**. It assumes there is a custom \"website\" field in your Pipedrive setup, as data will be scraped from this website to generate a note using OpenAI.\n\n## \u26a0\ufe0f Disclaimer\n**These workflows use a scraping API. Before using it, ensure you comply with the regulations regarding web scraping in your country or state**.\n\n## Important Notes\n- The OpenAI model used is GPT-4o, chosen for its large input token context capacity. However, it is also **the most expensive option**, you should take cost into consideration.\n\n- The system prompt in the OpenAI Node generates output with relevant information, but feel free to improve or **modify it according to your needs**.\n\n## **How It Works**\n\n### Node 1: `Pipedrive Trigger - An Organization is Created`\nThis is the trigger of the workflow. When **an organization object is created in Pipedrive**, this node is triggered and retrieves the data. Make sure you have a \"website\" custom field (the name of the field in the n8n node will appear as a random ID and not with the Pipedrive custom field name).\n\n### Node 2: `ScrapingBee - Get Organization's Website's Homepage Content`\nThis node **scrapes the content** from the URL of the website associated with the **Pipedrive Organization** created in Node 1. The workflow uses the [ScrapingBee](https://www.scrapingbee.com/) API, but you can use any preferred API or simply the HTTP request node in n8n.\n\n### Node 3: `OpenAI - Message GPT-4o with Scraped Data`\nThis node sends HTML-scraped data from the previous node to the **OpenAI GPT-4 model**. The system prompt instructs the model to **extract company data**, such as products or services offered and competitors (if known by the model), and format it as HTML for optimal use in a Pipedrive Note.\n\n### Node 4: `Pipedrive - Create a Note with OpenAI Output`\nThis node **adds a Note to the Organization created in Pipedrive** using the OpenAI node output. The Note will include the company description, target market, selling products, and competitors (if GPT-4 was able to determine them).\n\n### Node 5 & 6: `HTML To Markdown` & `Code - Markdown to Slack Markdown`\nThese two nodes **format the HTML output to Slack Markdown**.\n\nThe Note created in Pipedrive is in HTML format, **as specified by the System Prompt of the OpenAI Node**. To send it to Slack, it needs to be converted to Markdown and then to Slack-specific Markdown.\n\n### Node 7: `Slack - Notify`\nThis node **sends a message in Slack containing the Pipedrive Organization Note** created with this workflow.\n"
                  },
                  "typeVersion": 1
                },
                {
                  "id": "47ee8bfb-2f9d-4790-a929-1533215d6746",
                  "name": "Pipedrive - Create a Note with OpenAI output",
                  "type": "n8n-nodes-base.pipedrive",
                  "position": [
                    1640,
                    380
                  ],
                  "parameters": {
                    "content": "={{ $json.message.content }}",
                    "resource": "note",
                    "additionalFields": {
                      "org_id": "={{ $('Pipedrive Trigger - An Organization is created').item.json.meta.id }}"
                    }
                  },
                  "credentials": {
                    "pipedriveApi": {
                      "id": "",
                      "name": "Pipedrive Connection"
                    }
                  },
                  "typeVersion": 1
                },
                {
                  "id": "7783b531-0469-4bee-868e-4b26a1bb41ba",
                  "name": "Code - Markdown to Slack Markdown",
                  "type": "n8n-nodes-base.code",
                  "position": [
                    2080,
                    380
                  ],
                  "parameters": {
                    "jsCode": "const inputMarkdown = items[0].json.data;\n\nfunction convertMarkdownToSlackFormat(markdown) {\n    let slackFormatted = markdown;\n    \n    // Convert headers\n    slackFormatted = slackFormatted.replace(/^# (.*$)/gim, '*$1*');\n    slackFormatted = slackFormatted.replace(/^## (.*$)/gim, '*$1*');\n    \n    // Convert unordered lists\n    slackFormatted = slackFormatted.replace(/^\\* (.*$)/gim, '\u27a1\ufe0f $1');\n    \n    // Convert tables\n    const tableRegex = /\\n\\|.*\\|\\n\\|.*\\|\\n((\\|.*\\|\\n)+)/;\n    const tableMatch = slackFormatted.match(tableRegex);\n    if (tableMatch) {\n        const table = tableMatch[0];\n        const rows = table.split('\\n').slice(3, -1);\n        const formattedRows = rows.map(row => {\n            const columns = row.split('|').slice(1, -1).map(col => col.trim());\n            return `*${columns[0]}*: ${columns[1]}`;\n        }).join('\\n');\n        slackFormatted = slackFormatted.replace(table, formattedRows);\n    }\n    \n    return slackFormatted;\n}\n\nconst slackMarkdown = convertMarkdownToSlackFormat(inputMarkdown);\nconsole.log(slackMarkdown);\n\n// Return data\nreturn [{ slackFormattedMarkdown: slackMarkdown }];\n"
                  },
                  "typeVersion": 2
                },
                {
                  "id": "cf2b02df-07e8-4ebb-ba3d-bfd294dcfab0",
                  "name": "Scrapingbee - Get Organization's URL content",
                  "type": "n8n-nodes-base.httpRequest",
                  "position": [
                    1040,
                    380
                  ],
                  "parameters": {
                    "url": "https://app.scrapingbee.com/api/v1",
                    "options": {},
                    "sendQuery": true,
                    "queryParameters": {
                      "parameters": [
                        {
                          "name": "api_key",
                          "value": "<YOUR_SCRAPINGBEE_API_KEY>"
                        },
                        {
                          "name": "url",
                          "value": "={{ $json.current.<random_api_id_custom_website_field> }}"
                        },
                        {
                          "name": "render_js",
                          "value": "false"
                        }
                      ]
                    }
                  },
                  "typeVersion": 4.2
                },
                {
                  "id": "906d44f0-7582-4742-9fd8-4c8dfba918e0",
                  "name": "HTML To Markdown",
                  "type": "n8n-nodes-base.markdown",
                  "position": [
                    1860,
                    380
                  ],
                  "parameters": {
                    "html": "={{ $json.content }}",
                    "options": {}
                  },
                  "typeVersion": 1
                },
                {
                  "id": "8c1a5d64-4f38-4f9e-8878-443f750206b7",
                  "name": "Slack - Notify ",
                  "type": "n8n-nodes-base.slack",
                  "position": [
                    2300,
                    380
                  ],
                  "parameters": {
                    "text": "=*New Organizaton {{ $('Pipedrive Trigger - An Organization is created').item.json.current.name }} created on Pipedrive* :\n\n\n {{ $json.slackFormattedMarkdown }}",
                    "select": "channel",
                    "channelId": {
                      "__rl": true,
                      "mode": "list",
                      "value": "",
                      "cachedResultName": "pipedrive-notification"
                    },
                    "otherOptions": {},
                    "authentication": "oAuth2"
                  },
                  "credentials": {
                    "slackOAuth2Api": {
                      "id": "",
                      "name": "Slack Connection"
                    }
                  },
                  "typeVersion": 2.2
                },
                {
                  "id": "2414a5d3-1d4b-447b-b401-4b6f823a0cf9",
                  "name": "OpenAI - Message GPT-4o with Scraped Data",
                  "type": "@n8n/n8n-nodes-langchain.openAi",
                  "position": [
                    1260,
                    380
                  ],
                  "parameters": {
                    "modelId": {
                      "__rl": true,
                      "mode": "list",
                      "value": "gpt-4o",
                      "cachedResultName": "GPT-4O"
                    },
                    "options": {},
                    "messages": {
                      "values": [
                        {
                          "content": "={{ $json.data }}"
                        },
                        {
                          "role": "system",
                          "content": "You're an assistant that summarizes website content for CRM entries. The user will provide HTML content from a company's website. Your task is to analyze the HTML content and create a concise summary that includes:\n\n1. A brief description of the company's services or products.\n2. Any information about the company's target market or customer base.\n3. Key points about the company's unique selling propositions or competitive advantages.\n4. Based on the provided information, suggest potential competitors if you know any.\n\nFormat your response as HTML.\n\nExample response :\n\n    <h1>Company Description</h1>\n    <p>Company1 specializes in services related to electric vehicles. The company focuses on providing resources and information about electric car chargers, battery life, different car brands, and the environmental impact of electric vehicles.</p>\n\n    <h2>Target Market</h2>\n    <p>The target market for Company1 includes electric vehicle owners and potential buyers who are interested in making the shift from traditional fossil fuel vehicles to electric cars. The company also targets environmentally conscious consumers who are looking for sustainable mobility solutions.</p>\n\n    <h2>Unique Selling Propositions</h2>\n    <ul>\n        <li>Comprehensive information about electric vehicle charging solutions, including how to install home charging stations.</li>\n        <li>Detailed articles on the advantages of electric vehicles such as ecology and reliability.</li>\n        <li>Educational resources on the autonomy and battery life of different electric car models.</li>\n        <li>Insights into premier electric vehicle brands.</li>\n    </ul>\n\n    <h2>Potential Competitors</h2>\n    <table border=\"1\">\n        <tr>\n            <th>Competitor Name</th>\n            <th>Website</th>\n        </tr>\n        <tr>\n            <td>Competitor1</td>\n            <td><a href=\"https://www.example1.com\">https://www.example1.com</a></td>\n        </tr>\n        <tr>\n            <td>Competitor2</td>\n            <td><a href=\"https://www.example2.com\">https://www.example2.com</a></td>\n        </tr>\n        <tr>\n            <td>Competitor3</td>\n            <td><a href=\"https://www.example3.com\">https://www.example3.com</a></td>\n        </tr>\n        <tr>\n            <td>Competitor4</td>\n            <td><a href=\"https://www.example4.com\">https://www.example4.com</a></td>\n        </tr>\n    </table>\n"
                        }
                      ]
                    }
                  },
                  "credentials": {
                    "openAiApi": {
                      "id": "",
                      "name": "OpenAi Connection"
                    }
                  },
                  "typeVersion": 1.3
                }
              ],
              "active": false,
              "pinData": {},
              "settings": {
                "executionOrder": "v1"
              },
              "versionId": "",
              "connections": {
                "HTML To Markdown": {
                  "main": [
                    [
                      {
                        "node": "Code - Markdown to Slack Markdown",
                        "type": "main",
                        "index": 0
                      }
                    ]
                  ]
                },
                "Code - Markdown to Slack Markdown": {
                  "main": [
                    [
                      {
                        "node": "Slack - Notify ",
                        "type": "main",
                        "index": 0
                      }
                    ]
                  ]
                },
                "OpenAI - Message GPT-4o with Scraped Data": {
                  "main": [
                    [
                      {
                        "node": "Pipedrive - Create a Note with OpenAI output",
                        "type": "main",
                        "index": 0
                      }
                    ]
                  ]
                },
                "Pipedrive - Create a Note with OpenAI output": {
                  "main": [
                    [
                      {
                        "node": "HTML To Markdown",
                        "type": "main",
                        "index": 0
                      }
                    ]
                  ]
                },
                "Scrapingbee - Get Organization's URL content": {
                  "main": [
                    [
                      {
                        "node": "OpenAI - Message GPT-4o with Scraped Data",
                        "type": "main",
                        "index": 0
                      }
                    ]
                  ]
                },
                "Pipedrive Trigger - An Organization is created": {
                  "main": [
                    [
                      {
                        "node": "Scrapingbee - Get Organization's URL content",
                        "type": "main",
                        "index": 0
                      }
                    ]
                  ]
                }
              }
            }
          },
          "node_count": 8,
          "connection_count": 6,
          "extraction_time": 0.607871,
          "error": null
        },
        "layer3": {
          "success": true,
          "data": {
            "introduction": "This workflowenriches new Pipedrive organization's data by adding a note to the organization object in Pipedrive. It assumes there is a custom \"website\" field in your Pipedrive setup, as data will be scraped from this website to generate a note using OpenAI. Then, a notification is sent in Slack.\u26a0\ufe0f DisclaimerThis workflow uses a scraping API. Before using it, ensure you comply with the regulations regarding web scraping in your country or state.Important NotesTheOpenAI model used is GPT-4o, chosen for its large input token capacity. However, it is not the cheapest model if cost is very important to you.The system prompt in the OpenAI Node generates output with relevant information, but feel free to improve ormodify it according to your needs.How It WorksNode 1:Pipedrive Trigger - An Organization is CreatedThis is the trigger of the workflow. Whenan organization object is created in Pipedrive, this node is triggered and retrieves the data.Make sure you have a \"website\" custom field in Pipedrive(the name of the field in the n8n node will appear as a random ID and not with the Pipedrive custom field name).Node 2:ScrapingBee - Get Organization's Website's Homepage ContentThis nodescrapes the contentfrom the URL of the website associated with thePipedrive Organizationcreated in Node 1. The workflow uses theScrapingBeeAPI, butyou can use any preferred API or simply the HTTP request node in n8n.Node 3:OpenAI - Message GPT-4o with Scraped DataThis node sends HTML-scraped data from the previous node to theOpenAI GPT-4o model. The system prompt instructs the model toextract company data, such as products or services offered and competitors (if known by the model), and format it as HTML for optimal use in a Pipedrive Note.Node 4:Pipedrive - Create a Note with OpenAI OutputThis nodeadds a Note to the Organization created in Pipedriveusing the OpenAI node output. The Note will include the company description, target market, selling products, and competitors (if GPT-4o was able to determine them).Node 5 & 6:HTML To Markdown&Code - Markdown to Slack MarkdownThese two nodesformat the HTML output to Slack Markdown.The Note created in Pipedrive is in HTML format,as specified by the System Prompt of the OpenAI Node. To send it to Slack, it needs to be converted to Markdown and then to Slack Markdown.Node 7:Slack - NotifyThis nodesends a message in Slack containing the Pipedrive Organization Notecreated with this workflow.",
            "overview": "",
            "tutorial_text": "This workflowenriches new Pipedrive organization's data by adding a note to the organization object in Pipedrive. It assumes there is a custom \"website\" field in your Pipedrive setup, as data will be scraped from this website to generate a note using OpenAI. Then, a notification is sent in Slack.\u26a0\ufe0f DisclaimerThis workflow uses a scraping API. Before using it, ensure you comply with the regulations regarding web scraping in your country or state.Important NotesTheOpenAI model used is GPT-4o, chosen for its large input token capacity. However, it is not the cheapest model if cost is very important to you.The system prompt in the OpenAI Node generates output with relevant information, but feel free to improve ormodify it according to your needs.How It WorksNode 1:Pipedrive Trigger - An Organization is CreatedThis is the trigger of the workflow. Whenan organization object is created in Pipedrive, this node is triggered and retrieves the data.Make sure you have a \"website\" custom field in Pipedrive(the name of the field in the n8n node will appear as a random ID and not with the Pipedrive custom field name).Node 2:ScrapingBee - Get Organization's Website's Homepage ContentThis nodescrapes the contentfrom the URL of the website associated with thePipedrive Organizationcreated in Node 1. The workflow uses theScrapingBeeAPI, butyou can use any preferred API or simply the HTTP request node in n8n.Node 3:OpenAI - Message GPT-4o with Scraped DataThis node sends HTML-scraped data from the previous node to theOpenAI GPT-4o model. The system prompt instructs the model toextract company data, such as products or services offered and competitors (if known by the model), and format it as HTML for optimal use in a Pipedrive Note.Node 4:Pipedrive - Create a Note with OpenAI OutputThis nodeadds a Note to the Organization created in Pipedriveusing the OpenAI node output. The Note will include the company description, target market, selling products, and competitors (if GPT-4o was able to determine them).Node 5 & 6:HTML To Markdown&Code - Markdown to Slack MarkdownThese two nodesformat the HTML output to Slack Markdown.The Note created in Pipedrive is in HTML format,as specified by the System Prompt of the OpenAI Node. To send it to Slack, it needs to be converted to Markdown and then to Slack Markdown.Node 7:Slack - NotifyThis nodesends a message in Slack containing the Pipedrive Organization Notecreated with this workflow.",
            "tutorial_sections": [],
            "step_by_step": [],
            "best_practices": [],
            "common_pitfalls": [],
            "image_urls": [
              "https://n8n.io/nodes/http-request.svg",
              "https://n8n.io/nodes/pipedrive.svg",
              "https://n8n.io/nodes/pipedrive-trigger.svg",
              "https://gravatar.com/avatar/0437c659b1ec6916896ebb30cc237391f0e1de89df5465c103e12d2cb12ce42d?r=pg&d=retro&size=200",
              "https://n8n.io/nodes/google-sheets.svg",
              "https://gravatar.com/avatar/e57785a112fbcca1ac70d537a9ed5c5a68be59f808ed8b36475bde0e2c8f384b?r=pg&d=retro&size=200",
              "https://gravatar.com/avatar/2b74c7f530e250439f5d752f2623ead4921fbb8aef56343c922b2873ef8a619f?r=pg&d=retro&size=200",
              "https://n8n.io/nodes/merge.svg",
              "https://gravatar.com/avatar/b0a32f127a6ad690cd4ee808cb4d1b59d3b5e53410181d54f91d10c0027ebb43?r=pg&d=retro&size=200",
              "https://gravatar.com/avatar/b3d1a47322f05a8be3d2e7bad6a80c29161bd58b91e4762cbb3ac25e5d0db5a8?r=pg&d=retro&size=200",
              "https://n8n.io/nodes/openai-chat-model.svg",
              "https://gravatar.com/avatar/d6c9cb4d0092909e227e9de518409cdf679228a7df550714ce808d77976221af?r=pg&d=retro&size=200",
              "https://n8n.io/nodes/webhook.svg",
              "https://n8n.io/nodes/telegram.svg",
              "https://gravatar.com/avatar/e7ca218dfc87b68344bbd66f40da01546d2f6fc1cf884267821e8a77e3e8410a?r=pg&d=retro&size=200",
              "https://n8n.io/images/stars-footer.svg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/avatar_igordisco_9243b86232_cd9a5c94ce.jpg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/neutral_avatar_purple_fee36bffe3.PNG",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/avatar_anderoav_589989fc39_ceb1c71a0c.jpg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/avatar_maxim_poulsen_48f450887b_852d0439bc.jpeg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/Felix_Leber_f7a5b3c776_130aeca79d.jpeg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/avatar_Ironben_0a4b3e7d12_e35805265c.jpg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/Francois_lassl_d5cfb504c7_710c87121d.jpeg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/twitter_x_62a44e965e.svg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/github_e1f217d7a3_b9a271324f.svg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/discord_253947c90b_191e8f60fa.svg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/linkedin_d710e84d63_6ed0dc28aa.svg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/youtube_de4bdef50a_4b3a8b8aac.svg"
            ],
            "video_urls": [],
            "code_snippets": [],
            "conclusion": "",
            "troubleshooting": {
              "common_issues": [],
              "error_messages": []
            },
            "related_workflows": []
          },
          "errors": [],
          "extraction_time": 6.078104,
          "metadata": {
            "workflow_id": "2318",
            "url": "https://n8n.io/workflows/2318",
            "extracted_at": "2025-10-11T08:48:34.849511",
            "extractor_version": "1.0.0"
          }
        }
      },
      "multimodal": null,
      "transcripts": null,
      "validation": {
        "layer1": {
          "score": 80,
          "issues": [
            "Difficulty level not set",
            "No engagement metrics available"
          ],
          "valid": true,
          "layer": "layer1"
        },
        "layer2": {
          "score": 100,
          "issues": [],
          "valid": true,
          "layer": "layer2"
        },
        "layer3": {
          "score": 35,
          "issues": [
            "No tutorial sections extracted",
            "No images extracted",
            "Missing required fields: title, description, steps",
            "No step-by-step content extracted"
          ],
          "valid": false,
          "layer": "layer3"
        }
      },
      "quality": {
        "overall_score": 70.0,
        "classification": "Fair",
        "layer1_score": 80,
        "layer2_score": 100,
        "layer3_score": 35,
        "consistency_score": 100.0,
        "total_issues": 6
      },
      "extraction_time": 15.309628248214722,
      "errors": [],
      "timestamp": "2025-10-11T08:48:25.660277"
    },
    {
      "success": true,
      "workflow_id": "1847",
      "url": "https://n8n.io/workflows/1847",
      "layers": {
        "layer1": {
          "success": true,
          "workflow_id": "1847",
          "data": {
            "title": "Unknown Title",
            "description": "",
            "author": "Unknown Author",
            "use_case": "General workflow automation",
            "primary_category": "Strictly necessary",
            "secondary_categories": [
              "Performance",
              "Targeting",
              "Functionality",
              "Strictly necessary cookies allow core website functionality such as user login and account management. The website cannot be used properly without strictly necessary cookies.",
              "Performance cookies are used to see how visitors use the website, eg. analytics cookies. Those cookies cannot be used to directly identify a certain visitor.",
              "Targeting cookies are used to identify visitors between different websites, eg. content partners, banner networks. Those cookies may be used by companies to build a profile of visitor interests or show relevant ads on other websites.",
              "Functionality cookies are used to remember visitor information on the website, eg. language, timezone, enhanced content."
            ],
            "node_tags": [],
            "general_tags": [
              "Targeting",
              "Performance",
              "Strictly necessary",
              "Functionality"
            ],
            "difficulty_level": "intermediate",
            "views": 0,
            "upvotes": 0,
            "created_date": "2025-10-11T08:48:33.851691",
            "updated_date": "2025-10-11T08:48:33.851691",
            "setup_instructions": "",
            "prerequisites": [
              "token_v2",
              "or website it relates to",
              "{\n\t\tcontent: attr(label);\n\t\tfont-weight: bold;\n\t\twidth: 120px;\n\t\tmin-width: 120px;\n\t}",
              "visiting the said website",
              "__Secure-ROLLOUT_TOKEN"
            ],
            "estimated_setup_time": "4 minutes 59 sec",
            "industry": [
              "Strictly necessary"
            ]
          },
          "extraction_time": 5.116840124130249,
          "error": null
        },
        "layer2": {
          "success": false,
          "workflow_id": "1847",
          "data": null,
          "node_count": 0,
          "connection_count": 0,
          "extraction_time": 0.485697,
          "error": "Workflow not found (404)"
        },
        "layer3": {
          "success": true,
          "data": {
            "introduction": "",
            "overview": "",
            "tutorial_text": "",
            "tutorial_sections": [],
            "step_by_step": [],
            "best_practices": [],
            "common_pitfalls": [],
            "image_urls": [],
            "video_urls": [],
            "code_snippets": [],
            "conclusion": "",
            "troubleshooting": {
              "common_issues": [],
              "error_messages": []
            },
            "related_workflows": []
          },
          "errors": [],
          "extraction_time": 6.222871,
          "metadata": {
            "workflow_id": "1847",
            "url": "https://n8n.io/workflows/1847",
            "extracted_at": "2025-10-11T08:48:35.463364",
            "extractor_version": "1.0.0"
          }
        }
      },
      "multimodal": null,
      "transcripts": null,
      "validation": {
        "layer1": {
          "score": 55,
          "issues": [
            "Description missing or too short (minimum 20 characters)",
            "Difficulty level not set",
            "Author not identified",
            "No engagement metrics available"
          ],
          "valid": false,
          "layer": "layer1"
        },
        "layer2": null,
        "layer3": {
          "score": 5,
          "issues": [
            "Tutorial text missing",
            "No tutorial sections extracted",
            "No images extracted",
            "Missing required fields: title, description, steps",
            "No step-by-step content extracted"
          ],
          "valid": false,
          "layer": "layer3"
        }
      },
      "quality": {
        "overall_score": 20.0,
        "classification": "Poor",
        "layer1_score": 55,
        "layer2_score": null,
        "layer3_score": 5,
        "consistency_score": 70.0,
        "total_issues": 9
      },
      "extraction_time": 12.602848052978516,
      "errors": [
        "Layer 2 extraction failed: Workflow not found (404)"
      ],
      "timestamp": "2025-10-11T08:48:29.118477"
    },
    {
      "success": true,
      "workflow_id": "2091",
      "url": "https://n8n.io/workflows/2091",
      "layers": {
        "layer1": {
          "success": true,
          "workflow_id": "2091",
          "data": {
            "title": "Unknown Title",
            "description": "",
            "author": "Unknown Author",
            "use_case": "General workflow automation",
            "primary_category": "Strictly necessary",
            "secondary_categories": [
              "Performance",
              "Targeting",
              "Functionality",
              "Strictly necessary cookies allow core website functionality such as user login and account management. The website cannot be used properly without strictly necessary cookies.",
              "Performance cookies are used to see how visitors use the website, eg. analytics cookies. Those cookies cannot be used to directly identify a certain visitor.",
              "Targeting cookies are used to identify visitors between different websites, eg. content partners, banner networks. Those cookies may be used by companies to build a profile of visitor interests or show relevant ads on other websites.",
              "Functionality cookies are used to remember visitor information on the website, eg. language, timezone, enhanced content."
            ],
            "node_tags": [],
            "general_tags": [
              "Targeting",
              "Performance",
              "Strictly necessary",
              "Functionality"
            ],
            "difficulty_level": "intermediate",
            "views": 0,
            "upvotes": 0,
            "created_date": "2025-10-11T08:48:34.277506",
            "updated_date": "2025-10-11T08:48:34.277506",
            "setup_instructions": "",
            "prerequisites": [
              "token_v2",
              "or website it relates to",
              "{\n\t\tcontent: attr(label);\n\t\tfont-weight: bold;\n\t\twidth: 120px;\n\t\tmin-width: 120px;\n\t}",
              "visiting the said website",
              "__Secure-ROLLOUT_TOKEN"
            ],
            "estimated_setup_time": "4 minutes 59 sec",
            "industry": [
              "Strictly necessary"
            ]
          },
          "extraction_time": 5.2075231075286865,
          "error": null
        },
        "layer2": {
          "success": false,
          "workflow_id": "2091",
          "data": null,
          "node_count": 0,
          "connection_count": 0,
          "extraction_time": 0.205946,
          "error": "Workflow not found (404)"
        },
        "layer3": {
          "success": true,
          "data": {
            "introduction": "",
            "overview": "",
            "tutorial_text": "",
            "tutorial_sections": [],
            "step_by_step": [],
            "best_practices": [],
            "common_pitfalls": [],
            "image_urls": [],
            "video_urls": [],
            "code_snippets": [],
            "conclusion": "",
            "troubleshooting": {
              "common_issues": [],
              "error_messages": []
            },
            "related_workflows": []
          },
          "errors": [],
          "extraction_time": 5.964906,
          "metadata": {
            "workflow_id": "2091",
            "url": "https://n8n.io/workflows/2091",
            "extracted_at": "2025-10-11T08:48:35.717161",
            "extractor_version": "1.0.0"
          }
        }
      },
      "multimodal": null,
      "transcripts": null,
      "validation": {
        "layer1": {
          "score": 55,
          "issues": [
            "Description missing or too short (minimum 20 characters)",
            "Difficulty level not set",
            "Author not identified",
            "No engagement metrics available"
          ],
          "valid": false,
          "layer": "layer1"
        },
        "layer2": null,
        "layer3": {
          "score": 5,
          "issues": [
            "Tutorial text missing",
            "No tutorial sections extracted",
            "No images extracted",
            "Missing required fields: title, description, steps",
            "No step-by-step content extracted"
          ],
          "valid": false,
          "layer": "layer3"
        }
      },
      "quality": {
        "overall_score": 20.0,
        "classification": "Poor",
        "layer1_score": 55,
        "layer2_score": null,
        "layer3_score": 5,
        "consistency_score": 70.0,
        "total_issues": 9
      },
      "extraction_time": 12.269721984863281,
      "errors": [
        "Layer 2 extraction failed: Workflow not found (404)"
      ],
      "timestamp": "2025-10-11T08:48:29.453620"
    },
    {
      "success": true,
      "workflow_id": "1925",
      "url": "https://n8n.io/workflows/1925",
      "layers": {
        "layer1": {
          "success": true,
          "workflow_id": "1925",
          "data": {
            "title": "Unknown Title",
            "description": "",
            "author": "Unknown Author",
            "use_case": "General workflow automation",
            "primary_category": "Strictly necessary",
            "secondary_categories": [
              "Performance",
              "Targeting",
              "Functionality",
              "Strictly necessary cookies allow core website functionality such as user login and account management. The website cannot be used properly without strictly necessary cookies.",
              "Performance cookies are used to see how visitors use the website, eg. analytics cookies. Those cookies cannot be used to directly identify a certain visitor.",
              "Targeting cookies are used to identify visitors between different websites, eg. content partners, banner networks. Those cookies may be used by companies to build a profile of visitor interests or show relevant ads on other websites.",
              "Functionality cookies are used to remember visitor information on the website, eg. language, timezone, enhanced content."
            ],
            "node_tags": [],
            "general_tags": [
              "Targeting",
              "Performance",
              "Strictly necessary",
              "Functionality"
            ],
            "difficulty_level": "intermediate",
            "views": 0,
            "upvotes": 0,
            "created_date": "2025-10-11T08:48:45.665197",
            "updated_date": "2025-10-11T08:48:45.665197",
            "setup_instructions": "",
            "prerequisites": [
              "token_v2",
              "or website it relates to",
              "{\n\t\tcontent: attr(label);\n\t\tfont-weight: bold;\n\t\twidth: 120px;\n\t\tmin-width: 120px;\n\t}",
              "visiting the said website",
              "__Secure-ROLLOUT_TOKEN"
            ],
            "estimated_setup_time": "4 minutes 59 sec",
            "industry": [
              "Strictly necessary"
            ]
          },
          "extraction_time": 5.1031718254089355,
          "error": null
        },
        "layer2": {
          "success": false,
          "workflow_id": "1925",
          "data": null,
          "node_count": 0,
          "connection_count": 0,
          "extraction_time": 0.67905,
          "error": "Workflow not found (404)"
        },
        "layer3": {
          "success": true,
          "data": {
            "introduction": "",
            "overview": "",
            "tutorial_text": "",
            "tutorial_sections": [],
            "step_by_step": [],
            "best_practices": [],
            "common_pitfalls": [],
            "image_urls": [],
            "video_urls": [],
            "code_snippets": [],
            "conclusion": "",
            "troubleshooting": {
              "common_issues": [],
              "error_messages": []
            },
            "related_workflows": []
          },
          "errors": [],
          "extraction_time": 5.84873,
          "metadata": {
            "workflow_id": "1925",
            "url": "https://n8n.io/workflows/1925",
            "extracted_at": "2025-10-11T08:48:47.761881",
            "extractor_version": "1.0.0"
          }
        }
      },
      "multimodal": null,
      "transcripts": null,
      "validation": {
        "layer1": {
          "score": 55,
          "issues": [
            "Description missing or too short (minimum 20 characters)",
            "Difficulty level not set",
            "Author not identified",
            "No engagement metrics available"
          ],
          "valid": false,
          "layer": "layer1"
        },
        "layer2": null,
        "layer3": {
          "score": 5,
          "issues": [
            "Tutorial text missing",
            "No tutorial sections extracted",
            "No images extracted",
            "Missing required fields: title, description, steps",
            "No step-by-step content extracted"
          ],
          "valid": false,
          "layer": "layer3"
        }
      },
      "quality": {
        "overall_score": 20.0,
        "classification": "Poor",
        "layer1_score": 55,
        "layer2_score": null,
        "layer3_score": 5,
        "consistency_score": 70.0,
        "total_issues": 9
      },
      "extraction_time": 12.678182125091553,
      "errors": [
        "Layer 2 extraction failed: Workflow not found (404)"
      ],
      "timestamp": "2025-10-11T08:48:40.970207"
    },
    {
      "success": true,
      "workflow_id": "2254",
      "url": "https://n8n.io/workflows/2254",
      "layers": {
        "layer1": {
          "success": true,
          "workflow_id": "2254",
          "data": {
            "title": "Streamlining Document Automation with n8n and JSReport",
            "description": "Who is this template for? This workflow template is designed for accounting, human resources, and IT project management teams looking to automate the...",
            "author": "Igor Fediczko@igordisco",
            "use_case": "Who is this template for? This workflow template is designed for accounting, human resources, and IT project management teams looking to automate the.",
            "primary_category": "Strictly necessary",
            "secondary_categories": [
              "Performance",
              "Targeting",
              "Functionality",
              "Strictly necessary cookies allow core website functionality such as user login and account management. The website cannot be used properly without strictly necessary cookies.",
              "Performance cookies are used to see how visitors use the website, eg. analytics cookies. Those cookies cannot be used to directly identify a certain visitor.",
              "Targeting cookies are used to identify visitors between different websites, eg. content partners, banner networks. Those cookies may be used by companies to build a profile of visitor interests or show relevant ads on other websites.",
              "Functionality cookies are used to remember visitor information on the website, eg. language, timezone, enhanced content."
            ],
            "node_tags": [
              "github147,222",
              "hiring"
            ],
            "general_tags": [
              "Targeting",
              "Performance",
              "Strictly necessary",
              "Functionality"
            ],
            "difficulty_level": "intermediate",
            "views": 0,
            "upvotes": 0,
            "created_date": "2025-10-11T08:48:49.160988",
            "updated_date": "2025-10-11T08:48:49.160988",
            "setup_instructions": "Who is this template for? This workflow template is designed for accounting, human resources, and IT project management teams looking to automate the...",
            "prerequisites": [
              "token_v2",
              "or website it relates to",
              "guidance, watch the setup video](https://youtu",
              "{\n\t\tcontent: attr(label);\n\t\tfont-weight: bold;\n\t\twidth: 120px;\n\t\tmin-width: 120px;\n\t}",
              "and objectives"
            ],
            "estimated_setup_time": "4 minutes 59 sec",
            "industry": [
              "Strictly necessary"
            ]
          },
          "extraction_time": 8.159374952316284,
          "error": null
        },
        "layer2": {
          "success": true,
          "workflow_id": "2254",
          "data": {
            "id": 2254,
            "name": "Streamlining Document Automation with n8n and JSReport",
            "workflow": {
              "id": "i8nBvPOtFYWk5eoq",
              "meta": {
                "instanceId": "c5a9958b493899f1235322c2c0e4f007083d1c79bb2c9043ae90b75371e276c7"
              },
              "name": "Get PDF with JSReport",
              "tags": [
                {
                  "id": "2L2vOvQ2wUBVYeh1",
                  "name": "Send",
                  "createdAt": "2024-05-03T13:40:43.868Z",
                  "updatedAt": "2024-05-03T13:40:43.868Z"
                },
                {
                  "id": "SBlaOF5ezhukSiIT",
                  "name": "JSReport",
                  "createdAt": "2024-05-03T13:40:38.379Z",
                  "updatedAt": "2024-05-03T13:40:38.379Z"
                },
                {
                  "id": "vRTFSK4WW6nL2U7z",
                  "name": "PDF",
                  "createdAt": "2024-05-03T13:40:34.380Z",
                  "updatedAt": "2024-05-03T13:40:34.380Z"
                }
              ],
              "nodes": [
                {
                  "id": "9514b49d-80f3-41d2-bcbc-8fa08e27cb64",
                  "name": "Get PDF From JSReport",
                  "type": "n8n-nodes-base.httpRequest",
                  "notes": "Generating the document in JSReport",
                  "position": [
                    1040,
                    320
                  ],
                  "parameters": {
                    "url": "https://xxx.jsreportonline.net/api/report",
                    "method": "POST",
                    "options": {},
                    "jsonBody": "=   {\n      \"template\": { \"name\" : \"invoice-main\" },\n      \"data\" :{\n    \"number\": \"123\",\n    \"seller\": {\n        \"name\": \"Next Step Webs, Inc.\",\n        \"road\": \"12345 Sunny Road\",\n        \"country\": \"Sunnyville, TX 12345\"\n    },\n    \"buyer\": {\n        \"name\": \"{{ $json[\"buyer name\"] }}\",\n        \"road\": \"{{ $json[\"buyer road\"] }}\",\n        \"country\": \"{{ $json[\"buyer country\"] }}\"\n    },\n    \"items\": [{\n        \"name\": \"{{ $json[\"Item 1 Name\"] }}\",\n        \"price\": {{ $json[\"Item 1 Price\"] }}\n    }, {\n        \"name\": \"{{ $json[\"Item 2 Name\"] }}\",\n        \"price\": {{ $json[\"Item 2 Price\"] }}\n    }]\n}\n   }",
                    "sendBody": true,
                    "specifyBody": "json",
                    "authentication": "genericCredentialType",
                    "genericAuthType": "httpBasicAuth"
                  },
                  "credentials": {
                    "httpBasicAuth": {
                      "id": "oKwHNpbRnChEV8xq",
                      "name": "Unnamed credential"
                    }
                  },
                  "notesInFlow": true,
                  "typeVersion": 4.2
                },
                {
                  "id": "d33abb5b-50b0-44d9-8a92-e910bb180ea5",
                  "name": "Sticky Note",
                  "type": "n8n-nodes-base.stickyNote",
                  "position": [
                    460,
                    240
                  ],
                  "parameters": {
                    "height": 372,
                    "content": "##  Streamlining Billing Processes: From Data Input to Document Generation\n\nThis process presents the possibility of using a form, such as the one provided by n8n, to enter billing information, then calling JSReport to generate documents such as PDFs, Word, Excel, etc., and finally sending the invoice by email.\n"
                  },
                  "typeVersion": 1
                },
                {
                  "id": "85981fc7-ecb5-49f3-9395-9866ded70257",
                  "name": "Sticky Note1",
                  "type": "n8n-nodes-base.stickyNote",
                  "position": [
                    903,
                    240
                  ],
                  "parameters": {
                    "color": 4,
                    "width": 363,
                    "height": 568,
                    "content": "## Information for calling JSReport\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n### URL API : \nhttps://xxx.jsreportonline.net/api/report\n\n### Use :\nTo use JSReport, simply call the APIs with the base URL. You can create a free account here: https://jsreport.net/online.\n\nThe APIs are available here: https://jsreport.net/learn/api.\n\nIn this example, we're sending a sample body that you can find in your JSReport test space."
                  },
                  "typeVersion": 1
                },
                {
                  "id": "94ae99b3-0ec9-4916-9bf4-19cfeb599966",
                  "name": "Form Invoice",
                  "type": "n8n-nodes-base.formTrigger",
                  "notes": "Allows you to enter invoice information",
                  "position": [
                    740,
                    320
                  ],
                  "webhookId": "1d0c5777-4033-4bf4-8d0e-8a2069d79c86",
                  "parameters": {
                    "path": "1d0c5777-4033-4bf4-8d0e-8a2069d79c86",
                    "options": {},
                    "formTitle": "Create Facture",
                    "formFields": {
                      "values": [
                        {
                          "fieldLabel": "buyer name",
                          "requiredField": true
                        },
                        {
                          "fieldLabel": "buyer road",
                          "requiredField": true
                        },
                        {
                          "fieldLabel": "buyer country",
                          "requiredField": true
                        },
                        {
                          "fieldLabel": "Item 1 Name"
                        },
                        {
                          "fieldType": "number",
                          "fieldLabel": "Item 1 Price"
                        },
                        {
                          "fieldLabel": "Item 2 Name"
                        },
                        {
                          "fieldLabel": "Item 2 Price"
                        }
                      ]
                    },
                    "formDescription": "Create a PDF invoice from an n8n and JSReport form"
                  },
                  "notesInFlow": true,
                  "typeVersion": 2
                },
                {
                  "id": "142c4a45-1228-4be5-8172-9834bb9ca491",
                  "name": "Send invoice",
                  "type": "n8n-nodes-base.gmail",
                  "notes": "Using GMAIL to send the invoice",
                  "position": [
                    1340,
                    320
                  ],
                  "parameters": {
                    "sendTo": "contact@nonocode.fr",
                    "message": "Good morning,  \n\nPlease find your invoice.  \n\nSincerely,",
                    "options": {
                      "attachmentsUi": {
                        "attachmentsBinary": [
                          {}
                        ]
                      }
                    },
                    "subject": "New Facture"
                  },
                  "credentials": {
                    "gmailOAuth2": {
                      "id": "N3pxr94UxrQSovu5",
                      "name": "Gmail account"
                    }
                  },
                  "notesInFlow": true,
                  "typeVersion": 2.1
                }
              ],
              "active": true,
              "pinData": {},
              "settings": {
                "executionOrder": "v1"
              },
              "versionId": "8e1b0f98-68ec-4300-a948-52439d00db66",
              "connections": {
                "Form Invoice": {
                  "main": [
                    [
                      {
                        "node": "Get PDF From JSReport",
                        "type": "main",
                        "index": 0
                      }
                    ]
                  ]
                },
                "Get PDF From JSReport": {
                  "main": [
                    [
                      {
                        "node": "Send invoice",
                        "type": "main",
                        "index": 0
                      }
                    ]
                  ]
                }
              }
            }
          },
          "node_count": 5,
          "connection_count": 2,
          "extraction_time": 0.345757,
          "error": null
        },
        "layer3": {
          "success": true,
          "data": {
            "introduction": "Who is this template for?This workflow template is designed for accounting, human resources, and IT project management teams looking to automate the generation of PDF and Word documents. It can be particularly useful for:The accounting department: for generating invoices in PDF format, thus streamlining the invoicing process and payment tracking.The human resources department: for creating employment contracts in PDF, simplifying the administrative management of employees.IT project management teams: for producing Word documents, such as project specifications, to clearly define project requirements and objectives.Example result in mailThis PDF and Word document generation workflow offers a practical and efficient solution for automating administrative and document-related tasks, allowing teams to focus on higher-value activities.How it worksThis workflow currently operates with an n8n form, but you can easily replace this form with a webhook triggered by an external application such as AirTable, SharePoint, DocuWare, etc.Once the configuration information is retrieved, we fill the API request body of JSReport. The body is defined at the time of template creation in JSReport (Example of JSReport usage).Then, in a straightforward manner, we fetch the PDF and send it via email.Here's a brief overview of this n8n workflow template:Link to n8n workflow template presentationTo summarizeThis workflow integrates with an n8n form, but it's flexible to work with various triggering methods like webhooks from other applications such as AirTable, SharePoint, or DocuWare.After configuring the necessary information, it populates the API request body of JSReport, which defines the template in JSReport.Once the template is populated, it retrieves the PDF and sends it via email.In essence, it streamlines the process of generating PDF documents based on user input and distributing them via email.Instructions:Create a JSReport Account: Sign up for a JSReport account to create your PDF template model.Define PDF Template in JSReport: Use JSON data from your system to set up the content of your PDF template in JSReport.Configure HTTP Request in n8n: Use the HTTP Request node in n8n to send a request to JSReport. Set the node's body to the JSON data defining your PDF template.Watch the Video:For detailed setup guidance, watch the setup video.Remember, this template was created in n8n v1.38.2.",
            "overview": "",
            "tutorial_text": "Who is this template for?This workflow template is designed for accounting, human resources, and IT project management teams looking to automate the generation of PDF and Word documents. It can be particularly useful for:The accounting department: for generating invoices in PDF format, thus streamlining the invoicing process and payment tracking.The human resources department: for creating employment contracts in PDF, simplifying the administrative management of employees.IT project management teams: for producing Word documents, such as project specifications, to clearly define project requirements and objectives.Example result in mailThis PDF and Word document generation workflow offers a practical and efficient solution for automating administrative and document-related tasks, allowing teams to focus on higher-value activities.How it worksThis workflow currently operates with an n8n form, but you can easily replace this form with a webhook triggered by an external application such as AirTable, SharePoint, DocuWare, etc.Once the configuration information is retrieved, we fill the API request body of JSReport. The body is defined at the time of template creation in JSReport (Example of JSReport usage).Then, in a straightforward manner, we fetch the PDF and send it via email.Here's a brief overview of this n8n workflow template:Link to n8n workflow template presentationTo summarizeThis workflow integrates with an n8n form, but it's flexible to work with various triggering methods like webhooks from other applications such as AirTable, SharePoint, or DocuWare.After configuring the necessary information, it populates the API request body of JSReport, which defines the template in JSReport.Once the template is populated, it retrieves the PDF and sends it via email.In essence, it streamlines the process of generating PDF documents based on user input and distributing them via email.Instructions:Create a JSReport Account: Sign up for a JSReport account to create your PDF template model.Define PDF Template in JSReport: Use JSON data from your system to set up the content of your PDF template in JSReport.Configure HTTP Request in n8n: Use the HTTP Request node in n8n to send a request to JSReport. Set the node's body to the JSON data defining your PDF template.Watch the Video:For detailed setup guidance, watch the setup video.Remember, this template was created in n8n v1.38.2.",
            "tutorial_sections": [],
            "step_by_step": [],
            "best_practices": [],
            "common_pitfalls": [],
            "image_urls": [
              "https://n8n.io/nodes/http-request.svg",
              "https://n8n.io/nodes/gmail.svg",
              "https://gravatar.com/avatar/1507b4567363cfca292aab84b1611f254bc4dc6b4c04e951128204415508bd30?r=pg&d=retro&size=200",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/invoice_92edbc9e67.png",
              "https://n8n.io/nodes/webhook.svg",
              "https://gravatar.com/avatar/7ee0febc0cbec2f1f6b24ddec3c4322e27c82c91dc729cfecf6ce12bfddd058d?r=pg&d=retro&size=200",
              "https://n8n.io/nodes/google-drive.svg",
              "https://gravatar.com/avatar/4cda9c7c1c24fdb61896cac588296d1dad03655a439ab71ef34f4c62c0ba8524?r=pg&d=retro&size=200",
              "https://n8n.io/nodes/notion.svg",
              "https://n8n.io/nodes/google-drive-trigger.svg",
              "https://gravatar.com/avatar/a3f78329cbd3f3239726910fb8b0f8e5e7bb340868f57b959989e7f8d8ea1608?r=pg&d=retro&size=200",
              "https://n8n.io/images/stars-footer.svg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/avatar_igordisco_9243b86232_cd9a5c94ce.jpg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/neutral_avatar_purple_fee36bffe3.PNG",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/avatar_anderoav_589989fc39_ceb1c71a0c.jpg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/avatar_maxim_poulsen_48f450887b_852d0439bc.jpeg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/Felix_Leber_f7a5b3c776_130aeca79d.jpeg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/avatar_Ironben_0a4b3e7d12_e35805265c.jpg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/Francois_lassl_d5cfb504c7_710c87121d.jpeg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/twitter_x_62a44e965e.svg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/github_e1f217d7a3_b9a271324f.svg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/discord_253947c90b_191e8f60fa.svg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/linkedin_d710e84d63_6ed0dc28aa.svg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/youtube_de4bdef50a_4b3a8b8aac.svg"
            ],
            "video_urls": [
              "https://youtu.be/jjjXCj3flPI",
              "https://youtu.be/nz1SKdOKAhM",
              "https://youtu.be/fRoRze7CBY4"
            ],
            "code_snippets": [],
            "conclusion": "",
            "troubleshooting": {
              "common_issues": [],
              "error_messages": []
            },
            "related_workflows": []
          },
          "errors": [],
          "extraction_time": 5.641371,
          "metadata": {
            "workflow_id": "2254",
            "url": "https://n8n.io/workflows/2254",
            "extracted_at": "2025-10-11T08:48:50.877620",
            "extractor_version": "1.0.0"
          }
        }
      },
      "multimodal": null,
      "transcripts": null,
      "validation": {
        "layer1": {
          "score": 80,
          "issues": [
            "Difficulty level not set",
            "No engagement metrics available"
          ],
          "valid": true,
          "layer": "layer1"
        },
        "layer2": {
          "score": 100,
          "issues": [],
          "valid": true,
          "layer": "layer2"
        },
        "layer3": {
          "score": 35,
          "issues": [
            "No tutorial sections extracted",
            "No images extracted",
            "Missing required fields: title, description, steps",
            "No step-by-step content extracted"
          ],
          "valid": false,
          "layer": "layer3"
        }
      },
      "quality": {
        "overall_score": 70.0,
        "classification": "Fair",
        "layer1_score": 80,
        "layer2_score": 100,
        "layer3_score": 35,
        "consistency_score": 100.0,
        "total_issues": 6
      },
      "extraction_time": 14.833094835281372,
      "errors": [],
      "timestamp": "2025-10-11T08:48:41.721861"
    },
    {
      "success": true,
      "workflow_id": "1876",
      "url": "https://n8n.io/workflows/1876",
      "layers": {
        "layer1": {
          "success": true,
          "workflow_id": "1876",
          "data": {
            "title": "Unknown Title",
            "description": "",
            "author": "Unknown Author",
            "use_case": "General workflow automation",
            "primary_category": "Strictly necessary",
            "secondary_categories": [
              "Performance",
              "Targeting",
              "Functionality",
              "Strictly necessary cookies allow core website functionality such as user login and account management. The website cannot be used properly without strictly necessary cookies.",
              "Performance cookies are used to see how visitors use the website, eg. analytics cookies. Those cookies cannot be used to directly identify a certain visitor.",
              "Targeting cookies are used to identify visitors between different websites, eg. content partners, banner networks. Those cookies may be used by companies to build a profile of visitor interests or show relevant ads on other websites.",
              "Functionality cookies are used to remember visitor information on the website, eg. language, timezone, enhanced content."
            ],
            "node_tags": [],
            "general_tags": [
              "Targeting",
              "Performance",
              "Strictly necessary",
              "Functionality"
            ],
            "difficulty_level": "intermediate",
            "views": 0,
            "upvotes": 0,
            "created_date": "2025-10-11T08:48:46.426085",
            "updated_date": "2025-10-11T08:48:46.426085",
            "setup_instructions": "",
            "prerequisites": [
              "token_v2",
              "or website it relates to",
              "{\n\t\tcontent: attr(label);\n\t\tfont-weight: bold;\n\t\twidth: 120px;\n\t\tmin-width: 120px;\n\t}",
              "visiting the said website",
              "__Secure-ROLLOUT_TOKEN"
            ],
            "estimated_setup_time": "4 minutes 59 sec",
            "industry": [
              "Strictly necessary"
            ]
          },
          "extraction_time": 5.148637056350708,
          "error": null
        },
        "layer2": {
          "success": false,
          "workflow_id": "1876",
          "data": null,
          "node_count": 0,
          "connection_count": 0,
          "extraction_time": 0.213531,
          "error": "Workflow not found (404)"
        },
        "layer3": {
          "success": true,
          "data": {
            "introduction": "",
            "overview": "",
            "tutorial_text": "",
            "tutorial_sections": [],
            "step_by_step": [],
            "best_practices": [],
            "common_pitfalls": [],
            "image_urls": [],
            "video_urls": [],
            "code_snippets": [],
            "conclusion": "",
            "troubleshooting": {
              "common_issues": [],
              "error_messages": []
            },
            "related_workflows": []
          },
          "errors": [],
          "extraction_time": 5.641693,
          "metadata": {
            "workflow_id": "1876",
            "url": "https://n8n.io/workflows/1876",
            "extracted_at": "2025-10-11T08:48:48.232374",
            "extractor_version": "1.0.0"
          }
        }
      },
      "multimodal": null,
      "transcripts": null,
      "validation": {
        "layer1": {
          "score": 55,
          "issues": [
            "Description missing or too short (minimum 20 characters)",
            "Difficulty level not set",
            "Author not identified",
            "No engagement metrics available"
          ],
          "valid": false,
          "layer": "layer1"
        },
        "layer2": null,
        "layer3": {
          "score": 5,
          "issues": [
            "Tutorial text missing",
            "No tutorial sections extracted",
            "No images extracted",
            "Missing required fields: title, description, steps",
            "No step-by-step content extracted"
          ],
          "valid": false,
          "layer": "layer3"
        }
      },
      "quality": {
        "overall_score": 20.0,
        "classification": "Poor",
        "layer1_score": 55,
        "layer2_score": null,
        "layer3_score": 5,
        "consistency_score": 70.0,
        "total_issues": 9
      },
      "extraction_time": 12.167308807373047,
      "errors": [
        "Layer 2 extraction failed: Workflow not found (404)"
      ],
      "timestamp": "2025-10-11T08:48:41.744360"
    },
    {
      "success": true,
      "workflow_id": "2134",
      "url": "https://n8n.io/workflows/2134",
      "layers": {
        "layer1": {
          "success": true,
          "workflow_id": "2134",
          "data": {
            "title": "Extract emails from website HTMLs",
            "description": "How to scrap emails from websites This workflow shows how to quickly build an Email scraping API using n8n. Email marketing is at the core of most marketing...",
            "author": "Igor Fediczko@igordisco",
            "use_case": "How to scrap emails from websites This workflow shows how to quickly build an Email scraping API using n8n.",
            "primary_category": "Strictly necessary",
            "secondary_categories": [
              "Performance",
              "Targeting",
              "Functionality",
              "Strictly necessary cookies allow core website functionality such as user login and account management. The website cannot be used properly without strictly necessary cookies.",
              "Performance cookies are used to see how visitors use the website, eg. analytics cookies. Those cookies cannot be used to directly identify a certain visitor.",
              "Targeting cookies are used to identify visitors between different websites, eg. content partners, banner networks. Those cookies may be used by companies to build a profile of visitor interests or show relevant ads on other websites.",
              "Functionality cookies are used to remember visitor information on the website, eg. language, timezone, enhanced content."
            ],
            "node_tags": [
              "github147,222",
              "hiring"
            ],
            "general_tags": [
              "Targeting",
              "Performance",
              "Strictly necessary",
              "Functionality"
            ],
            "difficulty_level": "intermediate",
            "views": 0,
            "upvotes": 0,
            "created_date": "2025-10-11T08:49:01.364476",
            "updated_date": "2025-10-11T08:49:01.364476",
            "setup_instructions": "How to scrap emails from websites This workflow shows how to quickly build an Email scraping API using n8n. Email marketing is at the core of most marketing...",
            "prerequisites": [
              "token_v2",
              "or website it relates to",
              "{\n\t\tcontent: attr(label);\n\t\tfont-weight: bold;\n\t\twidth: 120px;\n\t\tmin-width: 120px;\n\t}",
              "visiting the said website",
              "__Secure-ROLLOUT_TOKEN"
            ],
            "estimated_setup_time": "4 minutes 59 sec",
            "industry": [
              "Strictly necessary"
            ]
          },
          "extraction_time": 8.241480827331543,
          "error": null
        },
        "layer2": {
          "success": true,
          "workflow_id": "2134",
          "data": {
            "id": 2134,
            "name": "Extract emails from website HTMLs",
            "workflow": {
              "meta": {
                "instanceId": "8eadf351d49a11e77d3a57adf374670f06c5294af8b1b7c86a1123340397e728"
              },
              "nodes": [
                {
                  "id": "f28a0602-f02c-4f41-8bbf-dfd46d0def87",
                  "name": "Split Out",
                  "type": "n8n-nodes-base.splitOut",
                  "position": [
                    2020,
                    620
                  ],
                  "parameters": {
                    "options": {},
                    "fieldToSplitOut": "Email"
                  },
                  "typeVersion": 1
                },
                {
                  "id": "d995d088-9be1-4a64-a533-d764587b3ae4",
                  "name": "Remove Duplicates",
                  "type": "n8n-nodes-base.removeDuplicates",
                  "onError": "continueRegularOutput",
                  "position": [
                    2480,
                    600
                  ],
                  "parameters": {},
                  "retryOnFail": true,
                  "typeVersion": 1
                },
                {
                  "id": "b64f9bc5-7e85-41df-b27c-10d53df6809f",
                  "name": "Respond to Webhook",
                  "type": "n8n-nodes-base.respondToWebhook",
                  "position": [
                    2740,
                    600
                  ],
                  "parameters": {
                    "options": {}
                  },
                  "typeVersion": 1
                },
                {
                  "id": "466cf9ce-4baf-45f9-bd70-d2041c20605e",
                  "name": "Sticky Note",
                  "type": "n8n-nodes-base.stickyNote",
                  "position": [
                    1204.5476340072564,
                    520
                  ],
                  "parameters": {
                    "color": 4,
                    "width": 1764.2311804548722,
                    "height": 309.99889350400827,
                    "content": "\n* Scraping emails from websites using an api"
                  },
                  "typeVersion": 1
                },
                {
                  "id": "566ca1f5-b6c4-4566-97e7-59bc2d616e1c",
                  "name": "Sticky Note1",
                  "type": "n8n-nodes-base.stickyNote",
                  "position": [
                    1300,
                    800
                  ],
                  "parameters": {
                    "color": 5,
                    "width": 520.3009626085002,
                    "height": 249.39327996703526,
                    "content": "\n* Call the webhook using a query parameter eg \n\nhttp://localhost:5678/webhook/ea568868-5770-4b2a-8893-7e?Website=https://mailsafi.com\n\nHTTP request rest the query Website and gets the emails therein"
                  },
                  "typeVersion": 1
                },
                {
                  "id": "ea95c9a3-b7c8-4288-8fdf-6504caee46f4",
                  "name": "Sticky Note2",
                  "type": "n8n-nodes-base.stickyNote",
                  "position": [
                    440,
                    380
                  ],
                  "parameters": {
                    "width": 728.4741979436378,
                    "height": 430.0825742795921,
                    "content": "# How to scrap emails from websites\n\nThis workflow shows how you can quickly build an Email scraping API using n8n.\nUsage\nCopy the webhook URL to your browser and add a query parameter eg {{$n8nhosteingurl/webhook/ea568868-5770-4b2a-8893-700b344c995e?Website=https://mailsafi.com\nThis will return the email address on the website or if there is no email, the response will be \"workflow successfully executed\"\n\n# Make sure to use HTTP:// for your domains\n\nOtherwise, you may get an error. \n\n\n\n"
                  },
                  "typeVersion": 1
                },
                {
                  "id": "05d4e9d4-d803-4e74-b4d0-166f4873dbca",
                  "name": "Webhook",
                  "type": "n8n-nodes-base.webhook",
                  "position": [
                    1360,
                    620
                  ],
                  "webhookId": "ea568868-5770-4b2a-8893-700b344c995e",
                  "parameters": {
                    "path": "ea568868-5770-4b2a-8893-700b344c995e",
                    "options": {},
                    "responseMode": "responseNode"
                  },
                  "typeVersion": 1.1
                },
                {
                  "id": "555c8f81-25ea-4be5-b260-7b6039c705a8",
                  "name": "Get the website data",
                  "type": "n8n-nodes-base.httpRequest",
                  "onError": "continueRegularOutput",
                  "position": [
                    1600,
                    620
                  ],
                  "parameters": {
                    "url": "={{ $json.query['Website'] }}",
                    "options": {}
                  },
                  "retryOnFail": true,
                  "typeVersion": 4.1
                },
                {
                  "id": "e83b38b8-dc13-49eb-9482-1dbd8a9ef583",
                  "name": "Extract the emails found",
                  "type": "n8n-nodes-base.set",
                  "position": [
                    1800,
                    620
                  ],
                  "parameters": {
                    "options": {},
                    "assignments": {
                      "assignments": [
                        {
                          "id": "80a8a8ec-9ac7-4545-beab-390732218548",
                          "name": "Email",
                          "type": "array",
                          "value": "={{$json.data.match(/(?:[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,})/g)}}"
                        }
                      ]
                    }
                  },
                  "typeVersion": 3.3
                },
                {
                  "id": "3fe56efc-0d7b-4e0f-8f9c-3b10ce59cb94",
                  "name": "If contains email",
                  "type": "n8n-nodes-base.if",
                  "position": [
                    2220,
                    620
                  ],
                  "parameters": {
                    "options": {},
                    "conditions": {
                      "options": {
                        "leftValue": "",
                        "caseSensitive": true,
                        "typeValidation": "strict"
                      },
                      "combinator": "and",
                      "conditions": [
                        {
                          "id": "701ead8f-02ba-4689-8054-9e40d9b9f770",
                          "operator": {
                            "type": "string",
                            "operation": "notEmpty",
                            "singleValue": true
                          },
                          "leftValue": "={{ $json.Email }}",
                          "rightValue": ""
                        }
                      ]
                    }
                  },
                  "typeVersion": 2
                }
              ],
              "pinData": {},
              "connections": {
                "Webhook": {
                  "main": [
                    [
                      {
                        "node": "Get the website data",
                        "type": "main",
                        "index": 0
                      }
                    ]
                  ]
                },
                "Split Out": {
                  "main": [
                    [
                      {
                        "node": "If contains email",
                        "type": "main",
                        "index": 0
                      }
                    ]
                  ]
                },
                "If contains email": {
                  "main": [
                    [
                      {
                        "node": "Remove Duplicates",
                        "type": "main",
                        "index": 0
                      }
                    ]
                  ]
                },
                "Remove Duplicates": {
                  "main": [
                    [
                      {
                        "node": "Respond to Webhook",
                        "type": "main",
                        "index": 0
                      }
                    ]
                  ]
                },
                "Get the website data": {
                  "main": [
                    [
                      {
                        "node": "Extract the emails found",
                        "type": "main",
                        "index": 0
                      }
                    ]
                  ]
                },
                "Extract the emails found": {
                  "main": [
                    [
                      {
                        "node": "Split Out",
                        "type": "main",
                        "index": 0
                      }
                    ]
                  ]
                }
              }
            }
          },
          "node_count": 10,
          "connection_count": 6,
          "extraction_time": 0.209119,
          "error": null
        },
        "layer3": {
          "success": true,
          "data": {
            "introduction": "How to scrap emails from websitesThis workflow shows how to quickly build an Email scraping API using n8n.Email marketing is at the core of most marketing strategies, be it content marketing, sales, etc. As such, being able to find contacts in bulk for your business on a large scale is key.There are available tools available in the market that can do this, but most are premium; why not build a custom one with n8n?UsageThe workflow gets the data from a website and performs an extraction based on the date around on the websiteCopy the webhook URL to your browserAdd a query parameter eg ?Website=https://mailsafi.com. This should give you a URL like this {{$n8nhostingurl/webhook/ea568868-5770-4b2a-8893-700b344c995e?Website=https://mailsafi.comClick on the URL and wait for the extracted email to be displayed.This will return the email address on the website, or if there is no email, the response will be \"workflow successfully executed.\"Make sure to use HTTP:// for your domainsOtherwise, you may get an error.",
            "overview": "",
            "tutorial_text": "How to scrap emails from websitesThis workflow shows how to quickly build an Email scraping API using n8n.Email marketing is at the core of most marketing strategies, be it content marketing, sales, etc. As such, being able to find contacts in bulk for your business on a large scale is key.There are available tools available in the market that can do this, but most are premium; why not build a custom one with n8n?UsageThe workflow gets the data from a website and performs an extraction based on the date around on the websiteCopy the webhook URL to your browserAdd a query parameter eg ?Website=https://mailsafi.com. This should give you a URL like this {{$n8nhostingurl/webhook/ea568868-5770-4b2a-8893-700b344c995e?Website=https://mailsafi.comClick on the URL and wait for the extracted email to be displayed.This will return the email address on the website, or if there is no email, the response will be \"workflow successfully executed.\"Make sure to use HTTP:// for your domainsOtherwise, you may get an error.",
            "tutorial_sections": [],
            "step_by_step": [],
            "best_practices": [],
            "common_pitfalls": [],
            "image_urls": [
              "https://n8n.io/nodes/http-request.svg",
              "https://gravatar.com/avatar/13b050fd63dc0c9242774c4b8769c4788df8b47268c1fb183d6f1da085b9e6e2?r=pg&d=retro&size=200",
              "https://n8n.io/nodes/airtable.svg",
              "https://n8n.io/nodes/webhook.svg",
              "https://n8n.io/nodes/google-sheets.svg",
              "https://n8n.io/nodes/merge.svg",
              "https://gravatar.com/avatar/e57785a112fbcca1ac70d537a9ed5c5a68be59f808ed8b36475bde0e2c8f384b?r=pg&d=retro&size=200",
              "https://gravatar.com/avatar/2b74c7f530e250439f5d752f2623ead4921fbb8aef56343c922b2873ef8a619f?r=pg&d=retro&size=200",
              "https://gravatar.com/avatar/b0a32f127a6ad690cd4ee808cb4d1b59d3b5e53410181d54f91d10c0027ebb43?r=pg&d=retro&size=200",
              "https://n8n.io/images/stars-footer.svg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/avatar_igordisco_9243b86232_cd9a5c94ce.jpg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/neutral_avatar_purple_fee36bffe3.PNG",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/avatar_anderoav_589989fc39_ceb1c71a0c.jpg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/avatar_maxim_poulsen_48f450887b_852d0439bc.jpeg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/Felix_Leber_f7a5b3c776_130aeca79d.jpeg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/avatar_Ironben_0a4b3e7d12_e35805265c.jpg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/Francois_lassl_d5cfb504c7_710c87121d.jpeg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/twitter_x_62a44e965e.svg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/github_e1f217d7a3_b9a271324f.svg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/discord_253947c90b_191e8f60fa.svg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/linkedin_d710e84d63_6ed0dc28aa.svg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/youtube_de4bdef50a_4b3a8b8aac.svg"
            ],
            "video_urls": [],
            "code_snippets": [],
            "conclusion": "",
            "troubleshooting": {
              "common_issues": [],
              "error_messages": []
            },
            "related_workflows": []
          },
          "errors": [],
          "extraction_time": 5.710128,
          "metadata": {
            "workflow_id": "2134",
            "url": "https://n8n.io/workflows/2134",
            "extracted_at": "2025-10-11T08:49:03.009762",
            "extractor_version": "1.0.0"
          }
        }
      },
      "multimodal": null,
      "transcripts": null,
      "validation": {
        "layer1": {
          "score": 80,
          "issues": [
            "Difficulty level not set",
            "No engagement metrics available"
          ],
          "valid": true,
          "layer": "layer1"
        },
        "layer2": {
          "score": 100,
          "issues": [],
          "valid": true,
          "layer": "layer2"
        },
        "layer3": {
          "score": 35,
          "issues": [
            "No tutorial sections extracted",
            "No images extracted",
            "Missing required fields: title, description, steps",
            "No step-by-step content extracted"
          ],
          "valid": false,
          "layer": "layer3"
        }
      },
      "quality": {
        "overall_score": 70.0,
        "classification": "Fair",
        "layer1_score": 80,
        "layer2_score": 100,
        "layer3_score": 35,
        "consistency_score": 100.0,
        "total_issues": 6
      },
      "extraction_time": 15.124444961547852,
      "errors": [],
      "timestamp": "2025-10-11T08:48:53.648621"
    },
    {
      "success": true,
      "workflow_id": "1993",
      "url": "https://n8n.io/workflows/1993",
      "layers": {
        "layer1": {
          "success": true,
          "workflow_id": "1993",
          "data": {
            "title": "Suspicious Login Detection",
            "description": "This n8n workflow is designed for security monitoring and incident response when suspicious login events are detected. It can be initiated either manually...",
            "author": "Igor Fediczko@igordisco",
            "use_case": "This n8n workflow is designed for security monitoring and incident response when suspicious login events are detected.",
            "primary_category": "Strictly necessary",
            "secondary_categories": [
              "Performance",
              "Targeting",
              "Functionality",
              "Strictly necessary cookies allow core website functionality such as user login and account management. The website cannot be used properly without strictly necessary cookies.",
              "Performance cookies are used to see how visitors use the website, eg. analytics cookies. Those cookies cannot be used to directly identify a certain visitor.",
              "Targeting cookies are used to identify visitors between different websites, eg. content partners, banner networks. Those cookies may be used by companies to build a profile of visitor interests or show relevant ads on other websites.",
              "Functionality cookies are used to remember visitor information on the website, eg. language, timezone, enhanced content."
            ],
            "node_tags": [
              "github147,222",
              "hiring"
            ],
            "general_tags": [
              "Targeting",
              "Performance",
              "Strictly necessary",
              "Functionality"
            ],
            "difficulty_level": "intermediate",
            "views": 0,
            "upvotes": 0,
            "created_date": "2025-10-11T08:49:02.507683",
            "updated_date": "2025-10-11T08:49:02.507683",
            "setup_instructions": "This n8n workflow is designed for security monitoring and incident response when suspicious login events are detected. It can be initiated either manually...",
            "prerequisites": [
              "token_v2",
              "or website it relates to",
              "{\n\t\tcontent: attr(label);\n\t\tfont-weight: bold;\n\t\twidth: 120px;\n\t\tmin-width: 120px;\n\t}",
              "visiting the said website",
              "__Secure-ROLLOUT_TOKEN"
            ],
            "estimated_setup_time": "4 minutes 59 sec",
            "industry": [
              "Strictly necessary"
            ]
          },
          "extraction_time": 9.142116069793701,
          "error": null
        },
        "layer2": {
          "success": true,
          "workflow_id": "1993",
          "data": {
            "id": 1993,
            "name": "Suspicious Login Detection",
            "workflow": {
              "id": "xQHiKDTkezDY5lFu",
              "meta": {
                "instanceId": "03e9d14e9196363fe7191ce21dc0bb17387a6e755dcc9acc4f5904752919dca8"
              },
              "name": "Suspicious_login_detection",
              "tags": [
                {
                  "id": "GCHVocImoXoEVnzP",
                  "name": "\ud83d\udee0\ufe0f In progress",
                  "createdAt": "2023-10-31T02:17:21.618Z",
                  "updatedAt": "2023-10-31T02:17:21.618Z"
                },
                {
                  "id": "QPJKatvLSxxtrE8U",
                  "name": "Secops",
                  "createdAt": "2023-10-31T02:15:11.396Z",
                  "updatedAt": "2023-10-31T02:15:11.396Z"
                },
                {
                  "id": "hF4M6DtfFqOn2HK2",
                  "name": "createdBy:Milorad",
                  "createdAt": "2023-10-31T02:20:20.366Z",
                  "updatedAt": "2023-10-31T02:20:20.366Z"
                }
              ],
              "nodes": [
                {
                  "id": "a95e464a-7451-4737-9db8-993a6568595b",
                  "name": "Extract relevant data",
                  "type": "n8n-nodes-base.set",
                  "position": [
                    -260,
                    700
                  ],
                  "parameters": {
                    "values": {
                      "string": [
                        {
                          "name": "ip",
                          "value": "={{ $json.body.context.ip }}"
                        },
                        {
                          "name": "userAgent",
                          "value": "={{ $json.body.context.userAgent }}"
                        },
                        {
                          "name": "timestamp",
                          "value": "={{ $json.body.originalTimestamp }}"
                        },
                        {
                          "name": "url",
                          "value": "={{ $json.body.context.page.url }}"
                        },
                        {
                          "name": "userId",
                          "value": "={{ $json.body.userId }}"
                        }
                      ]
                    },
                    "options": {},
                    "keepOnlySet": true
                  },
                  "typeVersion": 2
                },
                {
                  "id": "d7dea680-14f3-4ffd-bfaf-f928b69d801d",
                  "name": "New /login event",
                  "type": "n8n-nodes-base.webhook",
                  "disabled": true,
                  "position": [
                    -740,
                    700
                  ],
                  "webhookId": "705ca4c4-0a38-4ef8-9de9-abc8b3686dc6",
                  "parameters": {
                    "path": "705ca4c4-0a38-4ef8-9de9-abc8b3686dc6",
                    "options": {},
                    "httpMethod": "POST"
                  },
                  "typeVersion": 1
                },
                {
                  "id": "bd75aad9-2d24-4083-823d-bc789fb7ef07",
                  "name": "Unknown threat?",
                  "type": "n8n-nodes-base.if",
                  "position": [
                    720,
                    1240
                  ],
                  "parameters": {
                    "conditions": {
                      "boolean": [
                        {
                          "value1": "={{ $json.noise }}"
                        },
                        {
                          "value1": "={{ $json.riot }}"
                        }
                      ]
                    }
                  },
                  "typeVersion": 1
                },
                {
                  "id": "d0845980-3b8c-4659-95a1-82e925867f28",
                  "name": "Get last 10 logins from the same user",
                  "type": "n8n-nodes-base.postgres",
                  "disabled": true,
                  "position": [
                    960,
                    1220
                  ],
                  "parameters": {
                    "query": "SELECT * FROM staging_n8n_cloud_frontend.user_signed_in WHERE user_id='{{ $('Extract relevant data').item.json.userId }}' ORDER BY received_at DESC LIMIT 10;",
                    "options": {},
                    "operation": "executeQuery"
                  },
                  "credentials": {
                    "postgres": {
                      "id": "aP9LLonHicGm2A7j",
                      "name": "n8n product data"
                    }
                  },
                  "typeVersion": 2.2
                },
                {
                  "id": "90e859b2-aa64-48e7-a8fe-696e3b7216f1",
                  "name": "Query IP API1",
                  "type": "n8n-nodes-base.httpRequest",
                  "position": [
                    1240,
                    1340
                  ],
                  "parameters": {
                    "url": "=http://ip-api.com/json/{{ $json.context_ip }}",
                    "options": {}
                  },
                  "typeVersion": 4.1
                },
                {
                  "id": "3a944973-132a-4272-97e3-42528eb4c0fc",
                  "name": "New location?",
                  "type": "n8n-nodes-base.if",
                  "position": [
                    1440,
                    1340
                  ],
                  "parameters": {
                    "conditions": {
                      "string": [
                        {
                          "value1": "={{ $json.city }}",
                          "value2": "={{ $('Merge').item.json.city }}",
                          "operation": "notEqual"
                        }
                      ]
                    }
                  },
                  "typeVersion": 1
                },
                {
                  "id": "fb4d5d07-58ae-4b17-a389-29e7fbe2caa2",
                  "name": "Parse User Agent",
                  "type": "n8n-nodes-base.httpRequest",
                  "position": [
                    1260,
                    1640
                  ],
                  "parameters": {
                    "url": "https://api.userparser.com/1.1/detect",
                    "options": {},
                    "sendQuery": true,
                    "authentication": "genericCredentialType",
                    "genericAuthType": "httpQueryAuth",
                    "queryParameters": {
                      "parameters": [
                        {
                          "name": "ua",
                          "value": "={{ $json.context_user_agent }}"
                        }
                      ]
                    }
                  },
                  "credentials": {
                    "httpQueryAuth": {
                      "id": "33f1NrH1bLdXCGyw",
                      "name": "n8n Userparser API Key"
                    }
                  },
                  "typeVersion": 4.1
                },
                {
                  "id": "56442924-914c-461d-b4d7-f08192e1b53b",
                  "name": "Merge",
                  "type": "n8n-nodes-base.merge",
                  "position": [
                    295,
                    1502
                  ],
                  "parameters": {
                    "mode": "combine",
                    "options": {},
                    "combinationMode": "multiplex"
                  },
                  "typeVersion": 2.1
                },
                {
                  "id": "2b36f782-029d-41de-8823-6c083f3c305a",
                  "name": "New Device/Browser?",
                  "type": "n8n-nodes-base.if",
                  "position": [
                    1460,
                    1640
                  ],
                  "parameters": {
                    "conditions": {
                      "string": [
                        {
                          "value1": "={{ $json.browser.name }}",
                          "value2": "={{ $('Complete login info').first().json.browser.name }}",
                          "operation": "notEqual"
                        },
                        {
                          "value1": "={{ $json.operatingSystem.name }}",
                          "value2": "={{ $('Complete login info').first().json.operatingSystem.name }}",
                          "operation": "notEqual"
                        },
                        {
                          "value1": "={{ $json.device.type }}",
                          "value2": "={{ $('Complete login info').first().json.device.type }}",
                          "operation": "notEqual"
                        }
                      ]
                    },
                    "combineOperation": "any"
                  },
                  "typeVersion": 1
                },
                {
                  "id": "612c3704-6ea1-4978-ae84-17326f459c25",
                  "name": "Complete login info",
                  "type": "n8n-nodes-base.merge",
                  "position": [
                    540,
                    1240
                  ],
                  "parameters": {
                    "mode": "combine",
                    "options": {},
                    "combinationMode": "multiplex"
                  },
                  "typeVersion": 2.1
                },
                {
                  "id": "9c097c31-a86d-45fe-92c7-14a58eae87b4",
                  "name": "Query user by ID",
                  "type": "n8n-nodes-base.postgres",
                  "disabled": true,
                  "position": [
                    2020,
                    1340
                  ],
                  "parameters": {
                    "query": "SELECT * FROM staging_n8n_cloud_frontend.users WHERE id='{{ $('Extract relevant data').item.json.userId }}'",
                    "options": {},
                    "operation": "executeQuery"
                  },
                  "credentials": {
                    "postgres": {
                      "id": "aP9LLonHicGm2A7j",
                      "name": "n8n product data"
                    }
                  },
                  "typeVersion": 2.2
                },
                {
                  "id": "cd6fb55b-b8f6-4778-a62a-34be42e2660d",
                  "name": "New Location",
                  "type": "n8n-nodes-base.noOp",
                  "position": [
                    1660,
                    1280
                  ],
                  "parameters": {},
                  "executeOnce": true,
                  "typeVersion": 1
                },
                {
                  "id": "7070a43a-d588-4bbb-b8d0-50e8eff171df",
                  "name": "New Device/Browser",
                  "type": "n8n-nodes-base.noOp",
                  "position": [
                    1674,
                    1625
                  ],
                  "parameters": {},
                  "executeOnce": true,
                  "typeVersion": 1
                },
                {
                  "id": "dca6d5ed-d92f-49a6-9910-c9194e696e70",
                  "name": "User has email?",
                  "type": "n8n-nodes-base.if",
                  "position": [
                    2360,
                    1360
                  ],
                  "parameters": {
                    "conditions": {
                      "string": [
                        {
                          "value1": "={{ $json.email }}",
                          "operation": "isNotEmpty"
                        }
                      ]
                    }
                  },
                  "typeVersion": 1
                },
                {
                  "id": "14cd3d37-5c00-4750-8ad2-f78fce66019c",
                  "name": "HTML",
                  "type": "n8n-nodes-base.html",
                  "position": [
                    2580,
                    1313
                  ],
                  "parameters": {
                    "html": "<p>\n  Hello {{ $json.first_name || $json.username }},\n</p>\n<p>\n  We've detected a recent login to your n8n account from a new device or location. Here are the details:\n</p>\n<p>\n  <ul>\n    <li><b>Username:</b> {{ $json.username }}</li>\n    <li><b>Date & Time:</b> {{ $('Extract relevant data').item.json.timestamp }}</li>\n    <li><b>Location:</b> {{ $('Complete login info').item.json.city }}, {{ $('Complete login info').item.json.country }}</li>\n    <li><b>Device:</b> {{ $('Complete login info').item.json.operatingSystem.name }} ({{ $('Complete login info').item.json.device.type }})</li>\n  </ul>\n</p>\n<p>\n  If this was you, you can disregard this email. We just wanted to make sure it was you who logged in from a new device or location.\n</p>\n  If this wasn't you, we recommend resetting your password right away.\n</p>\n\n<style>\n  p {\n    font-family: sans-serif;\n  }\n</style>"
                  },
                  "typeVersion": 1
                },
                {
                  "id": "e99f7779-9b84-4f8c-80a0-b34c3c9df5b4",
                  "name": "Inform user",
                  "type": "n8n-nodes-base.gmail",
                  "disabled": true,
                  "position": [
                    2740,
                    1313
                  ],
                  "parameters": {
                    "sendTo": "={{ $('User has email?').item.json.email }}",
                    "message": "={{ $json.html }}",
                    "options": {},
                    "subject": "Important: Usual Login Attempt Detected"
                  },
                  "credentials": {
                    "gmailOAuth2": {
                      "id": "162",
                      "name": "Gmail - milorad@n8n.io"
                    }
                  },
                  "typeVersion": 2
                },
                {
                  "id": "b280b287-7b20-4dcb-9c0a-a3e5c3a60771",
                  "name": "noise?",
                  "type": "n8n-nodes-base.if",
                  "position": [
                    340,
                    220
                  ],
                  "parameters": {
                    "conditions": {
                      "boolean": [
                        {
                          "value1": "={{ $json.noise }}",
                          "value2": true
                        }
                      ]
                    }
                  },
                  "typeVersion": 1
                },
                {
                  "id": "5be949da-f04a-44f9-9cf0-5e221f9d27e8",
                  "name": "Slack",
                  "type": "n8n-nodes-base.slack",
                  "disabled": true,
                  "position": [
                    1560,
                    500
                  ],
                  "parameters": {
                    "text": "=Suspicious login attempt detected:\n  - Priority: {{ $json.priority }}\n  - User: {{ $('Extract relevant data').item.json[\"userId\"] }}\n  - IP: {{ $('Extract relevant data').item.json[\"ip\"] }}\n  - Timestamp: {{ $('Extract relevant data').item.json[\"timestamp\"] }}\n  - User Agent: {{ $('Extract relevant data').item.json[\"userAgent\"] }}\nGreyNoise report: https://viz.greynoise.io/ip/{{ $('Extract relevant data').item.json[\"ip\"] }}",
                    "select": "channel",
                    "channelId": {
                      "__rl": true,
                      "mode": "name",
                      "value": "#slack-message-test"
                    },
                    "otherOptions": {}
                  },
                  "credentials": {
                    "slackApi": {
                      "id": "114",
                      "name": "n8n Slack"
                    }
                  },
                  "typeVersion": 2
                },
                {
                  "id": "241e492c-fb9a-4b93-bd76-4167cb67f212",
                  "name": "Check trust level",
                  "type": "n8n-nodes-base.switch",
                  "position": [
                    780,
                    360
                  ],
                  "parameters": {
                    "rules": {
                      "rules": [
                        {
                          "output": 3,
                          "value2": 1,
                          "operation": "equal"
                        },
                        {
                          "output": 2,
                          "value2": 2,
                          "operation": "equal"
                        }
                      ]
                    },
                    "value1": "={{ $json.trust_level }}",
                    "fallbackOutput": 1
                  },
                  "typeVersion": 1
                },
                {
                  "id": "f99741d0-161e-49c6-8e41-d61b080e977d",
                  "name": "Check classification",
                  "type": "n8n-nodes-base.switch",
                  "position": [
                    780,
                    200
                  ],
                  "parameters": {
                    "rules": {
                      "rules": [
                        {
                          "value2": "malicious"
                        },
                        {
                          "output": 2,
                          "value2": "benign"
                        },
                        {
                          "output": 1,
                          "value2": "unknown"
                        }
                      ]
                    },
                    "value1": "={{ $json.classification }}",
                    "dataType": "string"
                  },
                  "typeVersion": 1
                },
                {
                  "id": "594857f6-713f-496e-8257-b74acf5d1282",
                  "name": "Sticky Note2",
                  "type": "n8n-nodes-base.stickyNote",
                  "position": [
                    0.10300782209924364,
                    -502.1236093865191
                  ],
                  "parameters": {
                    "width": 1443.8164871528645,
                    "height": 1185.151137495839,
                    "content": "![greynoise](https://i.imgur.com/4vSwTkY.png)\n## \ud83d\udea6 Advanced Threat Prioritization with GreyNoise Data\n\nIn this section of the workflow, the integration of GreyNoise data, particularly in the `GreyNoise` node, plays a pivotal role in refining the threat prioritization process. This node's interaction with GreyNoise ensures that each alert is given an appropriate level of attention, based on the nature of the IP address involved.\n\n-   **GreyNoise Analysis for Inbound Threats:** When the `GreyNoise` node identifies an IP address, it queries GreyNoise, considering both NOISE and RIOT datasets ([More here](https://docs.greynoise.io/docs/riot-data)). The response from this node guides the subsequent steps:\n    -   **High Priority for Unknown IPs:** The `Check trust level` and `Check classification` nodes act here. If GreyNoise has no data on the IP (noise:false, riot:false), the priority is set high in the `\ud83d\udd34 Priority: HIGH` node. This indicates a potential targeted attack, requiring immediate analyst review.\n    -   **Low to Medium Priority for Common Business Services:** IPs identified as part of common business services (riot:true), depending on their trust level and operation status, are assigned low to medium priority by the `\ud83d\udfe1 Priority: MEDIUM` and `\ud83d\udfe2 Priority: LOW` nodes. This reflects a lower risk of malicious activity.\n-   **Classification-Based Prioritization:** The workflow also considers the GreyNoise classification of the IP (malicious, benign, unknown) in the `Check classification` node:\n    -   **Malicious IPs:** Medium-high priority, suggesting opportunistic but potentially harmful activity, set in the `\ud83d\udd34 Priority: HIGH` node.\n    -   **Benign IPs:** Low priority, as these are usually harmless scans by known actors, designated in the `\ud83d\udfe2 Priority: LOW` node.\n    -   **Unknown IPs:** Low-medium priority, indicating possibly innocuous but unverified activity, managed by the `\ud83d\udfe1 Priority: MEDIUM` node.\n-   **Additional Context for Outbound Threats:** For outbound connections, the workflow prioritizes alerts based on whether the IP is a known service provider or a known device scanning the internet, as interpreted by the `GreyNoise` node. High priority is assigned to outbound connections to scanning devices in the `\ud83d\udd34 Priority: HIGH` node, indicating potentially unwanted behavior.\n\n\nThis approach, leveraging GreyNoise's advanced data analytics, showcases n8n's capability to deliver sophisticated cybersecurity solutions. By integrating this intelligent prioritization mechanism, the workflow ensures that your security team focuses on the most pressing threats first, enhancing overall security posture.\n\n### Authentication - No Free Tier Available\n\nTo set your API key for GreyNoise, open the `GreyNoise` node, and add a new authentication credential. Choose `Generic Credential Type` then `Header Auth`. Lastly, under `Credential for Header Auth` set the name to `key` and value to your `api key`."
                  },
                  "typeVersion": 1
                },
                {
                  "id": "ee90c638-882d-4a2e-8164-adaf4ec386be",
                  "name": "Sticky Note3",
                  "type": "n8n-nodes-base.stickyNote",
                  "position": [
                    1450.4432083435722,
                    -139
                  ],
                  "parameters": {
                    "width": 560.0194854548777,
                    "height": 818.6128004838087,
                    "content": "![Slack](https://i.imgur.com/iKyMV0N.png)\n## \ud83d\udce2 Slack Notification for Alert Dissemination\n\nThe `Slack` node plays a crucial role in alert communication. It ensures that once a threat is identified and prioritized, the relevant information is quickly disseminated to your security team via Slack.\n\n-   **Timely Alert Notifications:** The `Slack` node is configured to send detailed alerts to a specified Slack channel. These alerts include critical information such as the priority level, user ID, IP address, timestamp, and user agent of the suspicious login attempt. It ensures that your team is promptly informed about potential threats, allowing for quick action to mitigate risks.\n-   **Integration of Data from Previous Nodes:** This node adeptly utilizes data extracted and processed by earlier nodes like `Extract relevant data`. It enriches the Slack message with this detailed information, providing a comprehensive overview of the threat.\n-   **Direct Link to GreyNoise Analysis:** Additionally, the Slack message includes a direct link to the GreyNoise visualization for the IP in question. This link, crafted using data from the `Extract relevant data` node, allows team members to quickly access in-depth information about the IP, facilitating a faster and more informed response.\n\n\nThis approach demonstrates n8n's ability to integrate seamlessly with communication tools like Slack, ensuring that cybersecurity teams are always informed and ready to respond to threats efficiently."
                  },
                  "typeVersion": 1
                },
                {
                  "id": "b617da5f-f7e0-4c6d-8080-c1d4b2e2ed53",
                  "name": "Sticky Note4",
                  "type": "n8n-nodes-base.stickyNote",
                  "position": [
                    477,
                    690
                  ],
                  "parameters": {
                    "width": 696.8700988949365,
                    "height": 894.3487921624444,
                    "content": "![postgre](https://i.imgur.com/OEqO3MQ.png)\n## \ud83d\udd04  Synthesizing Data for Comprehensive Analysis\nThe `Complete login info` node serves as a crucial juncture, integrating data from multiple sources for a detailed analysis of each login attempt.\n\n-   **Combining Multiple Data Streams:** The `Complete login info` node merges information from the `GreyNoise`, `IP API`, and `UserParser` nodes. This process creates a comprehensive dataset by combining threat intelligence from GreyNoise, geolocation details from IP-API, and user agent information from UserParser.\n-   **Enhanced Context for Security Analysis:** By amalgamating data from these varied sources, the workflow gains a multi-faceted view of each login attempt. This enriched context is essential for identifying potential security threats with higher precision.\n-   **Efficient Workflow Structure:** The integration of these diverse data points exemplifies n8n's efficiency in managing complex workflows. By funneling various streams of information into a single node, the workflow ensures that all relevant data is considered in unison during the analysis phase.\n-   **Informing Subsequent Workflow Steps:** The dataset prepared by the `Complete login info` node lays the groundwork for further steps in the workflow. It provides the necessary context for nodes that follow, such as the `Unknown threat?` and `Get last 10 logins from the same user` nodes, to make informed decisions based on a holistic view of the login event."
                  },
                  "typeVersion": 1
                },
                {
                  "id": "1e106297-b7db-4b2d-b08c-a35880782c8c",
                  "name": "Sticky Note5",
                  "type": "n8n-nodes-base.stickyNote",
                  "position": [
                    1185,
                    691
                  ],
                  "parameters": {
                    "width": 663.6738255654103,
                    "height": 892.4220900613532,
                    "content": "![ipapi](https://i.imgur.com/OMhn14b.png)\n## \ud83d\udccd Assessing Login Location Anomalies\n\nThe nodes following `Get last 10 logins from the same user` are dedicated to analyzing login location patterns to identify any anomalies.\n\n-   **Fetching Historical Login Data:** The `Get last 10 logins from the same user` node queries a Postgres database to retrieve the last 10 login records for a user. This data forms the baseline for identifying unusual login locations.\n\n-   **Comparing Current and Historical Geolocation Data:** The `Query IP API1` node fetches the geolocation data for the current login attempt. This data is then compared with historical login locations in the `New location?` node.\n\n-   **Identifying Location Anomalies:** The `New location?` node checks if the city from the current login is different from the cities in the user's login history. This comparison is crucial to detect any unusual login patterns, such as logins from new, potentially suspicious locations.\n\n-   **Routing Based on Location Consistency:** Depending on whether the current login location matches historical patterns, the workflow branches to either the `New Location` or `Known Location` nodes. The `New Location` node triggers when a login from a new city is detected, indicating a potential security risk. Conversely, the `Known Location` node is activated when the login location is consistent with historical data, suggesting a regular login pattern."
                  },
                  "typeVersion": 1
                },
                {
                  "id": "3e091a54-2fdc-491c-a168-0fb4fb704fd8",
                  "name": "Sticky Note9",
                  "type": "n8n-nodes-base.stickyNote",
                  "position": [
                    2310.5877845770297,
                    691.4637444823477
                  ],
                  "parameters": {
                    "width": 629.1148167417672,
                    "height": 841.097003209987,
                    "content": "![gmail](https://i.imgur.com/f6f6my0.png)\n## \ud83d\udce7 Notifying Users About Unusual Login Attempts\n\nIn the final section of the \"Suspicious Login Detection\" workflow, the nodes `User has email?`, `HTML`, and `Inform user` work together to notify users about unusual login attempts, enhancing the security and responsiveness of the system.\n\n-   **Verifying Email Availability:** After fetching user details with `Query user by ID`, the `User has email?` node checks if the user has an email address on record. This verification is crucial to ensure that the notification process proceeds only for users with valid email addresses.\n\n-   **Crafting the Notification Message:** The `HTML` node is responsible for creating the email content. It generates a well-formatted HTML message informing the user of a recent login from a new device or location. The message includes details like username, timestamp, location, and device information, providing the user with specific insights into the login activity.\n\n-   **Sending the Email Alert:** Finally, the `Inform user` node sends out the email notification. This node uses Gmail to dispatch the message crafted by the `HTML` node to the user's email address obtained in the previous steps.\n\n-   **Enhancing User Awareness and Security:** By notifying users of unusual login activities, the workflow not only enhances security but also empowers users to take immediate action if the login was not authorized. This could include steps like changing their password or contacting the security team."
                  },
                  "typeVersion": 1
                },
                {
                  "id": "f9c6f726-ce2f-448b-a392-b86e0507ce13",
                  "name": "Sticky Note10",
                  "type": "n8n-nodes-base.stickyNote",
                  "position": [
                    1858,
                    691.3527917931716
                  ],
                  "parameters": {
                    "width": 442.82773054232473,
                    "height": 839.4355618292594,
                    "content": "![postgre](https://i.imgur.com/OEqO3MQ.png)\n## \ud83e\udde9 Querying User Details for Enhanced Context\n\nThe `Query user by ID` node plays a key role in gathering additional user-specific information to provide enhanced context for the security analysis.\n\n-   **User Information Retrieval:** The `Query user by ID` node interacts with a Postgres database to fetch detailed information about the user whose ID is associated with the current login attempt. This information is crucial for understanding the user's profile and access patterns.\n\n-   **Integrating with Location and Device Analysis:** This node is triggered following alerts from either the `New Location` or `New Device/Browser` nodes. These alerts indicate that the current login attempt is potentially suspicious due to a new location or device/browser being used.\n\n-   **Enriching Security Insight:** By querying detailed user data, the workflow gains a deeper understanding of the user's normal access patterns and profiles. This information can be instrumental in differentiating between legitimate user behavior and potential unauthorized access."
                  },
                  "typeVersion": 1
                },
                {
                  "id": "6fd1a35c-5abc-4655-b5b5-836b49129d24",
                  "name": "riot?",
                  "type": "n8n-nodes-base.if",
                  "position": [
                    520,
                    380
                  ],
                  "parameters": {
                    "conditions": {
                      "boolean": [
                        {
                          "value1": "={{ $('GreyNoise').item.json.riot }}",
                          "value2": true
                        }
                      ]
                    }
                  },
                  "typeVersion": 1
                },
                {
                  "id": "123fa821-4eb0-42b9-99c9-a0157f7ffac8",
                  "name": "\ud83d\udd34 Priority: HIGH",
                  "type": "n8n-nodes-base.set",
                  "position": [
                    1180,
                    220
                  ],
                  "parameters": {
                    "values": {
                      "string": [
                        {
                          "name": "priority",
                          "value": "\ud83d\udd34 High"
                        }
                      ]
                    },
                    "options": {},
                    "keepOnlySet": true
                  },
                  "typeVersion": 2
                },
                {
                  "id": "459d0152-8184-4031-8f70-6c100f2bc6c3",
                  "name": "\ud83d\udfe1 Priority: MEDIUM",
                  "type": "n8n-nodes-base.set",
                  "position": [
                    1180,
                    360
                  ],
                  "parameters": {
                    "values": {
                      "string": [
                        {
                          "name": "priority",
                          "value": "\ud83d\udfe1 Medium"
                        }
                      ]
                    },
                    "options": {}
                  },
                  "typeVersion": 2
                },
                {
                  "id": "58427db9-8ef7-4916-8564-727bd587401d",
                  "name": "\ud83d\udfe2 Priority: LOW",
                  "type": "n8n-nodes-base.set",
                  "position": [
                    1180,
                    500
                  ],
                  "parameters": {
                    "values": {
                      "string": [
                        {
                          "name": "priority",
                          "value": "\ud83d\udfe2 Low"
                        }
                      ]
                    },
                    "options": {}
                  },
                  "typeVersion": 2
                },
                {
                  "id": "fd1e93a2-267e-4d5e-9724-6a4bb46b94b2",
                  "name": "GreyNoise",
                  "type": "n8n-nodes-base.httpRequest",
                  "position": [
                    280,
                    440
                  ],
                  "parameters": {
                    "url": "=https://api.greynoise.io/v3/community/{{ $json.ip }}",
                    "options": {
                      "response": {
                        "response": {
                          "neverError": true
                        }
                      }
                    },
                    "authentication": "genericCredentialType",
                    "genericAuthType": "httpHeaderAuth"
                  },
                  "credentials": {
                    "httpHeaderAuth": {
                      "id": "wwwfQfxzoBK7NH2a",
                      "name": "n8n greynoise api key"
                    }
                  },
                  "typeVersion": 4.1
                },
                {
                  "id": "032b9558-a19b-4790-8593-8949ab2606d4",
                  "name": "IP API",
                  "type": "n8n-nodes-base.httpRequest",
                  "position": [
                    40,
                    1280
                  ],
                  "parameters": {
                    "url": "=http://ip-api.com/json/{{ $json.ip }}",
                    "options": {}
                  },
                  "typeVersion": 4.1
                },
                {
                  "id": "6cff0db9-27c3-4c4b-9af0-e8a8d55ad107",
                  "name": "UserParser",
                  "type": "n8n-nodes-base.httpRequest",
                  "position": [
                    80,
                    1522
                  ],
                  "parameters": {
                    "url": "https://api.userparser.com/1.1/detect",
                    "options": {},
                    "sendQuery": true,
                    "authentication": "genericCredentialType",
                    "genericAuthType": "httpQueryAuth",
                    "queryParameters": {
                      "parameters": [
                        {
                          "name": "ua",
                          "value": "={{ $json.userAgent }}"
                        }
                      ]
                    }
                  },
                  "credentials": {
                    "httpQueryAuth": {
                      "id": "33f1NrH1bLdXCGyw",
                      "name": "n8n Userparser API Key"
                    }
                  },
                  "typeVersion": 4.1
                },
                {
                  "id": "65c7a039-5257-495d-86c2-18a44627ebe1",
                  "name": "When clicking \"Execute Workflow\"",
                  "type": "n8n-nodes-base.manualTrigger",
                  "position": [
                    -740,
                    880
                  ],
                  "parameters": {},
                  "typeVersion": 1
                },
                {
                  "id": "a038a10a-baaf-4649-9d38-4fa661dfc4ce",
                  "name": "Example event",
                  "type": "n8n-nodes-base.code",
                  "position": [
                    -480,
                    880
                  ],
                  "parameters": {
                    "jsCode": "return {\n  json:\n  {\n    \"headers\": {\n      \"host\": \"internal.users.n8n.cloud\",\n      \"user-agent\": \"PostmanRuntime/7.32.3\",\n      \"content-length\": \"857\",\n      \"accept\": \"*/*\",\n      \"accept-encoding\": \"gzip, deflate, br\",\n      \"content-type\": \"application/json\",\n      \"postman-token\": \"e10e747f-0668-4238-9a3d-148b2c8591da\",\n      \"x-forwarded-for\": \"10.255.0.2\",\n      \"x-forwarded-host\": \"internal.users.n8n.cloud\",\n      \"x-forwarded-port\": \"443\",\n      \"x-forwarded-proto\": \"https\",\n      \"x-forwarded-server\": \"e591fa1c2d01\",\n      \"x-real-ip\": \"10.255.0.2\"\n    },\n    \"params\": {},\n    \"query\": {},\n    \"body\": {\n      \"anonymousId\": \"b4191c58-7d64-4c93-8bb4-479c3c95d283\",\n      \"context\": {\n        \"ip\": \"2.204.248.108\",\n        \"library\": {\n          \"name\": \"analytics.js\",\n          \"version\": \"next-1.53.0\"\n        },\n        \"locale\": \"en-US\",\n        \"page\": {\n          \"path\": \"/login\",\n          \"referrer\": \"https://github.com/\",\n          \"search\": \"\",\n          \"title\": \"n8n.cloud\",\n          \"url\": \"https://stage-app.n8n.cloud/login\"\n        },\n        \"userAgent\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:109.0) Gecko/20100101 Firefox/114.0\"\n      },\n      \"event\": \"User signed in\",\n      \"integrations\": {},\n      \"messageId\": \"ajs-next-a14f5b6e9860c7318a27f1ac05b3182d\",\n      \"originalTimestamp\": \"2023-06-28T11:26:46.302Z\",\n      \"properties\": {},\n      \"receivedAt\": \"2023-06-28T11:26:46.550Z\",\n      \"sentAt\": \"2023-06-28T11:26:46.313Z\",\n      \"timestamp\": \"2023-06-28T11:26:46.539Z\",\n      \"type\": \"track\",\n      \"userId\": \"staging-2055\"\n    }\n  }\n}"
                  },
                  "typeVersion": 2
                },
                {
                  "id": "700a08d8-09ce-486c-bcfb-07d15f268d08",
                  "name": "Sticky Note7",
                  "type": "n8n-nodes-base.stickyNote",
                  "position": [
                    -803,
                    -83
                  ],
                  "parameters": {
                    "width": 794.5711626683587,
                    "height": 1175.5321499586535,
                    "content": "![webhook](https://i.imgur.com/D6SP9P0.png)\n## Workflow Overview\n\nExperience enhanced cybersecurity with the `Suspicious Login Detection` workflow in n8n, your go-to solution for real-time monitoring and rapid response to suspicious login activities. This workflow is versatile, with both manual and automated webhook triggers to suit your testing and operational needs.\n\nThis [this GreyNoise guide](https://docs.greynoise.io/docs/applying-greynoise-data-to-your-analysis) was used to design the architecture of this workflow and can serve as a guide for making your own version of this workflow.\n\nKey features include:\n\n- Data Extraction: Seamlessly extracts crucial data like IP addresses and user IDs from login events.\n- Triple-Threat Analysis: Splits into three paths for thorough scrutiny, using `GreyNoise` for IP trust assessment, `IP-API` for geolocation insights, and `UserParser` for user agent details.\n- Prioritized Alerts: Assigns alert priorities and swiftly notifies via `Slack`, ensuring immediate attention to high-risk activities.\n- In-depth Investigation: Cross-references login history for anomalies and flags potential threats, keeping your security team a step ahead.\n\n\nEasy to set up and adaptable, this n8n workflow is a powerhouse tool for safeguarding your digital environment. \n\n## \u25b6\ufe0fInitial Trigger: Detecting Suspicious Logins\n\nThe initial trigger of this workflow is the detection of new login events. This is achieved through a combination of a webhook (`New /login event` node), set to trigger upon a new /login event, and a manual trigger (`When clicking \"Execute Workflow\"` node) for testing purposes. The webhook is configured to receive data from login events, capturing vital information such as IP addresses and user details.\n\nThis setup is crucial for real-time monitoring of login activities. As soon as a login event occurs, the workflow springs into action, extracting and processing the relevant data using the `Extract relevant data` node. "
                  },
                  "typeVersion": 1
                },
                {
                  "id": "ff6bbb3c-1c14-4e94-bfae-58e8cbb098c4",
                  "name": "Sticky Note11",
                  "type": "n8n-nodes-base.stickyNote",
                  "position": [
                    0.113308604309168,
                    690
                  ],
                  "parameters": {
                    "width": 469.4801859287644,
                    "height": 736.6018800373852,
                    "content": "![ipapi](https://i.imgur.com/OMhn14b.png)\n## \ud83c\udf10 IP Geolocation with IP-API\nThe `IP API` node in the \"Suspicious Login Detection\" workflow adds crucial geolocation context to login events. It queries IP-API for geographical data on the IP address extracted earlier.\n\n-   **Geographical Insight:** This node provides geographical details like country, region, and city, helping to identify unusual login locations that might signal a security risk.\n-   **Enhanced Security Analysis:** The geographical data aids in assessing the legitimacy of login attempts, adding a valuable layer to the security analysis.\n\n### Authentication - Free Tier Available (45 requests/min)\nThis endpoint is limited to `45 requests per minute from an IP address`.\n\nIf you go over the limit your requests will be throttled `(HTTP 429)` until your rate limit window is reset. If you constantly go over the limit your IP address will be banned for 1 hour.\n\nNo authentication needed, [Click here to view documentation.](https://ip-api.com/docs)"
                  },
                  "typeVersion": 1
                },
                {
                  "id": "57adbcf5-f927-4bdb-b863-bcff97be0ace",
                  "name": "Sticky Note12",
                  "type": "n8n-nodes-base.stickyNote",
                  "position": [
                    0,
                    1435
                  ],
                  "parameters": {
                    "width": 470.4372486447854,
                    "height": 1044.866146557656,
                    "content": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n![userparser](https://i.imgur.com/IxvDyZB.png)\n## \ud83d\udd04 Merging Geolocation and User Agent Data\n\nIn the \"Suspicious Login Detection\" workflow, the `Merge` node plays a pivotal role in synthesizing information from the `IP API` and `UserParser` nodes.\n\n-   **Data Integration:** The `Merge` node combines data from two key sources: geolocation details from the `IP API` node and user agent information from the `UserParser` node. This integration offers a comprehensive view of each login event.\n\n-   **Comprehensive Analysis:** By merging geolocation and user agent data, the workflow gains a fuller understanding of the context behind each login attempt, crucial for accurately assessing security risks.\n\n-   **Efficient Workflow Design:** The use of the `Merge` node demonstrates n8n's efficient handling of diverse data streams, ensuring that all relevant information is brought together for a cohesive analysis.\n\n\n### Authentication - Free Tier Available (10000 calls / month)\nThis endpoint is limited to `500 calls / day`.\n\nTo set your API key for UserParser, open the `UserParser HTTP Request` node, and add a new authentication credential. Choose `Generic Credential Type` then `Query Auth`. Lastly, under `Credential for Query Auth` set the name to `api_key` and value to your `api key`.\n\n[Click here to view documentation.](https://www.userparser.com/docs/user-agent-and-geoip-lookup-api-v1.1)"
                  },
                  "typeVersion": 1
                },
                {
                  "id": "44830be0-428a-492e-97f7-66289fac6231",
                  "name": "Sticky Note13",
                  "type": "n8n-nodes-base.stickyNote",
                  "position": [
                    1184,
                    1590
                  ],
                  "parameters": {
                    "width": 659.8254746666762,
                    "height": 845.1421530016269,
                    "content": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n![userparser](https://i.imgur.com/IxvDyZB.png)\n## \ud83d\udcf1 Identifying Device and Browser Anomalies\nthe `Parse User Agent` and `New Device/Browser?` nodes focus on detecting anomalies in device and browser usage for login events.\n\n-   **Parsing User Agent Data:** The `Parse User Agent` node uses the UserParser API to analyze the user agent string from the current login attempt. This node extracts detailed information about the browser, operating system, and device type used for the login, offering crucial insights into the login environment.\n\n-   **Comparing with Historical Data:** After parsing the user agent data, the workflow proceeds to the `New Device/Browser?` node. This node compares the current login's device and browser details against the user's historical data (retrieved by the `Get last 10 logins from the same user` node) to check for any discrepancies.\n\n-   **Detecting New Device or Browser Use:** The `New Device/Browser?` node checks if there's a change in the browser name, operating system, or device type. A change might indicate that the current login is being attempted from a new device or browser, which could be a sign of unauthorized access.\n\n-   **Routing Based on Device and Browser Consistency:** The workflow bifurcates based on this analysis. If a new device or browser is detected, the flow moves to the `New Device/Browser` node, suggesting potential security risks. Conversely, if the device and browser match historical patterns, the `Old Device/Browser` node is activated, indicating a routine login."
                  },
                  "typeVersion": 1
                },
                {
                  "id": "e0bcc621-ff1f-47ca-a63a-f1af5c521c9a",
                  "name": "Known, Do Nothing",
                  "type": "n8n-nodes-base.noOp",
                  "position": [
                    960,
                    1440
                  ],
                  "parameters": {},
                  "typeVersion": 1
                },
                {
                  "id": "92c08a63-6961-40f6-993e-052a311f4bb6",
                  "name": "Known Location",
                  "type": "n8n-nodes-base.noOp",
                  "position": [
                    1660,
                    1420
                  ],
                  "parameters": {},
                  "executeOnce": true,
                  "typeVersion": 1
                },
                {
                  "id": "bb1621e0-8297-4e6c-bcdf-eae683a4b830",
                  "name": "Old Device/Browser",
                  "type": "n8n-nodes-base.noOp",
                  "position": [
                    1674,
                    1765
                  ],
                  "parameters": {},
                  "executeOnce": true,
                  "typeVersion": 1
                },
                {
                  "id": "9c987dd1-8d27-4067-9956-712eae4a228c",
                  "name": "Not Riot",
                  "type": "n8n-nodes-base.noOp",
                  "position": [
                    780,
                    520
                  ],
                  "parameters": {},
                  "typeVersion": 1
                }
              ],
              "active": false,
              "pinData": {},
              "settings": {
                "executionOrder": "v1"
              },
              "versionId": "cd2fd77a-2903-44b8-826a-6797efb5f871",
              "connections": {
                "HTML": {
                  "main": [
                    [
                      {
                        "node": "Inform user",
                        "type": "main",
                        "index": 0
                      }
                    ]
                  ]
                },
                "Merge": {
                  "main": [
                    [
                      {
                        "node": "Complete login info",
                        "type": "main",
                        "index": 1
                      }
                    ]
                  ]
                },
                "riot?": {
                  "main": [
                    [
                      {
                        "node": "Check trust level",
                        "type": "main",
                        "index": 0
                      }
                    ],
                    [
                      {
                        "node": "Not Riot",
                        "type": "main",
                        "index": 0
                      }
                    ]
                  ]
                },
                "IP API": {
                  "main": [
                    [
                      {
                        "node": "Merge",
                        "type": "main",
                        "index": 0
                      }
                    ]
                  ]
                },
                "noise?": {
                  "main": [
                    [
                      {
                        "node": "Check classification",
                        "type": "main",
                        "index": 0
                      }
                    ],
                    [
                      {
                        "node": "riot?",
                        "type": "main",
                        "index": 0
                      }
                    ]
                  ]
                },
                "GreyNoise": {
                  "main": [
                    [
                      {
                        "node": "Complete login info",
                        "type": "main",
                        "index": 0
                      },
                      {
                        "node": "noise?",
                        "type": "main",
                        "index": 0
                      }
                    ]
                  ]
                },
                "UserParser": {
                  "main": [
                    [
                      {
                        "node": "Merge",
                        "type": "main",
                        "index": 1
                      }
                    ]
                  ]
                },
                "New Location": {
                  "main": [
                    [
                      {
                        "node": "Query user by ID",
                        "type": "main",
                        "index": 0
                      }
                    ]
                  ]
                },
                "Example event": {
                  "main": [
                    [
                      {
                        "node": "Extract relevant data",
                        "type": "main",
                        "index": 0
                      }
                    ]
                  ]
                },
                "New location?": {
                  "main": [
                    [
                      {
                        "node": "New Location",
                        "type": "main",
                        "index": 0
                      }
                    ],
                    [
                      {
                        "node": "Known Location",
                        "type": "main",
                        "index": 0
                      }
                    ]
                  ]
                },
                "Query IP API1": {
                  "main": [
                    [
                      {
                        "node": "New location?",
                        "type": "main",
                        "index": 0
                      }
                    ]
                  ]
                },
                "Unknown threat?": {
                  "main": [
                    [
                      {
                        "node": "Get last 10 logins from the same user",
                        "type": "main",
                        "index": 0
                      }
                    ],
                    [
                      {
                        "node": "Known, Do Nothing",
                        "type": "main",
                        "index": 0
                      }
                    ]
                  ]
                },
                "User has email?": {
                  "main": [
                    [
                      {
                        "node": "HTML",
                        "type": "main",
                        "index": 0
                      }
                    ]
                  ]
                },
                "New /login event": {
                  "main": [
                    [
                      {
                        "node": "Extract relevant data",
                        "type": "main",
                        "index": 0
                      }
                    ]
                  ]
                },
                "Parse User Agent": {
                  "main": [
                    [
                      {
                        "node": "New Device/Browser?",
                        "type": "main",
                        "index": 0
                      }
                    ]
                  ]
                },
                "Query user by ID": {
                  "main": [
                    [
                      {
                        "node": "User has email?",
                        "type": "main",
                        "index": 0
                      }
                    ]
                  ]
                },
                "Check trust level": {
                  "main": [
                    [],
                    [
                      {
                        "node": "\ud83d\udd34 Priority: HIGH",
                        "type": "main",
                        "index": 0
                      }
                    ],
                    [
                      {
                        "node": "\ud83d\udfe1 Priority: MEDIUM",
                        "type": "main",
                        "index": 0
                      }
                    ],
                    [
                      {
                        "node": "\ud83d\udfe2 Priority: LOW",
                        "type": "main",
                        "index": 0
                      }
                    ]
                  ]
                },
                "New Device/Browser": {
                  "main": [
                    [
                      {
                        "node": "Query user by ID",
                        "type": "main",
                        "index": 0
                      }
                    ]
                  ]
                },
                "\ud83d\udfe2 Priority: LOW": {
                  "main": [
                    [
                      {
                        "node": "Slack",
                        "type": "main",
                        "index": 0
                      }
                    ]
                  ]
                },
                "Complete login info": {
                  "main": [
                    [
                      {
                        "node": "Unknown threat?",
                        "type": "main",
                        "index": 0
                      }
                    ]
                  ]
                },
                "New Device/Browser?": {
                  "main": [
                    [
                      {
                        "node": "New Device/Browser",
                        "type": "main",
                        "index": 0
                      }
                    ],
                    [
                      {
                        "node": "Old Device/Browser",
                        "type": "main",
                        "index": 0
                      }
                    ]
                  ]
                },
                "\ud83d\udd34 Priority: HIGH": {
                  "main": [
                    [
                      {
                        "node": "Slack",
                        "type": "main",
                        "index": 0
                      }
                    ]
                  ]
                },
                "Check classification": {
                  "main": [
                    [
                      {
                        "node": "\ud83d\udd34 Priority: HIGH",
                        "type": "main",
                        "index": 0
                      }
                    ],
                    [
                      {
                        "node": "\ud83d\udfe1 Priority: MEDIUM",
                        "type": "main",
                        "index": 0
                      }
                    ],
                    [
                      {
                        "node": "\ud83d\udfe2 Priority: LOW",
                        "type": "main",
                        "index": 0
                      }
                    ]
                  ]
                },
                "Extract relevant data": {
                  "main": [
                    [
                      {
                        "node": "GreyNoise",
                        "type": "main",
                        "index": 0
                      },
                      {
                        "node": "UserParser",
                        "type": "main",
                        "index": 0
                      },
                      {
                        "node": "IP API",
                        "type": "main",
                        "index": 0
                      }
                    ]
                  ]
                },
                "\ud83d\udfe1 Priority: MEDIUM": {
                  "main": [
                    [
                      {
                        "node": "Slack",
                        "type": "main",
                        "index": 0
                      }
                    ]
                  ]
                },
                "When clicking \"Execute Workflow\"": {
                  "main": [
                    [
                      {
                        "node": "Example event",
                        "type": "main",
                        "index": 0
                      }
                    ]
                  ]
                },
                "Get last 10 logins from the same user": {
                  "main": [
                    [
                      {
                        "node": "Query IP API1",
                        "type": "main",
                        "index": 0
                      },
                      {
                        "node": "Parse User Agent",
                        "type": "main",
                        "index": 0
                      }
                    ]
                  ]
                }
              }
            }
          },
          "node_count": 43,
          "connection_count": 27,
          "extraction_time": 0.591751,
          "error": null
        },
        "layer3": {
          "success": true,
          "data": {
            "introduction": "This n8n workflow is designed for security monitoring and incident response when suspicious login events are detected. It can be initiated either manually from within the n8n UI for testing or automatically triggered by a webhook when a new login event occurs.The workflow first extracts relevant data from the incoming webhook payload, including the IP address, user agent, timestamp, URL, and user ID. It then splits into three parallel processing paths.In the first path, it queries GreyNoise's Community API to retrieve information about the investigated IP address. Depending on the classification and trust level received from GreyNoise, the alert is given a High, Medium, or Low priority. This priority is assigned based on the best practices documentation from GreyNoise on how to apply their data to analysis. Once a priority is assigned, a message is sent to a Slack channel to notify users about the alert.The second path involves fetching geolocation data about the IP address using IP-API's Geolocation API and merging it with data from the UserParser node. This data is then combined with the data obtained from GreyNoise.In the third path, the UserParser node queries the Userparser IP address and user agent lookup API to obtain information about the user's IP and user agent. This data is merged with the IP-API data and GreyNoise data.The workflow then checks if the IP address is considered an unknown threat by examining both the noise and riot fields from GreyNoise. If it is considered an unknown threat, the workflow proceeds to retrieve the last 10 login records for the same user from a Postgres database.If there are any discrepancies in the login information, indicating a new location or device/browser, the user is informed via email.Potential issues when setting up this workflow include ensuring that credentials are correctly entered for GreyNoise and UserParser nodes, and addressing any discrepancies in the data sources that could lead to false positives or negatives in threat detection. Additionally, the usage of hardcoded API keys should be replaced with credentials for security and flexibility. Thorough testing and validation with sample data are crucial to ensure the workflow performs as expected and aligns with security incident response procedures.",
            "overview": "",
            "tutorial_text": "This n8n workflow is designed for security monitoring and incident response when suspicious login events are detected. It can be initiated either manually from within the n8n UI for testing or automatically triggered by a webhook when a new login event occurs.The workflow first extracts relevant data from the incoming webhook payload, including the IP address, user agent, timestamp, URL, and user ID. It then splits into three parallel processing paths.In the first path, it queries GreyNoise's Community API to retrieve information about the investigated IP address. Depending on the classification and trust level received from GreyNoise, the alert is given a High, Medium, or Low priority. This priority is assigned based on the best practices documentation from GreyNoise on how to apply their data to analysis. Once a priority is assigned, a message is sent to a Slack channel to notify users about the alert.The second path involves fetching geolocation data about the IP address using IP-API's Geolocation API and merging it with data from the UserParser node. This data is then combined with the data obtained from GreyNoise.In the third path, the UserParser node queries the Userparser IP address and user agent lookup API to obtain information about the user's IP and user agent. This data is merged with the IP-API data and GreyNoise data.The workflow then checks if the IP address is considered an unknown threat by examining both the noise and riot fields from GreyNoise. If it is considered an unknown threat, the workflow proceeds to retrieve the last 10 login records for the same user from a Postgres database.If there are any discrepancies in the login information, indicating a new location or device/browser, the user is informed via email.Potential issues when setting up this workflow include ensuring that credentials are correctly entered for GreyNoise and UserParser nodes, and addressing any discrepancies in the data sources that could lead to false positives or negatives in threat detection. Additionally, the usage of hardcoded API keys should be replaced with credentials for security and flexibility. Thorough testing and validation with sample data are crucial to ensure the workflow performs as expected and aligns with security incident response procedures.",
            "tutorial_sections": [],
            "step_by_step": [],
            "best_practices": [],
            "common_pitfalls": [],
            "image_urls": [
              "https://n8n.io/nodes/http-request.svg",
              "https://n8n.io/nodes/merge.svg",
              "https://gravatar.com/avatar/b3d1a47322f05a8be3d2e7bad6a80c29161bd58b91e4762cbb3ac25e5d0db5a8?r=pg&d=retro&size=200",
              "https://n8n.io/nodes/github-trigger.svg",
              "https://n8n.io/nodes/gmail.svg",
              "https://gravatar.com/avatar/5388f694f455e66e83773a986d066ef4326c0f05c4e992a5184cddb27d7de00f?r=pg&d=retro&size=200",
              "https://n8n.io/nodes/google-sheets.svg",
              "https://gravatar.com/avatar/19e625b50be6c5e0f734a6e837828341ade4fa64ca3d52321ed95ead0bf4c270?r=pg&d=retro&size=200",
              "https://n8n.io/images/stars-footer.svg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/avatar_igordisco_9243b86232_cd9a5c94ce.jpg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/neutral_avatar_purple_fee36bffe3.PNG",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/avatar_anderoav_589989fc39_ceb1c71a0c.jpg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/avatar_maxim_poulsen_48f450887b_852d0439bc.jpeg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/Felix_Leber_f7a5b3c776_130aeca79d.jpeg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/avatar_Ironben_0a4b3e7d12_e35805265c.jpg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/Francois_lassl_d5cfb504c7_710c87121d.jpeg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/twitter_x_62a44e965e.svg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/github_e1f217d7a3_b9a271324f.svg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/discord_253947c90b_191e8f60fa.svg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/linkedin_d710e84d63_6ed0dc28aa.svg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/youtube_de4bdef50a_4b3a8b8aac.svg"
            ],
            "video_urls": [],
            "code_snippets": [],
            "conclusion": "",
            "troubleshooting": {
              "common_issues": [],
              "error_messages": []
            },
            "related_workflows": []
          },
          "errors": [],
          "extraction_time": 6.061023,
          "metadata": {
            "workflow_id": "1993",
            "url": "https://n8n.io/workflows/1993",
            "extracted_at": "2025-10-11T08:49:04.838152",
            "extractor_version": "1.0.0"
          }
        }
      },
      "multimodal": null,
      "transcripts": null,
      "validation": {
        "layer1": {
          "score": 80,
          "issues": [
            "Difficulty level not set",
            "No engagement metrics available"
          ],
          "valid": true,
          "layer": "layer1"
        },
        "layer2": {
          "score": 100,
          "issues": [],
          "valid": true,
          "layer": "layer2"
        },
        "layer3": {
          "score": 35,
          "issues": [
            "No tutorial sections extracted",
            "No images extracted",
            "Missing required fields: title, description, steps",
            "No step-by-step content extracted"
          ],
          "valid": false,
          "layer": "layer3"
        }
      },
      "quality": {
        "overall_score": 70.0,
        "classification": "Fair",
        "layer1_score": 80,
        "layer2_score": 100,
        "layer3_score": 35,
        "consistency_score": 100.0,
        "total_issues": 6
      },
      "extraction_time": 17.03730320930481,
      "errors": [],
      "timestamp": "2025-10-11T08:48:53.912362"
    },
    {
      "success": true,
      "workflow_id": "2287",
      "url": "https://n8n.io/workflows/2287",
      "layers": {
        "layer1": {
          "success": true,
          "workflow_id": "2287",
          "data": {
            "title": "Classify lemlist replies using OpenAI and automate reply handling",
            "description": "Who this is forThis workflow is for sales people who want to quickly and efficiently follow up with their leads What this workflow doesThis workflow starts...",
            "author": "Igor Fediczko@igordisco",
            "use_case": "Who this is forThis workflow is for sales people who want to quickly and efficiently follow up with their leads What this workflow doesThis workflow starts.",
            "primary_category": "Strictly necessary",
            "secondary_categories": [
              "Performance",
              "Targeting",
              "Functionality",
              "Strictly necessary cookies allow core website functionality such as user login and account management. The website cannot be used properly without strictly necessary cookies.",
              "Performance cookies are used to see how visitors use the website, eg. analytics cookies. Those cookies cannot be used to directly identify a certain visitor.",
              "Targeting cookies are used to identify visitors between different websites, eg. content partners, banner networks. Those cookies may be used by companies to build a profile of visitor interests or show relevant ads on other websites.",
              "Functionality cookies are used to remember visitor information on the website, eg. language, timezone, enhanced content."
            ],
            "node_tags": [
              "github147,222",
              "hiring"
            ],
            "general_tags": [
              "Targeting",
              "Performance",
              "Strictly necessary",
              "Functionality"
            ],
            "difficulty_level": "intermediate",
            "views": 0,
            "upvotes": 0,
            "created_date": "2025-10-11T08:49:04.235203",
            "updated_date": "2025-10-11T08:49:04.235203",
            "setup_instructions": "Who this is forThis workflow is for sales people who want to quickly and efficiently follow up with their leads What this workflow doesThis workflow starts...",
            "prerequisites": [
              "token_v2",
              "or website it relates to",
              "{\n\t\tcontent: attr(label);\n\t\tfont-weight: bold;\n\t\twidth: 120px;\n\t\tmin-width: 120px;\n\t}",
              "visiting the said website",
              "__Secure-ROLLOUT_TOKEN"
            ],
            "estimated_setup_time": "4 minutes 59 sec",
            "industry": [
              "Strictly necessary"
            ]
          },
          "extraction_time": 8.328877210617065,
          "error": null
        },
        "layer2": {
          "success": true,
          "workflow_id": "2287",
          "data": {
            "id": 2287,
            "name": "Classify lemlist replies using OpenAI and automate reply handling",
            "workflow": {
              "meta": {
                "instanceId": "2b1cc1a8b0a2fb9caab11ab2d5eb3712f9973066051b2e898cf4041a1f2a7757",
                "templateCredsSetupCompleted": true
              },
              "nodes": [
                {
                  "id": "7786165e-5e74-4614-b065-86db19482b72",
                  "name": "Format text with Markdown",
                  "type": "n8n-nodes-base.markdown",
                  "position": [
                    -1200,
                    980
                  ],
                  "parameters": {
                    "html": "={{ $json.text }}",
                    "options": {},
                    "destinationKey": "textClean"
                  },
                  "typeVersion": 1,
                  "continueOnFail": true
                },
                {
                  "id": "8f73d4d6-2473-4fdf-8797-c049d6df6967",
                  "name": "Lemlist Trigger - On new reply",
                  "type": "n8n-nodes-base.lemlistTrigger",
                  "position": [
                    -1600,
                    980
                  ],
                  "webhookId": "039bb443-8d2a-4eb3-9c16-772943a46db7",
                  "parameters": {
                    "event": "emailsReplied",
                    "options": {
                      "isFirst": true
                    }
                  },
                  "typeVersion": 1
                },
                {
                  "id": "1f94d672-0a70-45ad-bf96-72c4aecabcd0",
                  "name": "Sticky Note",
                  "type": "n8n-nodes-base.stickyNote",
                  "position": [
                    -1700,
                    680
                  ],
                  "parameters": {
                    "width": 304.92548549441915,
                    "height": 504.9663351162785,
                    "content": "### Get your lemlist API key\n\n1. Go to your lemlist account or create one [HERE](https://app.lemlist.com/create-account)\n\n2. Go to Settings -> Integrations\n\n3. Generate your API Key and copy it\n\n4. On this node, click on create new credential and paste your API key"
                  },
                  "typeVersion": 1
                },
                {
                  "id": "3032b04c-76a2-4f7c-a790-ede26b102254",
                  "name": "Sticky Note1",
                  "type": "n8n-nodes-base.stickyNote",
                  "position": [
                    -2040,
                    680
                  ],
                  "parameters": {
                    "width": 319.6621253622332,
                    "height": 507.1074887209538,
                    "content": "# Read me\n\nThis workflow send email replies of your lemlist campaigns to the Slack channel of your choice.\n\nThe OpenAI node will classify the reply status. \n\nThe Slack alert is structured in a way that make it easy to read for the user."
                  },
                  "typeVersion": 1
                },
                {
                  "id": "df142fcb-f5ec-475d-8f90-c0bd064d390c",
                  "name": "OpenAI Chat Model",
                  "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
                  "position": [
                    -760,
                    1320
                  ],
                  "parameters": {
                    "model": "gpt-4o",
                    "options": {}
                  },
                  "typeVersion": 1
                },
                {
                  "id": "1fa6d12c-2555-42c6-8f80-b24dc3608ed7",
                  "name": "Structured Output Parser",
                  "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
                  "position": [
                    -600,
                    1320
                  ],
                  "parameters": {
                    "schemaType": "manual",
                    "inputSchema": "{\n\t\"type\": \"object\",\n\t\"properties\": {\n\t\t\"category\": {\n\t\t\t\"type\": \"string\"\n        }\n\t}\n}"
                  },
                  "typeVersion": 1.2
                },
                {
                  "id": "734013f9-d058-4f08-9026-a41cd5877a3b",
                  "name": "Send alert to Slack",
                  "type": "n8n-nodes-base.slack",
                  "position": [
                    320,
                    700
                  ],
                  "parameters": {
                    "text": "=",
                    "select": "channel",
                    "blocksUi": "={\n\t\"blocks\": [\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"text\": {\n\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\"text\": \":raised_hands: New reply in lemlist!\\n\"\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Categorized as:*\\n{{ $json[\"output\"][\"category\"] }}\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Campaign:*\\n<https://app.lemlist.com/teams/{{ $json[\"teamId\"] }}/reports/campaigns/{{ $json[\"campaignId\"] }}|{{ $json[\"campaignName\"] }}>\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Sender Email:*\\n{{ $json[\"sendUserEmail\"] }}\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Lead Email:*\\n{{ $json[\"leadEmail\"] }}\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Linkedin URL:*\\n{{ $json[\"linkedinUrl\"] }}\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"text\": {\n\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\"text\": \"*Reply preview*:\\n{{ JSON.stringify($json[\"textClean\"]).replace(/^\"(.+(?=\"$))\"$/, '$1').substring(0, 100) }}\"\n\t\t\t}\n\t\t}\n\t]\n}",
                    "channelId": {
                      "__rl": true,
                      "mode": "name",
                      "value": "automated_outbound_replies"
                    },
                    "messageType": "block",
                    "otherOptions": {
                      "botProfile": {
                        "imageValues": {
                          "icon_emoji": ":fire:",
                          "profilePhotoType": "emoji"
                        }
                      },
                      "unfurl_links": false,
                      "includeLinkToWorkflow": false
                    }
                  },
                  "typeVersion": 2.1
                },
                {
                  "id": "0558c166-16d7-4c26-a09c-fb46c2b6b687",
                  "name": "Lemlist - Unsubscribe",
                  "type": "n8n-nodes-base.lemlist",
                  "position": [
                    300,
                    1000
                  ],
                  "parameters": {
                    "email": "={{ $json[\"leadEmail\"] }}",
                    "resource": "lead",
                    "operation": "unsubscribe",
                    "campaignId": "={{$json[\"campaignId\"]}}"
                  },
                  "typeVersion": 1
                },
                {
                  "id": "79d17d20-a60a-4b5a-a83c-821cac265b17",
                  "name": "lemlist - Mark as interested",
                  "type": "n8n-nodes-base.httpRequest",
                  "position": [
                    300,
                    1260
                  ],
                  "parameters": {
                    "url": "=https://api.lemlist.com/api/campaigns/{{$json[\"campaignId\"]}}/leads/{{$json[\"leadEmail\"]}}/interested",
                    "options": {},
                    "requestMethod": "POST",
                    "authentication": "predefinedCredentialType",
                    "nodeCredentialType": "lemlistApi"
                  },
                  "typeVersion": 2
                },
                {
                  "id": "04f74337-903c-481a-95ca-a1d4a5985b9e",
                  "name": "Categorize lemlist reply",
                  "type": "@n8n/n8n-nodes-langchain.chainLlm",
                  "position": [
                    -780,
                    1120
                  ],
                  "parameters": {
                    "text": "=Classify the [email_content] in one only of the following categories: \n\nCategories=[\"Interested\", \"Out of office\", \"Unsubscribe\", \"Not interested\", \"Other\"]  \n\n- Interested is when the reply is positive, and the person want more information or a meeting  \n\nDon't output quotes like in the next example: \nemail_content_example:Hey I would like to know more \ncategory:Interested\n\nemail_content:\"{{ $json.textClean }}\" \n\nOnly answer with JSON in the following format:\n{\"replyStatus\":category}\n\nJSON:",
                    "promptType": "define",
                    "hasOutputParser": true
                  },
                  "typeVersion": 1.4
                },
                {
                  "id": "c1d66785-e096-4fd7-90de-51c7b9117413",
                  "name": "Merge data",
                  "type": "n8n-nodes-base.merge",
                  "position": [
                    -280,
                    1000
                  ],
                  "parameters": {
                    "mode": "combine",
                    "options": {},
                    "combinationMode": "mergeByPosition"
                  },
                  "typeVersion": 2.1
                },
                {
                  "id": "bf21f5b9-6978-4657-a0a2-847265cff31e",
                  "name": "Sticky Note2",
                  "type": "n8n-nodes-base.stickyNote",
                  "position": [
                    260,
                    520
                  ],
                  "parameters": {
                    "width": 480.38008828116847,
                    "height": 341.5885389153657,
                    "content": "### Create a Slack notification for each new replies\n\n1. Connect your Slack account by clicking to add Credentials\n\n2. Write the name of the channel where you want to send the Slack alert"
                  },
                  "typeVersion": 1
                },
                {
                  "id": "024b4399-8e20-4974-986d-6c1ee4103fa0",
                  "name": "Route reply to the right branch",
                  "type": "n8n-nodes-base.switch",
                  "position": [
                    -100,
                    1000
                  ],
                  "parameters": {
                    "rules": {
                      "values": [
                        {
                          "outputKey": "Send all replies to Slack",
                          "conditions": {
                            "options": {
                              "leftValue": "",
                              "caseSensitive": true,
                              "typeValidation": "strict"
                            },
                            "combinator": "and",
                            "conditions": [
                              {
                                "operator": {
                                  "type": "string",
                                  "operation": "exists",
                                  "singleValue": true
                                },
                                "leftValue": "={{ $json.output.category }}",
                                "rightValue": ""
                              }
                            ]
                          },
                          "renameOutput": true
                        },
                        {
                          "outputKey": "Unsubscribe",
                          "conditions": {
                            "options": {
                              "leftValue": "",
                              "caseSensitive": true,
                              "typeValidation": "strict"
                            },
                            "combinator": "and",
                            "conditions": [
                              {
                                "id": "9ad6f5cd-8c50-4710-8eaf-085e8f11f202",
                                "operator": {
                                  "name": "filter.operator.equals",
                                  "type": "string",
                                  "operation": "equals"
                                },
                                "leftValue": "={{ $json.output.category }}",
                                "rightValue": "Unsubscribe"
                              }
                            ]
                          },
                          "renameOutput": true
                        },
                        {
                          "outputKey": "Interested",
                          "conditions": {
                            "options": {
                              "leftValue": "",
                              "caseSensitive": true,
                              "typeValidation": "strict"
                            },
                            "combinator": "and",
                            "conditions": [
                              {
                                "id": "cb410bcc-a70c-4430-aec1-b71f3f615c4d",
                                "operator": {
                                  "name": "filter.operator.equals",
                                  "type": "string",
                                  "operation": "equals"
                                },
                                "leftValue": "={{ $json.output.category }}",
                                "rightValue": "Interested"
                              }
                            ]
                          },
                          "renameOutput": true
                        }
                      ]
                    },
                    "options": {
                      "allMatchingOutputs": true
                    }
                  },
                  "typeVersion": 3
                },
                {
                  "id": "f9f23daa-f7a9-49f9-8ffb-16798656af73",
                  "name": "Sticky Note3",
                  "type": "n8n-nodes-base.stickyNote",
                  "position": [
                    260,
                    900
                  ],
                  "parameters": {
                    "width": 480.38008828116847,
                    "height": 256.5682017131378,
                    "content": "### Save time by automatically unsubscribing leads that don't want to receive emails from you"
                  },
                  "typeVersion": 1
                },
                {
                  "id": "63c536bd-e624-4118-b0c8-38c07f2d1955",
                  "name": "Sticky Note4",
                  "type": "n8n-nodes-base.stickyNote",
                  "position": [
                    260,
                    1200
                  ],
                  "parameters": {
                    "width": 480.38008828116847,
                    "height": 256.5682017131378,
                    "content": "### Mark interested leads as interested in lemlist"
                  },
                  "typeVersion": 1
                },
                {
                  "id": "8ed8b714-8196-4593-87b8-18c6a7318fbe",
                  "name": "Sticky Note5",
                  "type": "n8n-nodes-base.stickyNote",
                  "position": [
                    -880,
                    875.46282303881
                  ],
                  "parameters": {
                    "width": 480.38008828116847,
                    "height": 608.2279357257166,
                    "content": "### Categorize the reply with OpenAI"
                  },
                  "typeVersion": 1
                },
                {
                  "id": "6b1846df-0214-4383-87cf-55232093ae2a",
                  "name": "Sticky Note6",
                  "type": "n8n-nodes-base.stickyNote",
                  "position": [
                    -1320,
                    880
                  ],
                  "parameters": {
                    "width": 336.62085535637357,
                    "height": 311.3046602455328,
                    "content": "### This node will clean the text and make sure it looks pretty on Slack"
                  },
                  "typeVersion": 1
                },
                {
                  "id": "f7378ecd-e8d2-4204-a883-3161be601ffc",
                  "name": "Sticky Note7",
                  "type": "n8n-nodes-base.stickyNote",
                  "position": [
                    -220,
                    880
                  ],
                  "parameters": {
                    "width": 336.62085535637357,
                    "height": 311.3046602455328,
                    "content": "### Trigger a different scenario according to the category of the reply"
                  },
                  "typeVersion": 1
                }
              ],
              "pinData": {},
              "connections": {
                "Merge data": {
                  "main": [
                    [
                      {
                        "node": "Route reply to the right branch",
                        "type": "main",
                        "index": 0
                      }
                    ]
                  ]
                },
                "OpenAI Chat Model": {
                  "ai_languageModel": [
                    [
                      {
                        "node": "Categorize lemlist reply",
                        "type": "ai_languageModel",
                        "index": 0
                      }
                    ]
                  ]
                },
                "Categorize lemlist reply": {
                  "main": [
                    [
                      {
                        "node": "Merge data",
                        "type": "main",
                        "index": 1
                      }
                    ]
                  ]
                },
                "Structured Output Parser": {
                  "ai_outputParser": [
                    [
                      {
                        "node": "Categorize lemlist reply",
                        "type": "ai_outputParser",
                        "index": 0
                      }
                    ]
                  ]
                },
                "Format text with Markdown": {
                  "main": [
                    [
                      {
                        "node": "Merge data",
                        "type": "main",
                        "index": 0
                      },
                      {
                        "node": "Categorize lemlist reply",
                        "type": "main",
                        "index": 0
                      }
                    ]
                  ]
                },
                "Lemlist Trigger - On new reply": {
                  "main": [
                    [
                      {
                        "node": "Format text with Markdown",
                        "type": "main",
                        "index": 0
                      }
                    ]
                  ]
                },
                "Route reply to the right branch": {
                  "main": [
                    [
                      {
                        "node": "Send alert to Slack",
                        "type": "main",
                        "index": 0
                      }
                    ],
                    [
                      {
                        "node": "Lemlist - Unsubscribe",
                        "type": "main",
                        "index": 0
                      }
                    ],
                    [
                      {
                        "node": "lemlist - Mark as interested",
                        "type": "main",
                        "index": 0
                      }
                    ]
                  ]
                }
              }
            }
          },
          "node_count": 18,
          "connection_count": 7,
          "extraction_time": 0.713004,
          "error": null
        },
        "layer3": {
          "success": true,
          "data": {
            "introduction": "Who this is forThis workflow is for sales people who want to quickly and efficiently follow up with their leadsWhat this workflow doesThis workflow starts every time a new reply is received in lemlist. It then classifies the response using openAI and creates the correct follow up task. The follow-up tasks currently include:Slack alerts when a lead for each new repliesTag interested leads in lemlistUnsubscription of leads when they request itThe Slack alerts include:Lead email addressSender email addressReply type (positive, not interested...etc)A preview of the replySetupTo set this template up, simply follow the stickies steps in itHow to customize this workflow to your needsAdjust the follow up tasks to your needsChange the Slack notification to your needs...",
            "overview": "",
            "tutorial_text": "Who this is forThis workflow is for sales people who want to quickly and efficiently follow up with their leadsWhat this workflow doesThis workflow starts every time a new reply is received in lemlist. It then classifies the response using openAI and creates the correct follow up task. The follow-up tasks currently include:Slack alerts when a lead for each new repliesTag interested leads in lemlistUnsubscription of leads when they request itThe Slack alerts include:Lead email addressSender email addressReply type (positive, not interested...etc)A preview of the replySetupTo set this template up, simply follow the stickies steps in itHow to customize this workflow to your needsAdjust the follow up tasks to your needsChange the Slack notification to your needs...",
            "tutorial_sections": [],
            "step_by_step": [],
            "best_practices": [],
            "common_pitfalls": [],
            "image_urls": [
              "https://n8n.io/nodes/http-request.svg",
              "https://n8n.io/nodes/merge.svg",
              "https://n8n.io/nodes/slack.svg",
              "https://gravatar.com/avatar/0b3273e259147247b9921e13c536e06521ebd68ba5198aaff9b141db51eb3d94?r=pg&d=retro&size=200",
              "https://n8n.io/nodes/webhook.svg",
              "https://n8n.io/nodes/code.svg",
              "https://gravatar.com/avatar/fe589e45711c79f138c00077e28d9bc41a22d79f684d203cd3fdd41e218ef6ba?r=pg&d=retro&size=200",
              "https://n8n.io/nodes/odoo.svg",
              "https://gravatar.com/avatar/a73ca84b07b557e95322815bc04859245e9243c7cfd5bf9a14568fd0ce3e72c5?r=pg&d=retro&size=200",
              "https://n8n.io/nodes/pipedrive.svg",
              "https://gravatar.com/avatar/b3d1a47322f05a8be3d2e7bad6a80c29161bd58b91e4762cbb3ac25e5d0db5a8?r=pg&d=retro&size=200",
              "https://n8n.io/nodes/openai-chat-model.svg",
              "https://gravatar.com/avatar/d6c9cb4d0092909e227e9de518409cdf679228a7df550714ce808d77976221af?r=pg&d=retro&size=200",
              "https://n8n.io/nodes/telegram.svg",
              "https://gravatar.com/avatar/e7ca218dfc87b68344bbd66f40da01546d2f6fc1cf884267821e8a77e3e8410a?r=pg&d=retro&size=200",
              "https://n8n.io/images/stars-footer.svg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/avatar_igordisco_9243b86232_cd9a5c94ce.jpg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/neutral_avatar_purple_fee36bffe3.PNG",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/avatar_anderoav_589989fc39_ceb1c71a0c.jpg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/avatar_maxim_poulsen_48f450887b_852d0439bc.jpeg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/Felix_Leber_f7a5b3c776_130aeca79d.jpeg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/avatar_Ironben_0a4b3e7d12_e35805265c.jpg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/Francois_lassl_d5cfb504c7_710c87121d.jpeg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/twitter_x_62a44e965e.svg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/github_e1f217d7a3_b9a271324f.svg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/discord_253947c90b_191e8f60fa.svg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/linkedin_d710e84d63_6ed0dc28aa.svg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/youtube_de4bdef50a_4b3a8b8aac.svg"
            ],
            "video_urls": [],
            "code_snippets": [],
            "conclusion": "",
            "troubleshooting": {
              "common_issues": [],
              "error_messages": []
            },
            "related_workflows": []
          },
          "errors": [],
          "extraction_time": 5.625219,
          "metadata": {
            "workflow_id": "2287",
            "url": "https://n8n.io/workflows/2287",
            "extracted_at": "2025-10-11T08:49:06.229428",
            "extractor_version": "1.0.0"
          }
        }
      },
      "multimodal": null,
      "transcripts": null,
      "validation": {
        "layer1": {
          "score": 80,
          "issues": [
            "Difficulty level not set",
            "No engagement metrics available"
          ],
          "valid": true,
          "layer": "layer1"
        },
        "layer2": {
          "score": 100,
          "issues": [],
          "valid": true,
          "layer": "layer2"
        },
        "layer3": {
          "score": 35,
          "issues": [
            "No tutorial sections extracted",
            "No images extracted",
            "Missing required fields: title, description, steps",
            "No step-by-step content extracted"
          ],
          "valid": false,
          "layer": "layer3"
        }
      },
      "quality": {
        "overall_score": 70.0,
        "classification": "Fair",
        "layer1_score": 80,
        "layer2_score": 100,
        "layer3_score": 35,
        "consistency_score": 100.0,
        "total_issues": 6
      },
      "extraction_time": 15.34665298461914,
      "errors": [],
      "timestamp": "2025-10-11T08:48:56.555641"
    },
    {
      "success": true,
      "workflow_id": "1912",
      "url": "https://n8n.io/workflows/1912",
      "layers": {
        "layer1": {
          "success": true,
          "workflow_id": "1912",
          "data": {
            "title": "Unknown Title",
            "description": "",
            "author": "Unknown Author",
            "use_case": "General workflow automation",
            "primary_category": "Strictly necessary",
            "secondary_categories": [
              "Performance",
              "Targeting",
              "Functionality",
              "Strictly necessary cookies allow core website functionality such as user login and account management. The website cannot be used properly without strictly necessary cookies.",
              "Performance cookies are used to see how visitors use the website, eg. analytics cookies. Those cookies cannot be used to directly identify a certain visitor.",
              "Targeting cookies are used to identify visitors between different websites, eg. content partners, banner networks. Those cookies may be used by companies to build a profile of visitor interests or show relevant ads on other websites.",
              "Functionality cookies are used to remember visitor information on the website, eg. language, timezone, enhanced content."
            ],
            "node_tags": [],
            "general_tags": [
              "Targeting",
              "Performance",
              "Strictly necessary",
              "Functionality"
            ],
            "difficulty_level": "intermediate",
            "views": 0,
            "upvotes": 0,
            "created_date": "2025-10-11T08:49:13.620907",
            "updated_date": "2025-10-11T08:49:13.620907",
            "setup_instructions": "",
            "prerequisites": [
              "token_v2",
              "or website it relates to",
              "{\n\t\tcontent: attr(label);\n\t\tfont-weight: bold;\n\t\twidth: 120px;\n\t\tmin-width: 120px;\n\t}",
              "visiting the said website",
              "__Secure-ROLLOUT_TOKEN"
            ],
            "estimated_setup_time": "4 minutes 59 sec",
            "industry": [
              "Strictly necessary"
            ]
          },
          "extraction_time": 5.236608982086182,
          "error": null
        },
        "layer2": {
          "success": false,
          "workflow_id": "1912",
          "data": null,
          "node_count": 0,
          "connection_count": 0,
          "extraction_time": 0.250919,
          "error": "Workflow not found (404)"
        },
        "layer3": {
          "success": true,
          "data": {
            "introduction": "",
            "overview": "",
            "tutorial_text": "",
            "tutorial_sections": [],
            "step_by_step": [],
            "best_practices": [],
            "common_pitfalls": [],
            "image_urls": [],
            "video_urls": [],
            "code_snippets": [],
            "conclusion": "",
            "troubleshooting": {
              "common_issues": [],
              "error_messages": []
            },
            "related_workflows": []
          },
          "errors": [],
          "extraction_time": 5.546632,
          "metadata": {
            "workflow_id": "1912",
            "url": "https://n8n.io/workflows/1912",
            "extracted_at": "2025-10-11T08:49:14.877916",
            "extractor_version": "1.0.0"
          }
        }
      },
      "multimodal": null,
      "transcripts": null,
      "validation": {
        "layer1": {
          "score": 55,
          "issues": [
            "Description missing or too short (minimum 20 characters)",
            "Difficulty level not set",
            "Author not identified",
            "No engagement metrics available"
          ],
          "valid": false,
          "layer": "layer1"
        },
        "layer2": null,
        "layer3": {
          "score": 5,
          "issues": [
            "Tutorial text missing",
            "No tutorial sections extracted",
            "No images extracted",
            "Missing required fields: title, description, steps",
            "No step-by-step content extracted"
          ],
          "valid": false,
          "layer": "layer3"
        }
      },
      "quality": {
        "overall_score": 20.0,
        "classification": "Poor",
        "layer1_score": 55,
        "layer2_score": null,
        "layer3_score": 5,
        "consistency_score": 70.0,
        "total_issues": 9
      },
      "extraction_time": 11.689596891403198,
      "errors": [
        "Layer 2 extraction failed: Workflow not found (404)"
      ],
      "timestamp": "2025-10-11T08:49:08.773462"
    },
    {
      "success": true,
      "workflow_id": "2203",
      "url": "https://n8n.io/workflows/2203",
      "layers": {
        "layer1": {
          "success": true,
          "workflow_id": "2203",
          "data": {
            "title": "Unknown Title",
            "description": "",
            "author": "Unknown Author",
            "use_case": "General workflow automation",
            "primary_category": "Strictly necessary",
            "secondary_categories": [
              "Performance",
              "Targeting",
              "Functionality",
              "Strictly necessary cookies allow core website functionality such as user login and account management. The website cannot be used properly without strictly necessary cookies.",
              "Performance cookies are used to see how visitors use the website, eg. analytics cookies. Those cookies cannot be used to directly identify a certain visitor.",
              "Targeting cookies are used to identify visitors between different websites, eg. content partners, banner networks. Those cookies may be used by companies to build a profile of visitor interests or show relevant ads on other websites.",
              "Functionality cookies are used to remember visitor information on the website, eg. language, timezone, enhanced content."
            ],
            "node_tags": [],
            "general_tags": [
              "Targeting",
              "Performance",
              "Strictly necessary",
              "Functionality"
            ],
            "difficulty_level": "intermediate",
            "views": 0,
            "upvotes": 0,
            "created_date": "2025-10-11T08:49:15.619350",
            "updated_date": "2025-10-11T08:49:15.619350",
            "setup_instructions": "",
            "prerequisites": [
              "token_v2",
              "or website it relates to",
              "{\n\t\tcontent: attr(label);\n\t\tfont-weight: bold;\n\t\twidth: 120px;\n\t\tmin-width: 120px;\n\t}",
              "visiting the said website",
              "__Secure-ROLLOUT_TOKEN"
            ],
            "estimated_setup_time": "4 minutes 59 sec",
            "industry": [
              "Strictly necessary"
            ]
          },
          "extraction_time": 5.1296069622039795,
          "error": null
        },
        "layer2": {
          "success": false,
          "workflow_id": "2203",
          "data": null,
          "node_count": 0,
          "connection_count": 0,
          "extraction_time": 0.14271,
          "error": "Workflow not found (404)"
        },
        "layer3": {
          "success": true,
          "data": {
            "introduction": "",
            "overview": "",
            "tutorial_text": "",
            "tutorial_sections": [],
            "step_by_step": [],
            "best_practices": [],
            "common_pitfalls": [],
            "image_urls": [],
            "video_urls": [],
            "code_snippets": [],
            "conclusion": "",
            "troubleshooting": {
              "common_issues": [],
              "error_messages": []
            },
            "related_workflows": []
          },
          "errors": [],
          "extraction_time": 5.53601,
          "metadata": {
            "workflow_id": "2203",
            "url": "https://n8n.io/workflows/2203",
            "extracted_at": "2025-10-11T08:49:17.134064",
            "extractor_version": "1.0.0"
          }
        }
      },
      "multimodal": null,
      "transcripts": null,
      "validation": {
        "layer1": {
          "score": 55,
          "issues": [
            "Description missing or too short (minimum 20 characters)",
            "Difficulty level not set",
            "Author not identified",
            "No engagement metrics available"
          ],
          "valid": false,
          "layer": "layer1"
        },
        "layer2": null,
        "layer3": {
          "score": 5,
          "issues": [
            "Tutorial text missing",
            "No tutorial sections extracted",
            "No images extracted",
            "Missing required fields: title, description, steps",
            "No step-by-step content extracted"
          ],
          "valid": false,
          "layer": "layer3"
        }
      },
      "quality": {
        "overall_score": 20.0,
        "classification": "Poor",
        "layer1_score": 55,
        "layer2_score": null,
        "layer3_score": 5,
        "consistency_score": 70.0,
        "total_issues": 9
      },
      "extraction_time": 11.759207010269165,
      "errors": [
        "Layer 2 extraction failed: Workflow not found (404)"
      ],
      "timestamp": "2025-10-11T08:49:10.949898"
    },
    {
      "success": true,
      "workflow_id": "1865",
      "url": "https://n8n.io/workflows/1865",
      "layers": {
        "layer1": {
          "success": true,
          "workflow_id": "1865",
          "data": {
            "title": "Unknown Title",
            "description": "",
            "author": "Unknown Author",
            "use_case": "General workflow automation",
            "primary_category": "Strictly necessary",
            "secondary_categories": [
              "Performance",
              "Targeting",
              "Functionality",
              "Strictly necessary cookies allow core website functionality such as user login and account management. The website cannot be used properly without strictly necessary cookies.",
              "Performance cookies are used to see how visitors use the website, eg. analytics cookies. Those cookies cannot be used to directly identify a certain visitor.",
              "Targeting cookies are used to identify visitors between different websites, eg. content partners, banner networks. Those cookies may be used by companies to build a profile of visitor interests or show relevant ads on other websites.",
              "Functionality cookies are used to remember visitor information on the website, eg. language, timezone, enhanced content."
            ],
            "node_tags": [],
            "general_tags": [
              "Targeting",
              "Performance",
              "Strictly necessary",
              "Functionality"
            ],
            "difficulty_level": "intermediate",
            "views": 0,
            "upvotes": 0,
            "created_date": "2025-10-11T08:49:16.561831",
            "updated_date": "2025-10-11T08:49:16.561831",
            "setup_instructions": "",
            "prerequisites": [
              "token_v2",
              "or website it relates to",
              "{\n\t\tcontent: attr(label);\n\t\tfont-weight: bold;\n\t\twidth: 120px;\n\t\tmin-width: 120px;\n\t}",
              "visiting the said website",
              "__Secure-ROLLOUT_TOKEN"
            ],
            "estimated_setup_time": "4 minutes 59 sec",
            "industry": [
              "Strictly necessary"
            ]
          },
          "extraction_time": 5.059952259063721,
          "error": null
        },
        "layer2": {
          "success": false,
          "workflow_id": "1865",
          "data": null,
          "node_count": 0,
          "connection_count": 0,
          "extraction_time": 0.42016,
          "error": "Workflow not found (404)"
        },
        "layer3": {
          "success": true,
          "data": {
            "introduction": "",
            "overview": "",
            "tutorial_text": "",
            "tutorial_sections": [],
            "step_by_step": [],
            "best_practices": [],
            "common_pitfalls": [],
            "image_urls": [],
            "video_urls": [],
            "code_snippets": [],
            "conclusion": "",
            "troubleshooting": {
              "common_issues": [],
              "error_messages": []
            },
            "related_workflows": []
          },
          "errors": [],
          "extraction_time": 5.582503,
          "metadata": {
            "workflow_id": "1865",
            "url": "https://n8n.io/workflows/1865",
            "extracted_at": "2025-10-11T08:49:17.988914",
            "extractor_version": "1.0.0"
          }
        }
      },
      "multimodal": null,
      "transcripts": null,
      "validation": {
        "layer1": {
          "score": 55,
          "issues": [
            "Description missing or too short (minimum 20 characters)",
            "Difficulty level not set",
            "Author not identified",
            "No engagement metrics available"
          ],
          "valid": false,
          "layer": "layer1"
        },
        "layer2": null,
        "layer3": {
          "score": 5,
          "issues": [
            "Tutorial text missing",
            "No tutorial sections extracted",
            "No images extracted",
            "Missing required fields: title, description, steps",
            "No step-by-step content extracted"
          ],
          "valid": false,
          "layer": "layer3"
        }
      },
      "quality": {
        "overall_score": 20.0,
        "classification": "Poor",
        "layer1_score": 55,
        "layer2_score": null,
        "layer3_score": 5,
        "consistency_score": 70.0,
        "total_issues": 9
      },
      "extraction_time": 11.714990854263306,
      "errors": [
        "Layer 2 extraction failed: Workflow not found (404)"
      ],
      "timestamp": "2025-10-11T08:49:11.902745"
    },
    {
      "success": true,
      "workflow_id": "2076",
      "url": "https://n8n.io/workflows/2076",
      "layers": {
        "layer1": {
          "success": true,
          "workflow_id": "2076",
          "data": {
            "title": "Scrape Crunchbase recent funding rounds",
            "description": "Get recent funding rounds from Crunchbase in Google Sheets, along with 10+ data points (LinkedIn URL, monthly traffic, company size, etc.) You\u2019ll be able...",
            "author": "Igor Fediczko@igordisco",
            "use_case": "Get recent funding rounds from Crunchbase in Google Sheets, along with 10+ data points (LinkedIn URL, monthly traffic, company size, etc.",
            "primary_category": "Strictly necessary",
            "secondary_categories": [
              "Performance",
              "Targeting",
              "Functionality",
              "Strictly necessary cookies allow core website functionality such as user login and account management. The website cannot be used properly without strictly necessary cookies.",
              "Performance cookies are used to see how visitors use the website, eg. analytics cookies. Those cookies cannot be used to directly identify a certain visitor.",
              "Targeting cookies are used to identify visitors between different websites, eg. content partners, banner networks. Those cookies may be used by companies to build a profile of visitor interests or show relevant ads on other websites.",
              "Functionality cookies are used to remember visitor information on the website, eg. language, timezone, enhanced content."
            ],
            "node_tags": [
              "github147,222",
              "hiring"
            ],
            "general_tags": [
              "Targeting",
              "Performance",
              "Strictly necessary",
              "Functionality"
            ],
            "difficulty_level": "intermediate",
            "views": 0,
            "upvotes": 0,
            "created_date": "2025-10-11T08:49:28.294572",
            "updated_date": "2025-10-11T08:49:28.294572",
            "setup_instructions": "Get recent funding rounds from Crunchbase in Google Sheets, along with 10+ data points (LinkedIn URL, monthly traffic, company size, etc.) You\u2019ll be able...",
            "prerequisites": [
              "token_v2",
              "or website it relates to",
              "{\n\t\tcontent: attr(label);\n\t\tfont-weight: bold;\n\t\twidth: 120px;\n\t\tmin-width: 120px;\n\t}",
              "visiting the said website",
              "__Secure-ROLLOUT_TOKEN"
            ],
            "estimated_setup_time": "4 minutes 59 sec",
            "industry": [
              "Strictly necessary"
            ]
          },
          "extraction_time": 8.367244958877563,
          "error": null
        },
        "layer2": {
          "success": true,
          "workflow_id": "2076",
          "data": {
            "id": 2076,
            "name": "Scrape Crunchbase recent funding rounds",
            "workflow": {
              "meta": {
                "instanceId": "f0a68da631efd4ed052a324b63ff90f7a844426af0398a68338f44245d1dd9e5"
              },
              "nodes": [
                {
                  "id": "0d901abb-f11b-4fdc-88d0-1bbd906ff332",
                  "name": "Split results",
                  "type": "n8n-nodes-base.itemLists",
                  "position": [
                    1040,
                    460
                  ],
                  "parameters": {
                    "options": {},
                    "fieldToSplitOut": "results"
                  },
                  "typeVersion": 1
                },
                {
                  "id": "b522f5bc-480c-4a6a-a44b-55ca68c66ad5",
                  "name": "Piloterr - Get Recent Fundraise - Serie A",
                  "type": "n8n-nodes-base.httpRequest",
                  "position": [
                    740,
                    460
                  ],
                  "parameters": {
                    "url": "https://piloterr.com/api/v2/crunchbase/funding_rounds",
                    "options": {},
                    "sendQuery": true,
                    "authentication": "genericCredentialType",
                    "genericAuthType": "httpHeaderAuth",
                    "queryParameters": {
                      "parameters": [
                        {
                          "name": "days_since_announcement",
                          "value": "1"
                        },
                        {
                          "name": "investment_type",
                          "value": "series_a"
                        }
                      ]
                    }
                  },
                  "credentials": {
                    "httpHeaderAuth": {
                      "id": "123",
                      "name": "Pilotr"
                    }
                  },
                  "typeVersion": 3
                },
                {
                  "id": "5965b7cd-66f4-4c5b-82a2-e9526fb4b366",
                  "name": "Piloterr - Get Recent Fundraise - Serie B",
                  "type": "n8n-nodes-base.httpRequest",
                  "position": [
                    740,
                    660
                  ],
                  "parameters": {
                    "url": "https://piloterr.com/api/v2/crunchbase/funding_rounds",
                    "options": {},
                    "sendQuery": true,
                    "authentication": "genericCredentialType",
                    "genericAuthType": "httpHeaderAuth",
                    "queryParameters": {
                      "parameters": [
                        {
                          "name": "days_since_announcement",
                          "value": "1"
                        },
                        {
                          "name": "investment_type",
                          "value": "series_b"
                        }
                      ]
                    }
                  },
                  "credentials": {
                    "httpHeaderAuth": {
                      "id": "123",
                      "name": "Pilotr"
                    }
                  },
                  "typeVersion": 3
                },
                {
                  "id": "04ab7fe9-6422-45c3-b165-139577a0e27f",
                  "name": "Google Sheets",
                  "type": "n8n-nodes-base.googleSheets",
                  "position": [
                    2360,
                    480
                  ],
                  "parameters": {
                    "columns": {
                      "value": {
                        "link": "={{ $json.link }}",
                        "type": "={{ $json.type }}",
                        "country": "={{ $json.country }}",
                        "event_link": "={{ $json.event_link }}",
                        "website_url": "={{ $json.website_url }}",
                        "announced_on": "={{ $json.announced_on }}",
                        "company_name": "={{ $json.company_name }}",
                        "founded_date": "={{ $json.founded_date }}",
                        "linkedin_url": "={{ $json.linkedin_url }}",
                        "money_raised": "={{ $json.money_raised }}",
                        "funding_total": "={{ $json.funding_total }}",
                        "employee_count": "={{ $json.employee_count }}",
                        "investment_type": "={{ $json.investment_type }}",
                        "monthly_traffic_semrush": "={{ $json.monthly_traffic_semrush }}"
                      },
                      "schema": [
                        {
                          "id": "company_name",
                          "type": "string",
                          "display": true,
                          "removed": false,
                          "required": false,
                          "displayName": "company_name",
                          "defaultMatch": false,
                          "canBeUsedToMatch": true
                        },
                        {
                          "id": "website_url",
                          "type": "string",
                          "display": true,
                          "removed": false,
                          "required": false,
                          "displayName": "website_url",
                          "defaultMatch": false,
                          "canBeUsedToMatch": true
                        },
                        {
                          "id": "type",
                          "type": "string",
                          "display": true,
                          "removed": false,
                          "required": false,
                          "displayName": "type",
                          "defaultMatch": false,
                          "canBeUsedToMatch": true
                        },
                        {
                          "id": "money_raised",
                          "type": "string",
                          "display": true,
                          "removed": false,
                          "required": false,
                          "displayName": "money_raised",
                          "defaultMatch": false,
                          "canBeUsedToMatch": true
                        },
                        {
                          "id": "linkedin_url",
                          "type": "string",
                          "display": true,
                          "removed": false,
                          "required": false,
                          "displayName": "linkedin_url",
                          "defaultMatch": false,
                          "canBeUsedToMatch": true
                        },
                        {
                          "id": "announced_on",
                          "type": "string",
                          "display": true,
                          "removed": false,
                          "required": false,
                          "displayName": "announced_on",
                          "defaultMatch": false,
                          "canBeUsedToMatch": true
                        },
                        {
                          "id": "funding_total",
                          "type": "string",
                          "display": true,
                          "removed": false,
                          "required": false,
                          "displayName": "funding_total",
                          "defaultMatch": false,
                          "canBeUsedToMatch": true
                        },
                        {
                          "id": "link",
                          "type": "string",
                          "display": true,
                          "removed": false,
                          "required": false,
                          "displayName": "link",
                          "defaultMatch": false,
                          "canBeUsedToMatch": true
                        },
                        {
                          "id": "monthly_traffic_semrush",
                          "type": "string",
                          "display": true,
                          "removed": false,
                          "required": false,
                          "displayName": "monthly_traffic_semrush",
                          "defaultMatch": false,
                          "canBeUsedToMatch": true
                        },
                        {
                          "id": "event_link",
                          "type": "string",
                          "display": true,
                          "removed": false,
                          "required": false,
                          "displayName": "event_link",
                          "defaultMatch": false,
                          "canBeUsedToMatch": true
                        },
                        {
                          "id": "employee_count",
                          "type": "string",
                          "display": true,
                          "removed": false,
                          "required": false,
                          "displayName": "employee_count",
                          "defaultMatch": false,
                          "canBeUsedToMatch": true
                        },
                        {
                          "id": "country",
                          "type": "string",
                          "display": true,
                          "removed": false,
                          "required": false,
                          "displayName": "country",
                          "defaultMatch": false,
                          "canBeUsedToMatch": true
                        },
                        {
                          "id": "founded_date",
                          "type": "string",
                          "display": true,
                          "removed": false,
                          "required": false,
                          "displayName": "founded_date",
                          "defaultMatch": false,
                          "canBeUsedToMatch": true
                        }
                      ],
                      "mappingMode": "defineBelow",
                      "matchingColumns": [
                        "event_link"
                      ]
                    },
                    "options": {},
                    "operation": "appendOrUpdate",
                    "sheetName": {
                      "__rl": true,
                      "mode": "list",
                      "value": "gid=0",
                      "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1IZ7BJUtBdezesDS5oBDzFeW-btiH7qB4gdIcwcC01xs/edit#gid=0",
                      "cachedResultName": "Sheet1"
                    },
                    "documentId": {
                      "__rl": true,
                      "mode": "url",
                      "value": "https://docs.google.com/spreadsheets/d/1IZ7BJUtBdezesDS5oBDzFeW-btiH7qB4gdIcwcC01xs/edit#gid=0",
                      "__regex": "https:\\/\\/(?:drive|docs)\\.google\\.com\\/\\w+\\/d\\/([0-9a-zA-Z\\-_]+)(?:\\/.*|)"
                    }
                  },
                  "credentials": {
                    "googleSheetsOAuth2Api": {
                      "id": "2",
                      "name": "Google Sheets account lucas"
                    }
                  },
                  "typeVersion": 4
                },
                {
                  "id": "f88a862c-c413-4248-b061-2a449c6ee0fb",
                  "name": "Piloterr - Get Recent Fundraise - Seed",
                  "type": "n8n-nodes-base.httpRequest",
                  "position": [
                    740,
                    860
                  ],
                  "parameters": {
                    "url": "https://piloterr.com/api/v2/crunchbase/funding_rounds",
                    "options": {},
                    "sendQuery": true,
                    "authentication": "genericCredentialType",
                    "genericAuthType": "httpHeaderAuth",
                    "queryParameters": {
                      "parameters": [
                        {
                          "name": "days_since_announcement",
                          "value": "1"
                        },
                        {
                          "name": "investment_type",
                          "value": "seed"
                        }
                      ]
                    }
                  },
                  "credentials": {
                    "httpHeaderAuth": {
                      "id": "123",
                      "name": "Pilotr"
                    }
                  },
                  "typeVersion": 3
                },
                {
                  "id": "38521229-d315-4bb3-bece-72ff64f602e8",
                  "name": "Prepare data",
                  "type": "n8n-nodes-base.set",
                  "position": [
                    1280,
                    460
                  ],
                  "parameters": {
                    "values": {
                      "string": [
                        {
                          "name": "type",
                          "value": "={{ $json.investment_type }}"
                        },
                        {
                          "name": "money_raised",
                          "value": "={{ $json.money_raised.value_usd }}"
                        },
                        {
                          "name": "announced_on",
                          "value": "={{ $json.announced_on }}"
                        },
                        {
                          "name": "company_name",
                          "value": "={{ $json.funded_organization_identifier.value }}"
                        },
                        {
                          "name": "link",
                          "value": "={{ $json.funded_organization_identifier.permalink }}"
                        },
                        {
                          "name": "event_link",
                          "value": "={{ $json.identifier.permalink }}"
                        }
                      ]
                    },
                    "options": {},
                    "keepOnlySet": true
                  },
                  "typeVersion": 2
                },
                {
                  "id": "8fad9822-dfe3-4106-981f-f2c8163ce8a0",
                  "name": "Piloterr - Enrich company",
                  "type": "n8n-nodes-base.httpRequest",
                  "position": [
                    1520,
                    580
                  ],
                  "parameters": {
                    "url": "https://piloterr.com/api/v2/crunchbase/company/info",
                    "options": {
                      "batching": {
                        "batch": {
                          "batchSize": 3
                        }
                      }
                    },
                    "sendQuery": true,
                    "authentication": "genericCredentialType",
                    "genericAuthType": "httpHeaderAuth",
                    "queryParameters": {
                      "parameters": [
                        {
                          "name": "query",
                          "value": "=https://www.crunchbase.com/organization/{{ $json[\"link\"] }}"
                        }
                      ]
                    }
                  },
                  "credentials": {
                    "httpHeaderAuth": {
                      "id": "123",
                      "name": "Pilotr"
                    }
                  },
                  "typeVersion": 3,
                  "continueOnFail": true
                },
                {
                  "id": "78289f0d-5721-4615-a883-38a1e48ebb34",
                  "name": "Merge",
                  "type": "n8n-nodes-base.merge",
                  "position": [
                    2100,
                    480
                  ],
                  "parameters": {
                    "mode": "combine",
                    "options": {},
                    "combinationMode": "mergeByPosition"
                  },
                  "typeVersion": 2.1
                },
                {
                  "id": "d5e659d7-28ba-4cd7-a6bf-ea7b48d5f34c",
                  "name": "Sticky Note",
                  "type": "n8n-nodes-base.stickyNote",
                  "position": [
                    20,
                    280
                  ],
                  "parameters": {
                    "width": 318.8857938718665,
                    "height": 287.01949860724255,
                    "content": "## Read me\n\nThis workflow will scrape recent fundraising events from Crunchbase, and add them in Google Sheets.\n\nFull guide here: https://lempire.notion.site/Get-recent-fundraising-in-Google-Sheets-dafbbda2635544b4925c4fb04abac8f5?pvs=74\n"
                  },
                  "typeVersion": 1
                },
                {
                  "id": "888f5bf2-4a7f-4f84-95c8-4173fa8d8f83",
                  "name": "Schedule Trigger - Run Workflow Every Day",
                  "type": "n8n-nodes-base.scheduleTrigger",
                  "position": [
                    460,
                    460
                  ],
                  "parameters": {
                    "rule": {
                      "interval": [
                        {
                          "triggerAtHour": 8
                        }
                      ]
                    }
                  },
                  "typeVersion": 1
                },
                {
                  "id": "84f02477-b19c-405f-abde-3e32280208e9",
                  "name": "Prepare data before importing to Gsheets",
                  "type": "n8n-nodes-base.set",
                  "position": [
                    1860,
                    580
                  ],
                  "parameters": {
                    "values": {
                      "string": [
                        {
                          "name": "website_url",
                          "value": "={{ $json.website.match(/https?:\\/\\/(?:www\\.)?([^\\/]+)/)[1] }}"
                        },
                        {
                          "name": "monthly_traffic_semrush",
                          "value": "={{ $json.semrush_summary.semrush_visits_latest_month }}"
                        },
                        {
                          "name": "funding_total",
                          "value": "={{ $json.funding_rounds_headline.funding_total.value }}"
                        },
                        {
                          "name": "linkedin_url",
                          "value": "={{ $json.linkedin_url }}"
                        },
                        {
                          "name": "employee_count",
                          "value": "={{ $json.employee_count }}"
                        },
                        {
                          "name": "country",
                          "value": "={{ $json.location[2].name }}"
                        },
                        {
                          "name": "founded_date",
                          "value": "={{ $json.founded }}"
                        }
                      ]
                    },
                    "options": {},
                    "keepOnlySet": true
                  },
                  "typeVersion": 2
                },
                {
                  "id": "b4952b2f-7202-4b6a-81ec-7251b0d6c308",
                  "name": "Get Linkedin URL from object",
                  "type": "n8n-nodes-base.code",
                  "position": [
                    1680,
                    580
                  ],
                  "parameters": {
                    "mode": "runOnceForEachItem",
                    "jsCode": "// Find the LinkedIn object\nlet linkedinObject = $json.social_networks.find(e => e.name === 'linkedin');\n\n// If the LinkedIn object exists, get the URL; otherwise, set to null or handle error\n$input.item.json.linkedin_url = linkedinObject ? linkedinObject.url : null;\n\n// Check if the URL was set\nif (!$input.item.json.linkedin_url) {\n    console.error('No LinkedIn URL found!');\n    // Handle the error as required for your application\n}\n\nreturn $input.item;"
                  },
                  "typeVersion": 1
                },
                {
                  "id": "9e98198d-b9f1-42e4-b703-153f98ffce7c",
                  "name": "Sticky Note1",
                  "type": "n8n-nodes-base.stickyNote",
                  "position": [
                    680,
                    254.26329864271463
                  ],
                  "parameters": {
                    "height": 818.134682564936,
                    "content": "Create an account at piloterr.com to get your API key\n\nFeel free to delete the node that are not useful to you. For instance \"Serie B\" and \"Seed\" if you want only to scrape Serie A events"
                  },
                  "typeVersion": 1
                }
              ],
              "pinData": {},
              "connections": {
                "Merge": {
                  "main": [
                    [
                      {
                        "node": "Google Sheets",
                        "type": "main",
                        "index": 0
                      }
                    ]
                  ]
                },
                "Prepare data": {
                  "main": [
                    [
                      {
                        "node": "Piloterr - Enrich company",
                        "type": "main",
                        "index": 0
                      },
                      {
                        "node": "Merge",
                        "type": "main",
                        "index": 0
                      }
                    ]
                  ]
                },
                "Split results": {
                  "main": [
                    [
                      {
                        "node": "Prepare data",
                        "type": "main",
                        "index": 0
                      }
                    ]
                  ]
                },
                "Piloterr - Enrich company": {
                  "main": [
                    [
                      {
                        "node": "Get Linkedin URL from object",
                        "type": "main",
                        "index": 0
                      }
                    ]
                  ]
                },
                "Get Linkedin URL from object": {
                  "main": [
                    [
                      {
                        "node": "Prepare data before importing to Gsheets",
                        "type": "main",
                        "index": 0
                      }
                    ]
                  ]
                },
                "Piloterr - Get Recent Fundraise - Seed": {
                  "main": [
                    [
                      {
                        "node": "Split results",
                        "type": "main",
                        "index": 0
                      }
                    ]
                  ]
                },
                "Prepare data before importing to Gsheets": {
                  "main": [
                    [
                      {
                        "node": "Merge",
                        "type": "main",
                        "index": 1
                      }
                    ]
                  ]
                },
                "Piloterr - Get Recent Fundraise - Serie A": {
                  "main": [
                    [
                      {
                        "node": "Split results",
                        "type": "main",
                        "index": 0
                      }
                    ]
                  ]
                },
                "Piloterr - Get Recent Fundraise - Serie B": {
                  "main": [
                    [
                      {
                        "node": "Split results",
                        "type": "main",
                        "index": 0
                      }
                    ]
                  ]
                },
                "Schedule Trigger - Run Workflow Every Day": {
                  "main": [
                    [
                      {
                        "node": "Piloterr - Get Recent Fundraise - Serie A",
                        "type": "main",
                        "index": 0
                      },
                      {
                        "node": "Piloterr - Get Recent Fundraise - Serie B",
                        "type": "main",
                        "index": 0
                      },
                      {
                        "node": "Piloterr - Get Recent Fundraise - Seed",
                        "type": "main",
                        "index": 0
                      }
                    ]
                  ]
                }
              }
            }
          },
          "node_count": 13,
          "connection_count": 10,
          "extraction_time": 0.723523,
          "error": null
        },
        "layer3": {
          "success": true,
          "data": {
            "introduction": "Get recent funding rounds from Crunchbase in Google Sheets,along with 10+ data points (LinkedIn URL, monthly traffic, company size, etc.)You\u2019ll be able to:Create a custom databaseReach out to interesting leads at the right timeSend custom alerts to your toolsThis workflow scrape recent funding rounds from Crunchbase, and add them in Google Sheets.It uses Piloterr API to get this data with ease.Full guide can be found here:https://lempire.notion.site/Get-recent-fundraising-in-Google-Sheets-dafbbda2635544b4925c4fb04abac8f5?pvs=74",
            "overview": "",
            "tutorial_text": "Get recent funding rounds from Crunchbase in Google Sheets,along with 10+ data points (LinkedIn URL, monthly traffic, company size, etc.)You\u2019ll be able to:Create a custom databaseReach out to interesting leads at the right timeSend custom alerts to your toolsThis workflow scrape recent funding rounds from Crunchbase, and add them in Google Sheets.It uses Piloterr API to get this data with ease.Full guide can be found here:https://lempire.notion.site/Get-recent-fundraising-in-Google-Sheets-dafbbda2635544b4925c4fb04abac8f5?pvs=74",
            "tutorial_sections": [],
            "step_by_step": [],
            "best_practices": [],
            "common_pitfalls": [],
            "image_urls": [
              "https://n8n.io/nodes/google-sheets.svg",
              "https://n8n.io/nodes/http-request.svg",
              "https://n8n.io/nodes/merge.svg",
              "https://gravatar.com/avatar/0b3273e259147247b9921e13c536e06521ebd68ba5198aaff9b141db51eb3d94?r=pg&d=retro&size=200",
              "https://n8n.io/nodes/slack.svg",
              "https://n8n.io/nodes/webhook.svg",
              "https://n8n.io/nodes/code.svg",
              "https://gravatar.com/avatar/e57785a112fbcca1ac70d537a9ed5c5a68be59f808ed8b36475bde0e2c8f384b?r=pg&d=retro&size=200",
              "https://gravatar.com/avatar/2b74c7f530e250439f5d752f2623ead4921fbb8aef56343c922b2873ef8a619f?r=pg&d=retro&size=200",
              "https://gravatar.com/avatar/b0a32f127a6ad690cd4ee808cb4d1b59d3b5e53410181d54f91d10c0027ebb43?r=pg&d=retro&size=200",
              "https://n8n.io/images/stars-footer.svg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/avatar_igordisco_9243b86232_cd9a5c94ce.jpg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/neutral_avatar_purple_fee36bffe3.PNG",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/avatar_anderoav_589989fc39_ceb1c71a0c.jpg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/avatar_maxim_poulsen_48f450887b_852d0439bc.jpeg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/Felix_Leber_f7a5b3c776_130aeca79d.jpeg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/avatar_Ironben_0a4b3e7d12_e35805265c.jpg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/Francois_lassl_d5cfb504c7_710c87121d.jpeg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/twitter_x_62a44e965e.svg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/github_e1f217d7a3_b9a271324f.svg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/discord_253947c90b_191e8f60fa.svg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/linkedin_d710e84d63_6ed0dc28aa.svg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/youtube_de4bdef50a_4b3a8b8aac.svg"
            ],
            "video_urls": [],
            "code_snippets": [],
            "conclusion": "",
            "troubleshooting": {
              "common_issues": [],
              "error_messages": []
            },
            "related_workflows": []
          },
          "errors": [],
          "extraction_time": 5.635952,
          "metadata": {
            "workflow_id": "2076",
            "url": "https://n8n.io/workflows/2076",
            "extracted_at": "2025-10-11T08:49:30.243258",
            "extractor_version": "1.0.0"
          }
        }
      },
      "multimodal": null,
      "transcripts": null,
      "validation": {
        "layer1": {
          "score": 80,
          "issues": [
            "Difficulty level not set",
            "No engagement metrics available"
          ],
          "valid": true,
          "layer": "layer1"
        },
        "layer2": {
          "score": 100,
          "issues": [],
          "valid": true,
          "layer": "layer2"
        },
        "layer3": {
          "score": 35,
          "issues": [
            "No tutorial sections extracted",
            "No images extracted",
            "Missing required fields: title, description, steps",
            "No step-by-step content extracted"
          ],
          "valid": false,
          "layer": "layer3"
        }
      },
      "quality": {
        "overall_score": 70.0,
        "classification": "Fair",
        "layer1_score": 80,
        "layer2_score": 100,
        "layer3_score": 35,
        "consistency_score": 100.0,
        "total_issues": 6
      },
      "extraction_time": 15.456141948699951,
      "errors": [],
      "timestamp": "2025-10-11T08:49:20.463410"
    },
    {
      "success": true,
      "workflow_id": "1948",
      "url": "https://n8n.io/workflows/1948",
      "layers": {
        "layer1": {
          "success": true,
          "workflow_id": "1948",
          "data": {
            "title": "XML to SQL database import",
            "description": "This is an example workflow that imports an XML file into an SQL database.The ReadBinaryFiles node loads the XML file from the server.Then the Code node...",
            "author": "Igor Fediczko@igordisco",
            "use_case": "This is an example workflow that imports an XML file into an SQL database.",
            "primary_category": "Strictly necessary",
            "secondary_categories": [
              "Performance",
              "Targeting",
              "Functionality",
              "Strictly necessary cookies allow core website functionality such as user login and account management. The website cannot be used properly without strictly necessary cookies.",
              "Performance cookies are used to see how visitors use the website, eg. analytics cookies. Those cookies cannot be used to directly identify a certain visitor.",
              "Targeting cookies are used to identify visitors between different websites, eg. content partners, banner networks. Those cookies may be used by companies to build a profile of visitor interests or show relevant ads on other websites.",
              "Functionality cookies are used to remember visitor information on the website, eg. language, timezone, enhanced content."
            ],
            "node_tags": [
              "github147,222",
              "hiring"
            ],
            "general_tags": [
              "Targeting",
              "Performance",
              "Strictly necessary",
              "Functionality"
            ],
            "difficulty_level": "intermediate",
            "views": 0,
            "upvotes": 0,
            "created_date": "2025-10-11T08:49:29.111693",
            "updated_date": "2025-10-11T08:49:29.111693",
            "setup_instructions": "This is an example workflow that imports an XML file into an SQL database.The ReadBinaryFiles node loads the XML file from the server.Then the Code node...",
            "prerequisites": [
              "token_v2",
              "or website it relates to",
              "{\n\t\tcontent: attr(label);\n\t\tfont-weight: bold;\n\t\twidth: 120px;\n\t\tmin-width: 120px;\n\t}",
              "visiting the said website",
              "__Secure-ROLLOUT_TOKEN"
            ],
            "estimated_setup_time": "4 minutes 59 sec",
            "industry": [
              "Strictly necessary"
            ]
          },
          "extraction_time": 7.03459620475769,
          "error": null
        },
        "layer2": {
          "success": true,
          "workflow_id": "1948",
          "data": {
            "id": 1948,
            "name": "XML to SQL database import",
            "workflow": {
              "id": "5x5q3sta3Qh0MdIX",
              "meta": {
                "instanceId": "fb924c73af8f703905bc09c9ee8076f48c17b596ed05b18c0ff86915ef8a7c4a"
              },
              "name": "XML usecase: import XML data",
              "tags": [],
              "nodes": [
                {
                  "id": "19a81ae3-6ef6-46b0-aaa7-2ddcad1c86cb",
                  "name": "When clicking \"Execute Workflow\"",
                  "type": "n8n-nodes-base.manualTrigger",
                  "position": [
                    700,
                    360
                  ],
                  "parameters": {},
                  "typeVersion": 1
                },
                {
                  "id": "495356fb-8132-40c2-bfd8-559cd1a03bf8",
                  "name": "Read Binary Files",
                  "type": "n8n-nodes-base.readBinaryFiles",
                  "position": [
                    900,
                    360
                  ],
                  "parameters": {
                    "fileSelector": "/home/node/.n8n/intermediate.xml"
                  },
                  "typeVersion": 1
                },
                {
                  "id": "9c88e06c-66be-4f62-a30e-811171fec34b",
                  "name": "Item Lists",
                  "type": "n8n-nodes-base.itemLists",
                  "position": [
                    1500,
                    360
                  ],
                  "parameters": {
                    "options": {},
                    "fieldToSplitOut": "Products.Product"
                  },
                  "typeVersion": 3
                },
                {
                  "id": "a8aeb5c8-bb7a-4990-8a07-565c2d9e2760",
                  "name": "Extract binary data",
                  "type": "n8n-nodes-base.code",
                  "position": [
                    1100,
                    360
                  ],
                  "parameters": {
                    "jsCode": "let binaryDataBufferItem = await this.helpers.getBinaryDataBuffer(0, 'data');\nvar data = binaryDataBufferItem.toString('utf8')\n\nreturn {\"data\": data};"
                  },
                  "typeVersion": 2
                },
                {
                  "id": "7a37802d-e0b7-4520-8832-8d43fa5815a0",
                  "name": "XML to JSON",
                  "type": "n8n-nodes-base.xml",
                  "position": [
                    1300,
                    360
                  ],
                  "parameters": {
                    "options": {
                      "trim": false,
                      "attrkey": "$",
                      "normalize": false,
                      "mergeAttrs": true,
                      "ignoreAttrs": false,
                      "normalizeTags": false
                    }
                  },
                  "typeVersion": 1
                },
                {
                  "id": "e5bca22c-7941-46d0-ba2d-d375cb4735c9",
                  "name": "Add new records",
                  "type": "n8n-nodes-base.mySql",
                  "position": [
                    1700,
                    360
                  ],
                  "parameters": {
                    "table": {
                      "__rl": true,
                      "mode": "list",
                      "value": "new_table",
                      "cachedResultName": "new_table"
                    },
                    "options": {
                      "detailedOutput": true
                    },
                    "dataMode": "defineBelow",
                    "valuesToSend": {
                      "values": [
                        {
                          "value": "={{ $json.Code }}",
                          "column": "productCode"
                        },
                        {
                          "value": "={{ $json.Name }}",
                          "column": "productName"
                        },
                        {
                          "value": "={{ $json.Line }}",
                          "column": "productLine"
                        },
                        {
                          "value": "={{ $json.Scale }}",
                          "column": "productScale"
                        },
                        {
                          "value": "={{ $json.Description }}",
                          "column": "productDescription"
                        },
                        {
                          "value": "={{ $json.Price }}",
                          "column": "MSRP"
                        },
                        {
                          "value": "NA",
                          "column": "productVendor"
                        },
                        {
                          "value": "0",
                          "column": "quantityInStock"
                        },
                        {
                          "value": "0",
                          "column": "buyPrice"
                        }
                      ]
                    }
                  },
                  "credentials": {
                    "mySql": {
                      "id": "EEPqCgKBDiRRZ3ua",
                      "name": "db4free MySQL"
                    }
                  },
                  "typeVersion": 2.2
                },
                {
                  "id": "b787244f-aebf-4ec7-ba84-4b9409e30817",
                  "name": "Create new table",
                  "type": "n8n-nodes-base.mySql",
                  "disabled": true,
                  "position": [
                    900,
                    80
                  ],
                  "parameters": {
                    "query": "CREATE TABLE IF NOT EXISTS new_table AS SELECT * FROM products;\nTRUNCATE new_table;\n",
                    "options": {},
                    "operation": "executeQuery"
                  },
                  "credentials": {
                    "mySql": {
                      "id": "EEPqCgKBDiRRZ3ua",
                      "name": "db4free MySQL"
                    }
                  },
                  "typeVersion": 2.2
                },
                {
                  "id": "49b8214d-bc98-441c-847d-158a35c6fefa",
                  "name": "Sticky Note",
                  "type": "n8n-nodes-base.stickyNote",
                  "position": [
                    720,
                    -40
                  ],
                  "parameters": {
                    "width": 503,
                    "height": 317,
                    "content": "### Activate and execute this node only when needed.\nCREATE TABLE IF NOT EXISTS new_table AS SELECT * FROM products;\nTRUNCATE new_table;"
                  },
                  "typeVersion": 1
                },
                {
                  "id": "28533467-5e12-4f7c-9310-8c88708bcff9",
                  "name": "Sticky Note1",
                  "type": "n8n-nodes-base.stickyNote",
                  "position": [
                    680,
                    560
                  ],
                  "parameters": {
                    "width": 553.5746606334839,
                    "height": 268.9366515837105,
                    "content": "## This is a content of the example XML file.\n### Please use it if the file was not already created\n\n<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<Products>\n  <Product Price=\"69.26\" Code=\"S24_2360\">\n    <Name>1982 Ducati 900 Monster</Name>\n    <Line>Motorcycles</Line>\n    <Scale>1:24</Scale>\n    <Description>Features two-tone paint with chrome accents, superior die-cast detail , rotating wheels , working kick stand</Description>\n  </Product>\n  <Product Price=\"118.94\" Code=\"S10_2016\">\n    <Name>1996 Moto Guzzi 1100i</Name>\n    <Line>Motorcycles</Line>\n    <Scale>1:10</Scale>\n    <Description>Official Moto Guzzi logos and insignias, saddle bags located on side of motorcycle, detailed engine, working steering, working suspension, two leather seats, luggage rack, dual exhaust pipes, small saddle bag located on handle bars, two-tone paint with chrome accents, superior die-cast detail , rotating wheels , working kick stand, diecast metal with plastic parts and baked enamel finish.</Description>\n  </Product>\n  <Product Price=\"148.80\" Code=\"S18_4721\">\n    <Name>1957 Corvette Convertible</Name>\n    <Line>Classic Cars</Line>\n    <Scale>1:18</Scale>\n    <Description>1957 die cast Corvette Convertible in Roman Red with white sides and whitewall tires. 1:18 scale quality die-cast with detailed engine and underbvody. Now you can own The Classic Corvette.</Description>\n  </Product>\n  <Product Price=\"90.52\" Code=\"S700_2047\">\n    <Name>HMS Bounty</Name>\n    <Line>Ships</Line>\n    <Scale>1:700</Scale>\n    <Description>Measures 30 inches Long x 27 1/2 inches High x 4 3/4 inches Wide. &#xD;\nMany extras including rigging, long boats, pilot house, anchors, etc. Comes with three masts, all square-rigged.</Description>\n  </Product>\n  <Product Price=\"64.64\" Code=\"S32_3522\">\n    <Name>1996 Peterbilt 379 Stake Bed with Outrigger</Name>\n    <Line>Trucks and Buses</Line>\n    <Scale>1:32</Scale>\n    <Description>This model features, opening doors, detailed engine, working steering, tinted windows, detailed interior, die-struck logos, removable stakes operating outriggers, detachable second trailer, functioning 360-degree self loader, precision molded resin trailer and trim, baked enamel finish on cab</Description>\n  </Product>\n  <Product Price=\"86.02\" Code=\"S18_3029\">\n    <Name>1999 Yamaha Speed Boat</Name>\n    <Line>Ships</Line>\n    <Scale>1:18</Scale>\n    <Description>Exact replica. Wood and Metal. Many extras including rigging, long boats, pilot house, anchors, etc. Comes with three masts, all square-rigged.</Description>\n  </Product>\n  <Product Price=\"60.57\" Code=\"S18_2625\">\n    <Name>1936 Harley Davidson El Knucklehead</Name>\n    <Line>Motorcycles</Line>\n    <Scale>1:18</Scale>\n    <Description>Intricately detailed with chrome accents and trim, official die-struck logos and baked enamel finish.</Description>\n  </Product>\n  <Product Price=\"107.57\" Code=\"S18_3233\">\n    <Name>1985 Toyota Supra</Name>\n    <Line>Classic Cars</Line>\n    <Scale>1:18</Scale>\n    <Description>This model features soft rubber tires, working steering, rubber mud guards, authentic Ford logos, detailed undercarriage, opening doors and hood, removable split rear gate, full size spare mounted in bed, detailed interior with opening glove box</Description>\n  </Product>\n  <Product Price=\"83.86\" Code=\"S24_3816\">\n    <Name>1940 Ford Delivery Sedan</Name>\n    <Line>Vintage Cars</Line>\n    <Scale>1:24</Scale>\n    <Description>Chrome Trim, Chrome Grille, Opening Hood, Opening Doors, Opening Trunk, Detailed Engine, Working Steering System. Color black.</Description>\n  </Product>\n  <Product Price=\"112.70\" Code=\"S24_1578\">\n    <Name>1997 BMW R 1100 S</Name>\n    <Line>Motorcycles</Line>\n    <Scale>1:24</Scale>\n    <Description>Detailed scale replica with working suspension and constructed from over 70 parts</Description>\n  </Product>\n  <Product Price=\"57.80\" Code=\"S24_1444\">\n    <Name>1970 Dodge Coronet</Name>\n    <Line>Classic Cars</Line>\n    <Scale>1:24</Scale>\n    <Description>1:24 scale die-cast about 18\" long doors open, hood opens and rubber wheels</Description>\n  </Product>\n  <Product Price=\"136.59\" Code=\"S18_3140\">\n    <Name>1903 Ford Model A</Name>\n    <Line>Vintage Cars</Line>\n    <Scale>1:18</Scale>\n    <Description>Features opening trunk,  working steering system</Description>\n  </Product>\n  <Product Price=\"90.87\" Code=\"S24_2766\">\n    <Name>1949 Jaguar XK 120</Name>\n    <Line>Classic Cars</Line>\n    <Scale>1:24</Scale>\n    <Description>Precision-engineered from original Jaguar specification in perfect scale ratio. Features opening doors, superb detail and craftsmanship, working steering system, opening forward compartment, opening rear trunk with removable spare, 4 wheel independent spring suspension as well as factory baked enamel finish.</Description>\n  </Product>\n  <Product Price=\"116.67\" Code=\"S18_1097\">\n    <Name>1940 Ford Pickup Truck</Name>\n    <Line>Trucks and Buses</Line>\n    <Scale>1:18</Scale>\n    <Description>This model features soft rubber tires, working steering, rubber mud guards, authentic Ford logos, detailed undercarriage, opening doors and hood,  removable split rear gate, full size spare mounted in bed, detailed interior with opening glove box</Description>\n  </Product>\n  <Product Price=\"54.60\" Code=\"S72_3212\">\n    <Name>Pont Yacht</Name>\n    <Line>Ships</Line>\n    <Scale>1:72</Scale>\n    <Description>Measures 38 inches Long x 33 3/4 inches High. Includes a stand.&#xD;\nMany extras including rigging, long boats, pilot house, anchors, etc. Comes with 2 masts, all square-rigged</Description>\n  </Product>\n  <Product Price=\"141.28\" Code=\"S18_3685\">\n    <Name>1948 Porsche Type 356 Roadster</Name>\n    <Line>Classic Cars</Line>\n    <Scale>1:18</Scale>\n    <Description>This model features working front and rear suspension on accurately replicated and actuating shock absorbers as well as opening engine cover, rear stabilizer flap,  and 4 opening doors.</Description>\n  </Product>\n</Products>"
                  },
                  "typeVersion": 1
                }
              ],
              "active": false,
              "pinData": {},
              "settings": {
                "executionOrder": "v1"
              },
              "versionId": "25ab0ab6-6689-48ad-967e-2a2fb0743ece",
              "connections": {
                "Item Lists": {
                  "main": [
                    [
                      {
                        "node": "Add new records",
                        "type": "main",
                        "index": 0
                      }
                    ]
                  ]
                },
                "XML to JSON": {
                  "main": [
                    [
                      {
                        "node": "Item Lists",
                        "type": "main",
                        "index": 0
                      }
                    ]
                  ]
                },
                "Read Binary Files": {
                  "main": [
                    [
                      {
                        "node": "Extract binary data",
                        "type": "main",
                        "index": 0
                      }
                    ]
                  ]
                },
                "Extract binary data": {
                  "main": [
                    [
                      {
                        "node": "XML to JSON",
                        "type": "main",
                        "index": 0
                      }
                    ]
                  ]
                },
                "When clicking \"Execute Workflow\"": {
                  "main": [
                    [
                      {
                        "node": "Read Binary Files",
                        "type": "main",
                        "index": 0
                      }
                    ]
                  ]
                }
              }
            }
          },
          "node_count": 9,
          "connection_count": 5,
          "extraction_time": 0.253625,
          "error": null
        },
        "layer3": {
          "success": true,
          "data": {
            "introduction": "This is an example workflow that imports an XML file into an SQL database.The ReadBinaryFiles node loads the XML file from the server.Then the Code node extracts the file content from the binary buffer.Afterwards, an XML node converts the XML string into a JSON structure.Finally, in the MySQL node inserts the data records into the SQL table.In the upper part of the workflow there is another MySQL node that is disabled. This node creates a new table with all the required variables based on the sample SQL database:https://www.mysqltutorial.org/mysql-sample-database.aspx",
            "overview": "",
            "tutorial_text": "This is an example workflow that imports an XML file into an SQL database.The ReadBinaryFiles node loads the XML file from the server.Then the Code node extracts the file content from the binary buffer.Afterwards, an XML node converts the XML string into a JSON structure.Finally, in the MySQL node inserts the data records into the SQL table.In the upper part of the workflow there is another MySQL node that is disabled. This node creates a new table with all the required variables based on the sample SQL database:https://www.mysqltutorial.org/mysql-sample-database.aspx",
            "tutorial_sections": [],
            "step_by_step": [],
            "best_practices": [],
            "common_pitfalls": [],
            "image_urls": [
              "https://n8n.io/nodes/item-lists.svg",
              "https://gravatar.com/avatar/b3d1a47322f05a8be3d2e7bad6a80c29161bd58b91e4762cbb3ac25e5d0db5a8?r=pg&d=retro&size=200",
              "https://n8n.io/nodes/github-trigger.svg",
              "https://n8n.io/nodes/http-request.svg",
              "https://n8n.io/nodes/merge.svg",
              "https://n8n.io/nodes/webhook.svg",
              "https://n8n.io/nodes/respond-to-webhook.svg",
              "https://gravatar.com/avatar/5240094f838126182ceefb50ca4a3cf75cc7dc0808efd4b9920d792e41bfc45e?r=pg&d=retro&size=200",
              "https://gravatar.com/avatar/a551e67c6fe7affd5f882a527dee154bb6c3ac90cf878326accb3fb3ec77c8a6?r=pg&d=retro&size=200",
              "https://n8n.io/images/stars-footer.svg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/avatar_igordisco_9243b86232_cd9a5c94ce.jpg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/neutral_avatar_purple_fee36bffe3.PNG",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/avatar_anderoav_589989fc39_ceb1c71a0c.jpg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/avatar_maxim_poulsen_48f450887b_852d0439bc.jpeg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/Felix_Leber_f7a5b3c776_130aeca79d.jpeg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/avatar_Ironben_0a4b3e7d12_e35805265c.jpg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/Francois_lassl_d5cfb504c7_710c87121d.jpeg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/twitter_x_62a44e965e.svg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/github_e1f217d7a3_b9a271324f.svg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/discord_253947c90b_191e8f60fa.svg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/linkedin_d710e84d63_6ed0dc28aa.svg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/youtube_de4bdef50a_4b3a8b8aac.svg"
            ],
            "video_urls": [],
            "code_snippets": [],
            "conclusion": "",
            "troubleshooting": {
              "common_issues": [],
              "error_messages": []
            },
            "related_workflows": []
          },
          "errors": [],
          "extraction_time": 5.916166,
          "metadata": {
            "workflow_id": "1948",
            "url": "https://n8n.io/workflows/1948",
            "extracted_at": "2025-10-11T08:49:30.598548",
            "extractor_version": "1.0.0"
          }
        }
      },
      "multimodal": null,
      "transcripts": null,
      "validation": {
        "layer1": {
          "score": 80,
          "issues": [
            "Difficulty level not set",
            "No engagement metrics available"
          ],
          "valid": true,
          "layer": "layer1"
        },
        "layer2": {
          "score": 100,
          "issues": [],
          "valid": true,
          "layer": "layer2"
        },
        "layer3": {
          "score": 35,
          "issues": [
            "No tutorial sections extracted",
            "No images extracted",
            "Missing required fields: title, description, steps",
            "No step-by-step content extracted"
          ],
          "valid": false,
          "layer": "layer3"
        }
      },
      "quality": {
        "overall_score": 70.0,
        "classification": "Fair",
        "layer1_score": 80,
        "layer2_score": 100,
        "layer3_score": 35,
        "consistency_score": 100.0,
        "total_issues": 6
      },
      "extraction_time": 13.839747905731201,
      "errors": [],
      "timestamp": "2025-10-11T08:49:22.709516"
    },
    {
      "success": true,
      "workflow_id": "2221",
      "url": "https://n8n.io/workflows/2221",
      "layers": {
        "layer1": {
          "success": true,
          "workflow_id": "2221",
          "data": {
            "title": "YouTube Advanced RSS Generator with Telegram Formation",
            "description": "Video Overview of template YouTube Channel Advanced RSS Feeds Generator Overview The [n8n] YouTube Channel Advanced RSS Feeds Generator workflow facilitates...",
            "author": "Igor Fediczko@igordisco",
            "use_case": "Video Overview of template YouTube Channel Advanced RSS Feeds Generator Overview The [n8n] YouTube Channel Advanced RSS Feeds Generator workflow facilitates.",
            "primary_category": "Strictly necessary",
            "secondary_categories": [
              "Performance",
              "Targeting",
              "Functionality",
              "Strictly necessary cookies allow core website functionality such as user login and account management. The website cannot be used properly without strictly necessary cookies.",
              "Performance cookies are used to see how visitors use the website, eg. analytics cookies. Those cookies cannot be used to directly identify a certain visitor.",
              "Targeting cookies are used to identify visitors between different websites, eg. content partners, banner networks. Those cookies may be used by companies to build a profile of visitor interests or show relevant ads on other websites.",
              "Functionality cookies are used to remember visitor information on the website, eg. language, timezone, enhanced content."
            ],
            "node_tags": [
              "github147,222",
              "hiring"
            ],
            "general_tags": [
              "Targeting",
              "Performance",
              "Strictly necessary",
              "Functionality"
            ],
            "difficulty_level": "intermediate",
            "views": 0,
            "upvotes": 0,
            "created_date": "2025-10-11T08:49:32.587886",
            "updated_date": "2025-10-11T08:49:32.587886",
            "setup_instructions": "Video Overview of template YouTube Channel Advanced RSS Feeds Generator Overview The [n8n] YouTube Channel Advanced RSS Feeds Generator workflow facilitates...",
            "prerequisites": [
              "token_v2",
              "or website it relates to",
              "{\n\t\tcontent: attr(label);\n\t\tfont-weight: bold;\n\t\twidth: 120px;\n\t\tmin-width: 120px;\n\t}",
              "visiting the said website",
              "tions of Google's API.\\n* **Multiple Formats**: Supports ATOM, JSON, MR"
            ],
            "estimated_setup_time": "4 minutes 59 sec",
            "industry": [
              "Strictly necessary"
            ]
          },
          "extraction_time": 9.538843154907227,
          "error": null
        },
        "layer2": {
          "success": true,
          "workflow_id": "2221",
          "data": {
            "id": 2221,
            "name": "YouTube Advanced RSS Generator with Telegram Formation",
            "workflow": {
              "meta": {},
              "name": "[n8n] YouTube Channel Advanced RSS Feeds Generator",
              "tags": [
                {
                  "id": "Q29tbWVudHBpY2tlcg",
                  "name": "Commentpicker",
                  "createdAt": "2024-04-16T14:29:17.942Z",
                  "updatedAt": "2024-04-16T14:29:17.942Z"
                },
                {
                  "id": "Rm9ybVRyaWdnZXI",
                  "name": "FormTrigger",
                  "createdAt": "2024-04-16T14:29:17.942Z",
                  "updatedAt": "2024-04-16T14:29:17.942Z"
                },
                {
                  "id": "SHR0cFJlcXVlc3Q",
                  "name": "HttpRequest",
                  "createdAt": "2024-04-16T14:29:17.942Z",
                  "updatedAt": "2024-04-16T14:29:17.942Z"
                },
                {
                  "id": "QWdncmVnYXRl",
                  "name": "Aggregate",
                  "createdAt": "2024-04-16T14:29:17.942Z",
                  "updatedAt": "2024-04-16T14:29:17.942Z"
                },
                {
                  "id": "UmVzcG9uZFRvV2ViaG9vaw",
                  "name": "RespondToWebhook",
                  "createdAt": "2024-04-16T14:29:17.942Z",
                  "updatedAt": "2024-04-16T14:29:17.942Z"
                },
                {
                  "id": "Q29kZQ",
                  "name": "Code",
                  "createdAt": "2024-04-16T14:29:17.942Z",
                  "updatedAt": "2024-04-16T14:29:17.942Z"
                }
              ],
              "nodes": [
                {
                  "name": "n8n Form Trigger",
                  "type": "n8n-nodes-base.formTrigger",
                  "position": [
                    -300,
                    -260
                  ],
                  "webhookId": "68a70315-9f74-4cf5-9c68-828396b0f23b",
                  "parameters": {
                    "path": "Youtube",
                    "formTitle": "Youtube RSS Generator",
                    "formFields": {
                      "values": [
                        {
                          "fieldLabel": "youtube Channel username or ID",
                          "requiredField": true
                        }
                      ]
                    },
                    "responseMode": "responseNode",
                    "formDescription": "=Youtube Username Example: @username\n\nYoutube ID Example: UCxxxxxxxxxxxxxxxxxx\n\nYoutube Video URL Example 1: https://www.youtube.com/watch?v=mn-br82ENxc\n\nYoutube Video URL Example 2: https://youtu.be/mn-br82ENxc\n\nYoutube Channel URL Example 1: https://www.youtube.com/@NewMedia_Life\n\nYoutube Channel URL Example 2: https://www.youtube.com/channel/UC_UDAiqQj-QfgTixKkW51qA"
                  },
                  "typeVersion": 2
                },
                {
                  "name": "Get Channel ID",
                  "type": "n8n-nodes-base.httpRequest",
                  "notes": "3rd party API request",
                  "position": [
                    700,
                    -440
                  ],
                  "parameters": {
                    "url": "https://commentpicker.com/actions/youtube-channel-id.php",
                    "options": {
                      "response": {
                        "response": {
                          "responseFormat": "json"
                        }
                      }
                    },
                    "sendQuery": true,
                    "sendHeaders": true,
                    "queryParameters": {
                      "parameters": [
                        {
                          "name": "url",
                          "value": "=https://www.googleapis.com/youtube/v3/channels?part=id,snippet,statistics,contentDetails,status&forHandle={{ $item(\"0\").$node[\"Set Channel Username\"].json[\"channel name\"] }}"
                        },
                        {
                          "name": "token",
                          "value": "={{ $item(\"0\").$node[\"Get Temporary Token\"].json[\"data\"] }}"
                        },
                        {
                          "name": "isPremium",
                          "value": "false"
                        }
                      ]
                    },
                    "headerParameters": {
                      "parameters": [
                        {
                          "name": "authority",
                          "value": "commentpicker.com"
                        },
                        {
                          "name": "cookie",
                          "value": "ezosuibasgeneris-1=690da322-c7c8-44e2-6154-8591a44d12aa; ezoab_186623=mod99-c; active_template::186623=pub_site.1711138973; lp_186623=https://commentpicker.com/youtube-channel-id.php; fontsLoaded=true; PHPSESSID=12ltjv3rr293h943c8h35nh3cg"
                        },
                        {
                          "name": "referer",
                          "value": "https://commentpicker.com/youtube-channel-id.php"
                        },
                        {
                          "name": "user-agent",
                          "value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36 Edg/122.0.0.0"
                        }
                      ]
                    }
                  },
                  "notesInFlow": true,
                  "typeVersion": 4.1
                },
                {
                  "name": "Set XML URL",
                  "type": "n8n-nodes-base.set",
                  "notes": "\ud83e\udd16Generate XML Feed URL",
                  "position": [
                    900,
                    -440
                  ],
                  "parameters": {
                    "options": {},
                    "assignments": {
                      "assignments": [
                        {
                          "id": "bf0ea151-e325-4860-af02-76e51f692f2c",
                          "name": "rss",
                          "type": "string",
                          "value": "=https://www.youtube.com/feeds/videos.xml?channel_id={{ $json.items[0].id }}"
                        }
                      ]
                    }
                  },
                  "notesInFlow": true,
                  "typeVersion": 3.3
                },
                {
                  "name": "Set Channel Username",
                  "type": "n8n-nodes-base.set",
                  "position": [
                    520,
                    -440
                  ],
                  "parameters": {
                    "options": {},
                    "assignments": {
                      "assignments": [
                        {
                          "id": "0837a847-4c6b-4b39-bb90-f200233bf7e1",
                          "name": "channel name",
                          "type": "string",
                          "value": "={{ $item(\"0\").$node[\"Switch\"].json[\"value\"] }}"
                        }
                      ]
                    }
                  },
                  "typeVersion": 3.3
                },
                {
                  "name": "Set XML Feed URL",
                  "type": "n8n-nodes-base.set",
                  "notes": "\ud83e\udd16Generate XML Feed URL",
                  "position": [
                    900,
                    -260
                  ],
                  "parameters": {
                    "options": {},
                    "assignments": {
                      "assignments": [
                        {
                          "id": "bf0ea151-e325-4860-af02-76e51f692f2c",
                          "name": "rss",
                          "type": "string",
                          "value": "=https://www.youtube.com/feeds/videos.xml?channel_id={{ $item(\"0\").$node[\"Switch\"].json[\"value\"] }}"
                        }
                      ]
                    }
                  },
                  "notesInFlow": true,
                  "typeVersion": 3.3
                },
                {
                  "name": "Set Video ID",
                  "type": "n8n-nodes-base.set",
                  "position": [
                    520,
                    -80
                  ],
                  "parameters": {
                    "options": {},
                    "assignments": {
                      "assignments": [
                        {
                          "id": "0837a847-4c6b-4b39-bb90-f200233bf7e1",
                          "name": "Video ID",
                          "type": "string",
                          "value": "={{ $item(\"0\").$node[\"Switch\"].json[\"value\"] }}"
                        }
                      ]
                    }
                  },
                  "typeVersion": 3.3
                },
                {
                  "name": "Get Video ID Channel ID",
                  "type": "n8n-nodes-base.httpRequest",
                  "notes": "3rd party API request",
                  "position": [
                    700,
                    -80
                  ],
                  "parameters": {
                    "url": "https://commentpicker.com/actions/youtube-channel-id.php",
                    "options": {
                      "response": {
                        "response": {
                          "responseFormat": "json"
                        }
                      }
                    },
                    "sendQuery": true,
                    "sendHeaders": true,
                    "queryParameters": {
                      "parameters": [
                        {
                          "name": "url",
                          "value": "=https://www.googleapis.com/youtube/v3/videos?part=snippet&id={{ $json[\"Video ID\"] }}"
                        },
                        {
                          "name": "token",
                          "value": "={{ $item(\"0\").$node[\"GTT\"].json[\"data\"] }}"
                        },
                        {
                          "name": "isPremium",
                          "value": "true"
                        }
                      ]
                    },
                    "headerParameters": {
                      "parameters": [
                        {
                          "name": "authority",
                          "value": "commentpicker.com"
                        },
                        {
                          "name": "cookie",
                          "value": "ezosuibasgeneris-1=690da322-c7c8-44e2-6154-8591a44d12aa; ezoab_186623=mod99-c; active_template::186623=pub_site.1711138973; lp_186623=https://commentpicker.com/youtube-channel-id.php; fontsLoaded=true; PHPSESSID=12ltjv3rr293h943c8h35nh3cg"
                        },
                        {
                          "name": "referer",
                          "value": "https://commentpicker.com/youtube-channel-id.php"
                        },
                        {
                          "name": "user-agent",
                          "value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36 Edg/122.0.0.0"
                        }
                      ]
                    }
                  },
                  "notesInFlow": true,
                  "typeVersion": 4.1
                },
                {
                  "name": "Set XML Feed",
                  "type": "n8n-nodes-base.set",
                  "notes": "\ud83e\udd16Generate XML Feed URL",
                  "position": [
                    900,
                    -80
                  ],
                  "parameters": {
                    "options": {},
                    "assignments": {
                      "assignments": [
                        {
                          "id": "bf0ea151-e325-4860-af02-76e51f692f2c",
                          "name": "rss",
                          "type": "string",
                          "value": "=https://www.youtube.com/feeds/videos.xml?channel_id={{ $item(\"0\").$node[\"Get Video ID Channel ID\"].json[\"items\"][\"0\"][\"snippet\"][\"channelId\"] }}"
                        }
                      ]
                    }
                  },
                  "notesInFlow": true,
                  "typeVersion": 3.3
                },
                {
                  "name": "Get Temporary Token",
                  "type": "n8n-nodes-base.httpRequest",
                  "notes": "3rd party API request",
                  "position": [
                    320,
                    -440
                  ],
                  "parameters": {
                    "url": "https://commentpicker.com/actions/token.php",
                    "options": {},
                    "sendHeaders": true,
                    "headerParameters": {
                      "parameters": [
                        {
                          "name": "authority",
                          "value": "commentpicker.com"
                        },
                        {
                          "name": "cookie",
                          "value": "ezosuibasgeneris-1=690da322-c7c8-44e2-6154-8591a44d12aa; fontsLoaded=true; PHPSESSID=12ltjv3rr293h943c8h35nh3cg; ezoab_186623=mod54-c; active_template::186623=pub_site.1711191989"
                        },
                        {
                          "name": "referer",
                          "value": "https://commentpicker.com/youtube-channel-id.php"
                        },
                        {
                          "name": "user-agent",
                          "value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36 Edg/122.0.0.0"
                        }
                      ]
                    }
                  },
                  "notesInFlow": true,
                  "typeVersion": 4.1
                },
                {
                  "name": "GTT",
                  "type": "n8n-nodes-base.httpRequest",
                  "notes": "3rd party API request",
                  "position": [
                    320,
                    -80
                  ],
                  "parameters": {
                    "url": "https://commentpicker.com/actions/token.php",
                    "options": {},
                    "sendHeaders": true,
                    "headerParameters": {
                      "parameters": [
                        {
                          "name": "authority",
                          "value": "commentpicker.com"
                        },
                        {
                          "name": "cookie",
                          "value": "ezosuibasgeneris-1=690da322-c7c8-44e2-6154-8591a44d12aa; fontsLoaded=true; PHPSESSID=12ltjv3rr293h943c8h35nh3cg; ezoab_186623=mod54-c; active_template::186623=pub_site.1711191989"
                        },
                        {
                          "name": "referer",
                          "value": "https://commentpicker.com/youtube-channel-id.php"
                        },
                        {
                          "name": "user-agent",
                          "value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36 Edg/122.0.0.0"
                        }
                      ]
                    }
                  },
                  "notesInFlow": true,
                  "typeVersion": 4.1
                },
                {
                  "name": "Aggregate",
                  "type": "n8n-nodes-base.aggregate",
                  "notes": "\ud83e\udd16Combine results in one",
                  "position": [
                    1080,
                    -260
                  ],
                  "parameters": {
                    "options": {},
                    "fieldsToAggregate": {
                      "fieldToAggregate": [
                        {
                          "renameField": true,
                          "outputFieldName": "rss url",
                          "fieldToAggregate": "rss"
                        }
                      ]
                    }
                  },
                  "notesInFlow": true,
                  "typeVersion": 1
                },
                {
                  "name": "Youtube Channel Videos RSS Formats",
                  "type": "n8n-nodes-base.set",
                  "notes": "RSS Feed for channel Posts",
                  "position": [
                    1260,
                    -180
                  ],
                  "parameters": {
                    "options": {},
                    "assignments": {
                      "assignments": [
                        {
                          "id": "6af1de72-9940-4843-9a98-94e36b2878a3",
                          "name": "=Videos - HTML format response",
                          "type": "string",
                          "value": "=https://rss-bridge.org/bridge01/?action=display&bridge=YoutubeBridge&context=By+channel+id&c={{ $item(\"0\").$node[\"Aggregate\"].json[\"rss url\"][\"0\"].match(/channel_id=([^&?/]+)/)[1] }}&duration_min=&duration_max=&format=Html"
                        },
                        {
                          "id": "2b486723-1dff-4525-8169-6d977dee6862",
                          "name": "Videos - ATOM format response",
                          "type": "string",
                          "value": "=https://rss-bridge.org/bridge01/?action=display&bridge=YoutubeBridge&context=By+channel+id&c={{ $item(\"0\").$node[\"Aggregate\"].json[\"rss url\"][\"0\"].match(/channel_id=([^&?/]+)/)[1] }}&duration_min=&duration_max=&format=Atom"
                        },
                        {
                          "id": "10b3c04a-2c8c-4533-944b-13123bd22743",
                          "name": "Videos - JSON format response",
                          "type": "string",
                          "value": "=https://rss-bridge.org/bridge01/?action=display&bridge=YoutubeBridge&context=By+channel+id&c={{ $item(\"0\").$node[\"Aggregate\"].json[\"rss url\"][\"0\"].match(/channel_id=([^&?/]+)/)[1] }}&duration_min=&duration_max=&format=Json"
                        },
                        {
                          "id": "ee8910de-76ab-47a3-b23f-1a1e837fb885",
                          "name": "Videos - MRSS format response",
                          "type": "string",
                          "value": "=https://rss-bridge.org/bridge01/?action=display&bridge=YoutubeBridge&context=By+channel+id&c={{ $item(\"0\").$node[\"Aggregate\"].json[\"rss url\"][\"0\"].match(/channel_id=([^&?/]+)/)[1] }}&duration_min=&duration_max=&format=Mrss"
                        },
                        {
                          "id": "8684437c-11f0-4cc2-b9b2-00ecb6768175",
                          "name": "Videos - TEXT format response",
                          "type": "string",
                          "value": "=https://rss-bridge.org/bridge01/?action=display&bridge=YoutubeBridge&context=By+channel+id&c={{ $item(\"0\").$node[\"Aggregate\"].json[\"rss url\"][\"0\"].match(/channel_id=([^&?/]+)/)[1] }}&duration_min=&duration_max=&format=Plaintext"
                        },
                        {
                          "id": "a53d1d0a-bfd1-41f4-9ab3-edd1e20adaa2",
                          "name": "Videos - SFEED format response",
                          "type": "string",
                          "value": "=https://rss-bridge.org/bridge01/?action=display&bridge=YoutubeBridge&context=By+channel+id&c={{ $item(\"0\").$node[\"Aggregate\"].json[\"rss url\"][\"0\"].match(/channel_id=([^&?/]+)/)[1] }}&duration_min=&duration_max=&format=Sfeed"
                        },
                        {
                          "id": "d17fd2e0-0e4a-45c9-bc60-86ca6a7940d4",
                          "name": "Videos - XML format response",
                          "type": "string",
                          "value": "={{ $json[\"rss url\"][\"0\"] }}"
                        }
                      ]
                    }
                  },
                  "notesInFlow": true,
                  "typeVersion": 3.3
                },
                {
                  "name": "Youtube Channel Community RSS Formats",
                  "type": "n8n-nodes-base.set",
                  "notes": "RSS Feed for channel Posts",
                  "position": [
                    1260,
                    -400
                  ],
                  "parameters": {
                    "options": {},
                    "assignments": {
                      "assignments": [
                        {
                          "id": "6af1de72-9940-4843-9a98-94e36b2878a3",
                          "name": "=Community - HTML format response",
                          "type": "string",
                          "value": "=https://rss-bridge.org/bridge01/?action=display&bridge=YouTubeCommunityTabBridge&context=By+channel+ID&channel={{ $item(\"0\").$node[\"Aggregate\"].json[\"rss url\"][\"0\"].match(/channel_id=([^&?/]+)/)[1] }}&format=HTML"
                        },
                        {
                          "id": "2b486723-1dff-4525-8169-6d977dee6862",
                          "name": "Community - ATOM format response",
                          "type": "string",
                          "value": "=https://rss-bridge.org/bridge01/?action=display&bridge=YouTubeCommunityTabBridge&context=By+channel+ID&channel={{ $item(\"0\").$node[\"Aggregate\"].json[\"rss url\"][\"0\"].match(/channel_id=([^&?/]+)/)[1] }}&format=Atom"
                        },
                        {
                          "id": "10b3c04a-2c8c-4533-944b-13123bd22743",
                          "name": "Community - JSON format response",
                          "type": "string",
                          "value": "=https://rss-bridge.org/bridge01/?action=display&bridge=YouTubeCommunityTabBridge&context=By+channel+ID&channel={{ $item(\"0\").$node[\"Aggregate\"].json[\"rss url\"][\"0\"].match(/channel_id=([^&?/]+)/)[1] }}&format=Json"
                        },
                        {
                          "id": "ee8910de-76ab-47a3-b23f-1a1e837fb885",
                          "name": "Community - MRSS format response",
                          "type": "string",
                          "value": "=https://rss-bridge.org/bridge01/?action=display&bridge=YouTubeCommunityTabBridge&context=By+channel+ID&channel={{ $item(\"0\").$node[\"Aggregate\"].json[\"rss url\"][\"0\"].match(/channel_id=([^&?/]+)/)[1] }}&format=Mrss"
                        },
                        {
                          "id": "8684437c-11f0-4cc2-b9b2-00ecb6768175",
                          "name": "Community - TEXT format response",
                          "type": "string",
                          "value": "=https://rss-bridge.org/bridge01/?action=display&bridge=YouTubeCommunityTabBridge&context=By+channel+ID&channel={{ $item(\"0\").$node[\"Aggregate\"].json[\"rss url\"][\"0\"].match(/channel_id=([^&?/]+)/)[1] }}&format=Plaintext"
                        },
                        {
                          "id": "a53d1d0a-bfd1-41f4-9ab3-edd1e20adaa2",
                          "name": "Community - SFEED format response",
                          "type": "string",
                          "value": "=https://rss-bridge.org/bridge01/?action=display&bridge=YouTubeCommunityTabBridge&context=By+channel+ID&channel={{ $item(\"0\").$node[\"Aggregate\"].json[\"rss url\"][\"0\"].match(/channel_id=([^&?/]+)/)[1] }}&format=Sfeed"
                        }
                      ]
                    }
                  },
                  "notesInFlow": true,
                  "typeVersion": 3.3
                },
                {
                  "name": "Respond to Webhook",
                  "type": "n8n-nodes-base.respondToWebhook",
                  "notes": "Reply to the webhook request with table",
                  "position": [
                    1900,
                    -280
                  ],
                  "parameters": {
                    "options": {},
                    "respondWith": "text",
                    "responseBody": "={{ $json[\"html\"] }}"
                  },
                  "notesInFlow": true,
                  "typeVersion": 1
                },
                {
                  "name": "Sticky Note2",
                  "type": "n8n-nodes-base.stickyNote",
                  "position": [
                    -360,
                    140
                  ],
                  "parameters": {
                    "color": 7,
                    "width": 2425.409405354546,
                    "height": 200.24482670360715,
                    "content": "## \u2139\ufe0f **Workarounds And Information**\n\n### - **No need to acquire Google Cloud API** to retrieve channel data. I have implemented a free workaround method.\n### - The workflow code has been **tested and proven to work** with all YouTube methods, whether for videos or channels. Regardless of whether you input URLs or usernames, the result will always be the channel ID.\n### - Please be aware that the provided workarounds may become **obsolete or non-functional** in the future. I will ensure to stay updated; however, if this workflow does not work for you, please reach out to me on the n8n community.\n### - We have utilized a 3rd party method to generate **multiple syntaxes of RSS feeds** as outlined below. (*The mentioned source is also capable of constructing multi-channel YouTube RSS feeds*, which I will create later for BULK channel RSS.)"
                  },
                  "typeVersion": 1
                },
                {
                  "name": "Switch",
                  "type": "n8n-nodes-base.switch",
                  "position": [
                    60,
                    -260
                  ],
                  "parameters": {
                    "rules": {
                      "values": [
                        {
                          "outputKey": "Username",
                          "conditions": {
                            "options": {
                              "leftValue": "",
                              "caseSensitive": true,
                              "typeValidation": "strict"
                            },
                            "combinator": "and",
                            "conditions": [
                              {
                                "operator": {
                                  "type": "string",
                                  "operation": "equals"
                                },
                                "leftValue": "={{ $json.type }}",
                                "rightValue": "channel username"
                              }
                            ]
                          },
                          "renameOutput": true
                        },
                        {
                          "outputKey": "Direct",
                          "conditions": {
                            "options": {
                              "leftValue": "",
                              "caseSensitive": true,
                              "typeValidation": "strict"
                            },
                            "combinator": "and",
                            "conditions": [
                              {
                                "id": "5af4921b-6266-436a-901c-ab52de68aaf4",
                                "operator": {
                                  "name": "filter.operator.equals",
                                  "type": "string",
                                  "operation": "equals"
                                },
                                "leftValue": "={{ $json.type }}",
                                "rightValue": "=channel ID"
                              }
                            ]
                          },
                          "renameOutput": true
                        },
                        {
                          "outputKey": "Video-ID",
                          "conditions": {
                            "options": {
                              "leftValue": "",
                              "caseSensitive": true,
                              "typeValidation": "strict"
                            },
                            "combinator": "and",
                            "conditions": [
                              {
                                "id": "a5baa5e6-879f-484a-b521-af802b6d79a9",
                                "operator": {
                                  "name": "filter.operator.equals",
                                  "type": "string",
                                  "operation": "equals"
                                },
                                "leftValue": "={{ $json.type }}",
                                "rightValue": "=video ID"
                              }
                            ]
                          },
                          "renameOutput": true
                        }
                      ]
                    },
                    "options": {}
                  },
                  "typeVersion": 3
                },
                {
                  "name": "Sticky Note",
                  "type": "n8n-nodes-base.stickyNote",
                  "position": [
                    -360,
                    -520
                  ],
                  "parameters": {
                    "color": 3,
                    "width": 2429.6732915601406,
                    "height": 644.5128280596109,
                    "content": "## \ud83c\udf10 **Generate RSS Feeds for Public Youtube Channel (No API Or Administrator permissions Required \ud83d\ude09)**\n**``Yes, As you heard``** This Workflow using `3rd party` APIs & Solutions to get the job done. **``no need to setup anything``.**\n\n## Workflow Steps:\n- Run **`Test Workflow`**.\n- Enter Channel or Video URL or ID or Username.\n- Finally, the result will provide **``13 URLs (6x Community + 6x Videos + 1 XML)``**:\n  - 6 Formats Types is: `ATOM`, `JSON`, `MRSS`, `PLAINTEXT`, `SFEED`\n  - The **``13th URL``** is from YouTube Directly that contain XML file data.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n[![N8N Creator Profile](https://cdn.statically.io/gh/Automations-Project/n8n-templates/main/stats.min.svg)](https://n8n.io/creators/nskha)"
                  },
                  "typeVersion": 1
                },
                {
                  "name": "Validation Code",
                  "type": "n8n-nodes-base.code",
                  "notes": "\ud83e\udd13Validate the YouTube input",
                  "position": [
                    -120,
                    -260
                  ],
                  "parameters": {
                    "jsCode": "// JavaScript code to extract YouTube channel ID, username, or video ID from a given input and return in n8n compatible format\n\n// Initialize an array to hold the output items\nconst items = [];\n\n// Extract the input value from the previous node's output using the $input API\nconst inputData = $input.all(); // Get all input data\n// Assuming 'youtube Channel username or ID' is the correct key, and it's in the first input item\nconst input = inputData.length > 0 ? inputData[0].json[\"youtube Channel username or ID\"] : null;\n\n// Check if input exists\nif (!input) {\n    throw new Error('Input is undefined or not provided');\n}\n\n// Regular expressions for different YouTube URL and input formats\nconst usernamePattern = /^@?([a-zA-Z0-9_-]+)$/;\nconst channelIdPattern = /^(UC[a-zA-Z0-9_-]{22})$/; // Ensure channel ID starts with \"UC\"\nconst videoUrlPattern1 = /(?:https?:\\/\\/)?www\\.youtube\\.com\\/watch\\?v=([a-zA-Z0-9_-]+)/;\nconst videoUrlPattern2 = /(?:https?:\\/\\/)?youtu\\.be\\/([a-zA-Z0-9_-]+)/;\nconst channelUrlPattern1 = /(?:https?:\\/\\/)?www\\.youtube\\.com\\/@([a-zA-Z0-9_-]+)/;\nconst channelUrlPattern2 = /(?:https?:\\/\\/)?www\\.youtube\\.com\\/channel\\/(UC[a-zA-Z0-9_-]{22})/;\nconst customChannelUrlPattern = /(?:https?:\\/\\/)?www\\.youtube\\.com\\/c\\/([a-zA-Z0-9_-]+)/; // Pattern for custom channel URLs\n\n// Function to determine the type and value of the input\nfunction determineTypeAndValue(input) {\n    if (channelIdPattern.test(input)) {\n        return { type: 'channel ID', value: input };\n    } else if (usernamePattern.test(input)) {\n        return { type: 'channel username', value: input };\n    } else if (videoUrlPattern1.test(input) || videoUrlPattern2.test(input)) {\n        const videoId = videoUrlPattern1.test(input) ? input.match(videoUrlPattern1)[1] : input.match(videoUrlPattern2)[1];\n        return { type: 'video ID', value: videoId };\n    } else if (channelUrlPattern1.test(input) || customChannelUrlPattern.test(input)) {\n        const username = channelUrlPattern1.test(input) ? input.match(channelUrlPattern1)[1] : input.match(customChannelUrlPattern)[1];\n        return { type: 'channel username', value: username };\n    } else if (channelUrlPattern2.test(input)) {\n        return { type: 'channel ID', value: input.match(channelUrlPattern2)[1] };\n    } else {\n        return { error: 'Invalid input or unsupported format.' };\n    }\n}\n\n// Process the input and add the result to the items array\nconst result = determineTypeAndValue(input);\nitems.push({ json: result });\n\nreturn items; // Return the array of items\n"
                  },
                  "notesInFlow": true,
                  "typeVersion": 2
                },
                {
                  "name": "Format response as HTML Table",
                  "type": "n8n-nodes-base.code",
                  "position": [
                    1680,
                    -280
                  ],
                  "parameters": {
                    "jsCode": "// Assuming inputData is dynamically retrieved as follows\nconst inputData = $item(\"0\").$node[\"Merga Data of Youtube & Community RSS\"].json;\n\n// Initialize HTML with a modern styled table\nlet html = `\n<style>\n  table {\n    width: 100%;\n    border-collapse: collapse;\n    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n    box-shadow: 0 2px 15px rgba(0,0,0,0.1);\n    border-radius: 8px;\n    overflow: hidden;\n    margin-top: 20px;\n  }\n  th, td {\n    border: 1px solid #ddd;\n    padding: 8px 16px;\n    text-align: left;\n    color: #333;\n  }\n  th {\n    background-color: #f0f0f0;\n    color: #000;\n    font-weight: 600;\n  }\n  tr:nth-child(even) {background-color: #f9f9f9;}\n  tr:hover {background-color: #f1f1f1;}\n  a {\n    text-decoration: none;\n    color: #0645AD;\n  }\n  a:hover {\n    text-decoration: underline;\n  }\n</style>\n<table>\n<tr>\n  <th>Type</th>\n  <th>Format</th>\n  <th>URL</th>\n</tr>`;\n\n// Function to process each item and add it to the HTML table\nObject.entries(inputData).forEach(([key, value]) => {\n  // Extract type and format from the key, assuming key format 'Category - Format'\n  const [type, format] = key.split(' - ');\n  html += `<tr>\n    <td>${type} RSS</td>\n    <td>${format}</td>\n    <td><a href=\"${value}\" target=\"_blank\">${value}</a></td>\n  </tr>`;\n});\n\n// Close the HTML table tag\nhtml += `</table>`;\n\n// Return the HTML string as output\nreturn [{json: {html: html}}];\n"
                  },
                  "typeVersion": 2
                },
                {
                  "name": "Merga Data of Youtube & Community RSS",
                  "type": "n8n-nodes-base.merge",
                  "position": [
                    1480,
                    -280
                  ],
                  "parameters": {
                    "mode": "combine",
                    "options": {},
                    "combinationMode": "multiplex"
                  },
                  "typeVersion": 2.1
                }
              ],
              "active": "false",
              "pinData": {},
              "settings": {
                "timezone": "Asia/Baghdad",
                "callerPolicy": "workflowsFromSameOwner",
                "errorWorkflow": "",
                "executionOrder": "v1",
                "executionTimeout": 600,
                "saveManualExecutions": true,
                "saveExecutionProgress": true
              },
              "staticData": "",
              "connections": {
                "GTT": {
                  "main": [
                    [
                      {
                        "node": "Set Video ID",
                        "type": "main",
                        "index": 0
                      }
                    ]
                  ]
                },
                "Switch": {
                  "main": [
                    [
                      {
                        "node": "Get Temporary Token",
                        "type": "main",
                        "index": 0
                      }
                    ],
                    [
                      {
                        "node": "Set XML Feed URL",
                        "type": "main",
                        "index": 0
                      }
                    ],
                    [
                      {
                        "node": "GTT",
                        "type": "main",
                        "index": 0
                      }
                    ]
                  ]
                },
                "Aggregate": {
                  "main": [
                    [
                      {
                        "node": "Youtube Channel Community RSS Formats",
                        "type": "main",
                        "index": 0
                      },
                      {
                        "node": "Youtube Channel Videos RSS Formats",
                        "type": "main",
                        "index": 0
                      }
                    ]
                  ]
                },
                "Set XML URL": {
                  "main": [
                    [
                      {
                        "node": "Aggregate",
                        "type": "main",
                        "index": 0
                      }
                    ]
                  ]
                },
                "Set Video ID": {
                  "main": [
                    [
                      {
                        "node": "Get Video ID Channel ID",
                        "type": "main",
                        "index": 0
                      }
                    ]
                  ]
                },
                "Set XML Feed": {
                  "main": [
                    [
                      {
                        "node": "Aggregate",
                        "type": "main",
                        "index": 0
                      }
                    ]
                  ]
                },
                "Get Channel ID": {
                  "main": [
                    [
                      {
                        "node": "Set XML URL",
                        "type": "main",
                        "index": 0
                      }
                    ]
                  ]
                },
                "Validation Code": {
                  "main": [
                    [
                      {
                        "node": "Switch",
                        "type": "main",
                        "index": 0
                      }
                    ]
                  ]
                },
                "Set XML Feed URL": {
                  "main": [
                    [
                      {
                        "node": "Aggregate",
                        "type": "main",
                        "index": 0
                      }
                    ]
                  ]
                },
                "n8n Form Trigger": {
                  "main": [
                    [
                      {
                        "node": "Validation Code",
                        "type": "main",
                        "index": 0
                      }
                    ]
                  ]
                },
                "Get Temporary Token": {
                  "main": [
                    [
                      {
                        "node": "Set Channel Username",
                        "type": "main",
                        "index": 0
                      }
                    ]
                  ]
                },
                "Set Channel Username": {
                  "main": [
                    [
                      {
                        "node": "Get Channel ID",
                        "type": "main",
                        "index": 0
                      }
                    ]
                  ]
                },
                "Get Video ID Channel ID": {
                  "main": [
                    [
                      {
                        "node": "Set XML Feed",
                        "type": "main",
                        "index": 0
                      }
                    ]
                  ]
                },
                "Format response as HTML Table": {
                  "main": [
                    [
                      {
                        "node": "Respond to Webhook",
                        "type": "main",
                        "index": 0
                      }
                    ]
                  ]
                },
                "Youtube Channel Videos RSS Formats": {
                  "main": [
                    [
                      {
                        "node": "Merga Data of Youtube & Community RSS",
                        "type": "main",
                        "index": 1
                      }
                    ]
                  ]
                },
                "Merga Data of Youtube & Community RSS": {
                  "main": [
                    [
                      {
                        "node": "Format response as HTML Table",
                        "type": "main",
                        "index": 0
                      }
                    ]
                  ]
                },
                "Youtube Channel Community RSS Formats": {
                  "main": [
                    [
                      {
                        "node": "Merga Data of Youtube & Community RSS",
                        "type": "main",
                        "index": 0
                      }
                    ]
                  ]
                }
              }
            }
          },
          "node_count": 20,
          "connection_count": 17,
          "extraction_time": 0.335589,
          "error": null
        },
        "layer3": {
          "success": true,
          "data": {
            "introduction": "OverviewThe[n8n] YouTube Channel Advanced RSS Feeds Generatorworkflow facilitates the generation of various RSS feed formats for YouTube channels without requiring API access or administrative permissions. It utilizes third-party services to extract data, making it extremely user-friendly and accessible.Key Use Cases and BenefitsContent Aggregation: Easily gather and syndicate content from any public YouTube channel.No API Key Required: Avoid the complexities and limitations of Google's API.Multiple Formats: Supports ATOM, JSON, MRSS, Plaintext, Sfeed, and direct YouTube XML feeds.Flexibility: Input can be a YouTube channel or video URL, ID, or username.Services/APIs UtilizedThis workflow integrates with:commentpicker.com: For retrieving YouTube channel IDs.rss-bridge.org: To generate various RSS formats.Configuration InstructionsStart the Workflow: Activate the workflow in your n8n instance.Input Details: Enter the YouTube channel or video URL, ID, or username via the provided form trigger.Run the Workflow: Execute the workflow to receive links to 13 different RSS feeds, including community and video content feeds.ScreenshotsAdditional NotesCustomization: You can modify the RSS feed formats or integrate additional services as needed.Support and ContributionsFor support, questions, or contributions, please visit then8n community forumor theGitHub repository. We welcome contributions from the community!",
            "overview": "",
            "tutorial_text": "OverviewThe[n8n] YouTube Channel Advanced RSS Feeds Generatorworkflow facilitates the generation of various RSS feed formats for YouTube channels without requiring API access or administrative permissions. It utilizes third-party services to extract data, making it extremely user-friendly and accessible.Key Use Cases and BenefitsContent Aggregation: Easily gather and syndicate content from any public YouTube channel.No API Key Required: Avoid the complexities and limitations of Google's API.Multiple Formats: Supports ATOM, JSON, MRSS, Plaintext, Sfeed, and direct YouTube XML feeds.Flexibility: Input can be a YouTube channel or video URL, ID, or username.Services/APIs UtilizedThis workflow integrates with:commentpicker.com: For retrieving YouTube channel IDs.rss-bridge.org: To generate various RSS formats.Configuration InstructionsStart the Workflow: Activate the workflow in your n8n instance.Input Details: Enter the YouTube channel or video URL, ID, or username via the provided form trigger.Run the Workflow: Execute the workflow to receive links to 13 different RSS feeds, including community and video content feeds.ScreenshotsAdditional NotesCustomization: You can modify the RSS feed formats or integrate additional services as needed.Support and ContributionsFor support, questions, or contributions, please visit then8n community forumor theGitHub repository. We welcome contributions from the community!",
            "tutorial_sections": [],
            "step_by_step": [],
            "best_practices": [],
            "common_pitfalls": [],
            "image_urls": [
              "https://n8n.io/nodes/http-request.svg",
              "https://n8n.io/nodes/merge.svg",
              "https://gravatar.com/avatar/6f99957ae9e5a66cf0bb95f4584cf321b0644a0ceea6a633bc968b6ec55e8410?r=pg&d=retro&size=200",
              "https://img.youtube.com/vi_webp/EtzJmrmCiUY/maxresdefault.webp?s",
              "https://live.staticflickr.com/65535/53658033066_ea92acb899_o.png",
              "https://n8n.io/nodes/github.svg",
              "https://n8n.io/nodes/customer-datastore-n8n-training.svg",
              "https://gravatar.com/avatar/8ed14c592510a0627ebe55fdad3a42a3917a77a9e081b93209ce05ecf3c2ba8f?r=pg&d=retro&size=200",
              "https://gravatar.com/avatar/74234187cf4a650d53f6a86e7b03d1bcb8cfef4cbd0552eabd8d966cd808cc54?r=pg&d=retro&size=200",
              "https://n8n.io/nodes/code.svg",
              "https://n8n.io/images/stars-footer.svg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/avatar_igordisco_9243b86232_cd9a5c94ce.jpg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/neutral_avatar_purple_fee36bffe3.PNG",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/avatar_anderoav_589989fc39_ceb1c71a0c.jpg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/avatar_maxim_poulsen_48f450887b_852d0439bc.jpeg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/Felix_Leber_f7a5b3c776_130aeca79d.jpeg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/avatar_Ironben_0a4b3e7d12_e35805265c.jpg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/Francois_lassl_d5cfb504c7_710c87121d.jpeg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/twitter_x_62a44e965e.svg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/github_e1f217d7a3_b9a271324f.svg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/discord_253947c90b_191e8f60fa.svg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/linkedin_d710e84d63_6ed0dc28aa.svg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/youtube_de4bdef50a_4b3a8b8aac.svg"
            ],
            "video_urls": [
              "https://youtu.be/EtzJmrmCiUY"
            ],
            "code_snippets": [],
            "conclusion": "",
            "troubleshooting": {
              "common_issues": [],
              "error_messages": []
            },
            "related_workflows": []
          },
          "errors": [],
          "extraction_time": 5.843479,
          "metadata": {
            "workflow_id": "2221",
            "url": "https://n8n.io/workflows/2221",
            "extracted_at": "2025-10-11T08:49:34.108011",
            "extractor_version": "1.0.0"
          }
        }
      },
      "multimodal": null,
      "transcripts": null,
      "validation": {
        "layer1": {
          "score": 80,
          "issues": [
            "Difficulty level not set",
            "No engagement metrics available"
          ],
          "valid": true,
          "layer": "layer1"
        },
        "layer2": {
          "score": 80,
          "issues": [
            "All nodes missing required fields (id, name, type)",
            "Missing or invalid workflow metadata"
          ],
          "valid": true,
          "layer": "layer2"
        },
        "layer3": {
          "score": 35,
          "issues": [
            "No tutorial sections extracted",
            "No images extracted",
            "Missing required fields: title, description, steps",
            "No step-by-step content extracted"
          ],
          "valid": false,
          "layer": "layer3"
        }
      },
      "quality": {
        "overall_score": 64.0,
        "classification": "Fair",
        "layer1_score": 80,
        "layer2_score": 80,
        "layer3_score": 35,
        "consistency_score": 100.0,
        "total_issues": 8
      },
      "extraction_time": 16.377758026123047,
      "errors": [],
      "timestamp": "2025-10-11T08:49:23.618586"
    },
    {
      "success": true,
      "workflow_id": "1834",
      "url": "https://n8n.io/workflows/1834",
      "layers": {
        "layer1": {
          "success": true,
          "workflow_id": "1834",
          "data": {
            "title": "Send new Clockify invoice to Notion database",
            "description": "This workflow sends a new Clockify invoice to a Notion database of your choosing when a new invoice is created in Clockify. Prerequisites Notion account and...",
            "author": "Igor Fediczko@igordisco",
            "use_case": "This workflow sends a new Clockify invoice to a Notion database of your choosing when a new invoice is created in Clockify.",
            "primary_category": "Strictly necessary",
            "secondary_categories": [
              "Performance",
              "Targeting",
              "Functionality",
              "Strictly necessary cookies allow core website functionality such as user login and account management. The website cannot be used properly without strictly necessary cookies.",
              "Performance cookies are used to see how visitors use the website, eg. analytics cookies. Those cookies cannot be used to directly identify a certain visitor.",
              "Targeting cookies are used to identify visitors between different websites, eg. content partners, banner networks. Those cookies may be used by companies to build a profile of visitor interests or show relevant ads on other websites.",
              "Functionality cookies are used to remember visitor information on the website, eg. language, timezone, enhanced content."
            ],
            "node_tags": [
              "github147,222",
              "hiring"
            ],
            "general_tags": [
              "Targeting",
              "Performance",
              "Strictly necessary",
              "Functionality"
            ],
            "difficulty_level": "intermediate",
            "views": 0,
            "upvotes": 0,
            "created_date": "2025-10-11T08:49:43.102365",
            "updated_date": "2025-10-11T08:49:43.102365",
            "setup_instructions": "This workflow sends a new Clockify invoice to a Notion database of your choosing when a new invoice is created in Clockify. Prerequisites Notion account and...",
            "prerequisites": [
              "token_v2",
              "or website it relates to",
              "{\n\t\tcontent: attr(label);\n\t\tfont-weight: bold;\n\t\twidth: 120px;\n\t\tmin-width: 120px;\n\t}",
              "Clockify account.",
              "visiting the said website"
            ],
            "estimated_setup_time": "4 minutes 59 sec",
            "industry": [
              "Strictly necessary"
            ]
          },
          "extraction_time": 7.835367202758789,
          "error": null
        },
        "layer2": {
          "success": true,
          "workflow_id": "1834",
          "data": {
            "id": 1834,
            "name": "Send new Clockify invoice to Notion database",
            "workflow": {
              "meta": {
                "instanceId": "237600ca44303ce91fa31ee72babcdc8493f55ee2c0e8aa2b78b3b4ce6f70bd9"
              },
              "nodes": [
                {
                  "id": "cc514d10-89cc-4fcf-8c1f-b65395cd168a",
                  "name": "On new invoice in Clockify",
                  "type": "n8n-nodes-base.webhook",
                  "position": [
                    460,
                    460
                  ],
                  "webhookId": "8af31ab8-e16a-4401-84b7-b246c65ba6a9",
                  "parameters": {
                    "path": "8af31ab8-e16a-4401-84b7-b246c65ba6a9",
                    "options": {},
                    "httpMethod": "POST"
                  },
                  "typeVersion": 1
                },
                {
                  "id": "ef9e5ce6-cb3e-4cb9-b33d-3b05a2ab589d",
                  "name": "Create database page",
                  "type": "n8n-nodes-base.notion",
                  "position": [
                    680,
                    460
                  ],
                  "parameters": {
                    "title": "={{ $json[\"body\"][\"number\"] }}",
                    "resource": "databasePage",
                    "databaseId": "ea3219a7-0a1a-4792-8dd6-ab450204dc06",
                    "propertiesUi": {
                      "propertyValues": [
                        {
                          "key": "Issue date|date",
                          "date": "={{ $json[\"body\"][\"issuedDate\"] }}"
                        },
                        {
                          "key": "Due date|date",
                          "date": "={{ $json[\"body\"][\"dueDate\"] }}"
                        },
                        {
                          "key": "Amount|number",
                          "numberValue": "={{ $json[\"body\"][\"amount\"] }}"
                        }
                      ]
                    }
                  },
                  "credentials": {
                    "notionApi": {
                      "id": "9",
                      "name": "[UPDATE ME]"
                    }
                  },
                  "typeVersion": 2
                },
                {
                  "id": "e2ecb86f-2f0c-4fe7-8919-e9095abdb5a0",
                  "name": "Note",
                  "type": "n8n-nodes-base.stickyNote",
                  "position": [
                    -60,
                    240
                  ],
                  "parameters": {
                    "width": 462,
                    "height": 595,
                    "content": "## Send new Clockify invoice to Notion database\n### How it works\n1. `On new invoice in Clockify` webhook node will trigger when a new invoice is created in Clockify. Setup is involved.\n2. `Create database page` Notion node will create a database page with the information specified from the Clockify trigger. You can add additional fields if required by following the setup.\n\n### Setup\n1. Create a Clockify webhook by going to the [webhooks section in Clockify](https://app.clockify.me/webhooks).\n2. Create the webhook specifying the \"Invoice created\" event and paste in the URL provided from `On new invoice in Clockify` webhook step.\n3. Now go to Notion and create a new database where we will store our Clockify invoices.\n4. In the new Notion database, create the following fields:\n    - Invoice number (renamed from \"Name\" field)\n    - Issue date (date field)\n    - Due date (date field)\n    - Amount (number field)\n5. If you want to add more fields to Notion, create those fields in Notion and map it accordingly in `Create database page` node."
                  },
                  "typeVersion": 1
                }
              ],
              "connections": {
                "On new invoice in Clockify": {
                  "main": [
                    [
                      {
                        "node": "Create database page",
                        "type": "main",
                        "index": 0
                      }
                    ]
                  ]
                }
              }
            }
          },
          "node_count": 3,
          "connection_count": 1,
          "extraction_time": 0.393736,
          "error": null
        },
        "layer3": {
          "success": true,
          "data": {
            "introduction": "This workflow sends a new Clockify invoice to a Notion database of your choosing when a new invoice is created in Clockify.PrerequisitesNotion account andNotion credentials.Clockify account.How it worksOn new invoice in Clockifywebhook node will trigger when a new invoice is created in Clockify. Setup is involved.Create database pageNotion node will create a database page with the information specified from the Clockify trigger. You can add additional fields if required by following the setup.SetupThis workflow requires that you set up a webhook in Clockify. Follow the steps below to set up the webhook:Create a Clockify webhook by going to thewebhooks section in Clockify.Create the webhook specifying the \"Invoice created\" event and paste in the URL provided fromOn new invoice in Clockifywebhook step.You will also have to set up a Notion database:In Notion, create a new database.Add the following columns to the database:Invoice number (renamed from \"Name\")Issue date (with type \"Date\")Due date (with type \"Date\")Amount (with type \"Number\")Add any other fields you require to the database.Share the database to n8n.By default, the workflow will fill all the fields provided above, except for any other additional fields you add.",
            "overview": "",
            "tutorial_text": "This workflow sends a new Clockify invoice to a Notion database of your choosing when a new invoice is created in Clockify.PrerequisitesNotion account andNotion credentials.Clockify account.How it worksOn new invoice in Clockifywebhook node will trigger when a new invoice is created in Clockify. Setup is involved.Create database pageNotion node will create a database page with the information specified from the Clockify trigger. You can add additional fields if required by following the setup.SetupThis workflow requires that you set up a webhook in Clockify. Follow the steps below to set up the webhook:Create a Clockify webhook by going to thewebhooks section in Clockify.Create the webhook specifying the \"Invoice created\" event and paste in the URL provided fromOn new invoice in Clockifywebhook step.You will also have to set up a Notion database:In Notion, create a new database.Add the following columns to the database:Invoice number (renamed from \"Name\")Issue date (with type \"Date\")Due date (with type \"Date\")Amount (with type \"Number\")Add any other fields you require to the database.Share the database to n8n.By default, the workflow will fill all the fields provided above, except for any other additional fields you add.",
            "tutorial_sections": [],
            "step_by_step": [],
            "best_practices": [],
            "common_pitfalls": [],
            "image_urls": [
              "https://n8n.io/nodes/webhook.svg",
              "https://n8n.io/nodes/notion.svg",
              "https://gravatar.com/avatar/b3d1a47322f05a8be3d2e7bad6a80c29161bd58b91e4762cbb3ac25e5d0db5a8?r=pg&d=retro&size=200",
              "https://n8n.io/nodes/github-trigger.svg",
              "https://n8n.io/nodes/http-request.svg",
              "https://n8n.io/nodes/merge.svg",
              "https://n8n.io/nodes/google-sheets.svg",
              "https://gravatar.com/avatar/4ab99e51473df76838beeaac908747f7928c625f869794815cabe34016967d51?r=pg&d=retro&size=200",
              "https://gravatar.com/avatar/e1fc0901703aede75c35d38ff26caf8e44b424893e1330efb483d68f5f67e059?r=pg&d=retro&size=200",
              "https://gravatar.com/avatar/50caca5ec3d609653f1b77216e53528b6e8412467a86c526dd0821c86253dbc1?r=pg&d=retro&size=200",
              "https://n8n.io/images/stars-footer.svg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/avatar_igordisco_9243b86232_cd9a5c94ce.jpg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/neutral_avatar_purple_fee36bffe3.PNG",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/avatar_anderoav_589989fc39_ceb1c71a0c.jpg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/avatar_maxim_poulsen_48f450887b_852d0439bc.jpeg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/Felix_Leber_f7a5b3c776_130aeca79d.jpeg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/avatar_Ironben_0a4b3e7d12_e35805265c.jpg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/Francois_lassl_d5cfb504c7_710c87121d.jpeg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/twitter_x_62a44e965e.svg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/github_e1f217d7a3_b9a271324f.svg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/discord_253947c90b_191e8f60fa.svg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/linkedin_d710e84d63_6ed0dc28aa.svg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/youtube_de4bdef50a_4b3a8b8aac.svg"
            ],
            "video_urls": [],
            "code_snippets": [],
            "conclusion": "",
            "troubleshooting": {
              "common_issues": [],
              "error_messages": []
            },
            "related_workflows": []
          },
          "errors": [],
          "extraction_time": 5.786767,
          "metadata": {
            "workflow_id": "1834",
            "url": "https://n8n.io/workflows/1834",
            "extracted_at": "2025-10-11T08:49:45.586357",
            "extractor_version": "1.0.0"
          }
        }
      },
      "multimodal": null,
      "transcripts": null,
      "validation": {
        "layer1": {
          "score": 80,
          "issues": [
            "Difficulty level not set",
            "No engagement metrics available"
          ],
          "valid": true,
          "layer": "layer1"
        },
        "layer2": {
          "score": 100,
          "issues": [],
          "valid": true,
          "layer": "layer2"
        },
        "layer3": {
          "score": 35,
          "issues": [
            "No tutorial sections extracted",
            "No images extracted",
            "Missing required fields: title, description, steps",
            "No step-by-step content extracted"
          ],
          "valid": false,
          "layer": "layer3"
        }
      },
      "quality": {
        "overall_score": 70.0,
        "classification": "Fair",
        "layer1_score": 80,
        "layer2_score": 100,
        "layer3_score": 35,
        "consistency_score": 100.0,
        "total_issues": 6
      },
      "extraction_time": 15.492980003356934,
      "errors": [],
      "timestamp": "2025-10-11T08:49:35.920207"
    },
    {
      "success": true,
      "workflow_id": "2109",
      "url": "https://n8n.io/workflows/2109",
      "layers": {
        "layer1": {
          "success": true,
          "workflow_id": "2109",
          "data": {
            "title": "Enrich new Discourse members with Clearbit then notify in Slack",
            "description": "Who is this template for?This workflow template is designed for Sales and Customer Success professionals seeking alerts when potential high-value users,...",
            "author": "Igor Fediczko@igordisco",
            "use_case": "Who is this template for?This workflow template is designed for Sales and Customer Success professionals seeking alerts when potential high-value users,.",
            "primary_category": "Strictly necessary",
            "secondary_categories": [
              "Performance",
              "Targeting",
              "Functionality",
              "Strictly necessary cookies allow core website functionality such as user login and account management. The website cannot be used properly without strictly necessary cookies.",
              "Performance cookies are used to see how visitors use the website, eg. analytics cookies. Those cookies cannot be used to directly identify a certain visitor.",
              "Targeting cookies are used to identify visitors between different websites, eg. content partners, banner networks. Those cookies may be used by companies to build a profile of visitor interests or show relevant ads on other websites.",
              "Functionality cookies are used to remember visitor information on the website, eg. language, timezone, enhanced content."
            ],
            "node_tags": [
              "github147,222",
              "hiring"
            ],
            "general_tags": [
              "Targeting",
              "Performance",
              "Strictly necessary",
              "Functionality"
            ],
            "difficulty_level": "intermediate",
            "views": 0,
            "upvotes": 0,
            "created_date": "2025-10-11T08:49:44.762328",
            "updated_date": "2025-10-11T08:49:44.762328",
            "setup_instructions": "Who is this template for?This workflow template is designed for Sales and Customer Success professionals seeking alerts when potential high-value users,...",
            "prerequisites": [
              "token_v2",
              "or website it relates to",
              "After filtering out popular private email accounts, we run the member's email through Clearbit to f",
              "{\n\t\tcontent: attr(label);\n\t\tfont-weight: bold;\n\t\twidth: 120px;\n\t\tmin-width: 120px;\n\t}",
              "visiting the said website"
            ],
            "estimated_setup_time": "4 minutes 59 sec",
            "industry": [
              "Strictly necessary"
            ]
          },
          "extraction_time": 9.10347318649292,
          "error": null
        },
        "layer2": {
          "success": true,
          "workflow_id": "2109",
          "data": {
            "id": 2109,
            "name": "Enrich new Discourse members with Clearbit then notify in Slack",
            "workflow": {
              "meta": {
                "instanceId": "cb484ba7b742928a2048bf8829668bed5b5ad9787579adea888f05980292a4a7"
              },
              "nodes": [
                {
                  "id": "8916c4a2-00a1-4c57-a661-0433a71ab316",
                  "name": "Filter out common personal emails",
                  "type": "n8n-nodes-base.filter",
                  "notes": "Saves on Enrichment credits",
                  "position": [
                    1000,
                    360
                  ],
                  "parameters": {
                    "options": {},
                    "conditions": {
                      "options": {
                        "leftValue": "",
                        "caseSensitive": true,
                        "typeValidation": "strict"
                      },
                      "combinator": "or",
                      "conditions": [
                        {
                          "id": "31a3f64f-cce1-44c3-938c-f18e85c670f3",
                          "operator": {
                            "type": "string",
                            "operation": "notContains"
                          },
                          "leftValue": "={{ $json.body.user.email }}",
                          "rightValue": "@gmail."
                        },
                        {
                          "id": "60087832-5f76-4dcc-bfe6-c899b3623af7",
                          "operator": {
                            "type": "string",
                            "operation": "notContains"
                          },
                          "leftValue": "={{ $json.body.user.email }}",
                          "rightValue": "@yahoo."
                        },
                        {
                          "id": "7fd74d31-ef3d-4a06-aee1-202ade476c10",
                          "operator": {
                            "type": "string",
                            "operation": "notContains"
                          },
                          "leftValue": "={{ $json.body.user.email }}",
                          "rightValue": "@hotmail."
                        },
                        {
                          "id": "4f86817c-53ec-4a80-a961-b4c9bd0c8f7c",
                          "operator": {
                            "type": "string",
                            "operation": "notContains"
                          },
                          "leftValue": "={{ $json.body.user.email }}",
                          "rightValue": "@proton."
                        }
                      ]
                    }
                  },
                  "notesInFlow": true,
                  "typeVersion": 2
                },
                {
                  "id": "bf4c1985-71ae-4bb2-86e0-8f795f89620e",
                  "name": "No clearbit enrichment available",
                  "type": "n8n-nodes-base.noOp",
                  "position": [
                    1520,
                    520
                  ],
                  "parameters": {},
                  "typeVersion": 1
                },
                {
                  "id": "0ee7d23a-f6c7-4651-9f4c-b4b041326145",
                  "name": "Sticky Note1",
                  "type": "n8n-nodes-base.stickyNote",
                  "position": [
                    1720,
                    540
                  ],
                  "parameters": {
                    "color": 7,
                    "width": 314.8866754976157,
                    "height": 119.43509109499996,
                    "content": "**\ud83d\udc48 Optional**\nIf the workflow ends here, the email wasn't found in Clearbit. Consider checking with another enrichment service or sending a Slack message for manual verification."
                  },
                  "typeVersion": 1
                },
                {
                  "id": "93d1b345-2954-4bb2-8c13-510bb48f730a",
                  "name": "Sticky Note2",
                  "type": "n8n-nodes-base.stickyNote",
                  "position": [
                    1660,
                    120
                  ],
                  "parameters": {
                    "color": 7,
                    "width": 194,
                    "height": 101,
                    "content": "**Optional \ud83d\udc47**\nChange filter criteria here to determine what \"high value\" means for you "
                  },
                  "typeVersion": 1
                },
                {
                  "id": "ad2823cf-861f-4302-8c8a-51700fbe9602",
                  "name": "Enrich user with Clearbit",
                  "type": "n8n-nodes-base.clearbit",
                  "notes": " Clearbit returns a 404 error (and in n8n empty output payload) when email is not found",
                  "onError": "continueErrorOutput",
                  "position": [
                    1220,
                    360
                  ],
                  "parameters": {
                    "email": "={{ $json.body.user.email }}",
                    "resource": "person",
                    "additionalFields": {}
                  },
                  "credentials": {
                    "clearbitApi": {
                      "id": "fJAEKGUyTHSl0EpC",
                      "name": "max@n8n.io (use carefully!)"
                    }
                  },
                  "notesInFlow": true,
                  "typeVersion": 1
                },
                {
                  "id": "60c5727e-3e9e-48dd-8534-8b89ede90594",
                  "name": "Get company info",
                  "type": "n8n-nodes-base.clearbit",
                  "position": [
                    1500,
                    280
                  ],
                  "parameters": {
                    "domain": "={{ $json.employment.domain }}",
                    "additionalFields": {}
                  },
                  "credentials": {
                    "clearbitApi": {
                      "id": "fJAEKGUyTHSl0EpC",
                      "name": "max@n8n.io (use carefully!)"
                    }
                  },
                  "typeVersion": 1
                },
                {
                  "id": "f5abe4a5-bbe9-4024-a448-c855d7bd8f54",
                  "name": "Filter for high value leads",
                  "type": "n8n-nodes-base.filter",
                  "position": [
                    1700,
                    280
                  ],
                  "parameters": {
                    "options": {},
                    "conditions": {
                      "options": {
                        "leftValue": "",
                        "caseSensitive": true,
                        "typeValidation": "strict"
                      },
                      "combinator": "and",
                      "conditions": [
                        {
                          "id": "90e62611-28d9-465a-b98e-bf866589363e",
                          "operator": {
                            "type": "number",
                            "operation": "gte"
                          },
                          "leftValue": "={{ $json.metrics.employees }}",
                          "rightValue": 30
                        },
                        {
                          "id": "06c5fd69-1423-4442-bd8f-f61e5c119a39",
                          "operator": {
                            "type": "number",
                            "operation": "lte"
                          },
                          "leftValue": "={{ $json.metrics.alexaGlobalRank }}",
                          "rightValue": 100000
                        }
                      ]
                    }
                  },
                  "typeVersion": 2
                },
                {
                  "id": "fd6cab51-0146-401d-b2ef-75780b6e8bd7",
                  "name": "Sticky Note3",
                  "type": "n8n-nodes-base.stickyNote",
                  "position": [
                    600,
                    11.812931088613368
                  ],
                  "parameters": {
                    "color": 6,
                    "width": 312.11707638995097,
                    "height": 309.60234316641487,
                    "content": "### Enrich new Discourse members then notify in Slack for high value leads\n### [\ud83c\udfa5 Watch set up video (~2min)](https://www.loom.com/share/d379895004374ddc85dc9171ca37c139?sid=0996f0d2-aff2-45a7-aae9-c62df4fb0799)\n![Example result in Slack](https://i.ibb.co/s9MfsjV/Screenshot-2024-02-21-at-13-51-29.png#full-width)\n\n"
                  },
                  "typeVersion": 1
                },
                {
                  "id": "5a2e98f1-c681-4a2e-b88c-473069a12b9a",
                  "name": "On new Discourse user",
                  "type": "n8n-nodes-base.webhook",
                  "position": [
                    640,
                    360
                  ],
                  "webhookId": "06e900e8-9a4f-4786-bd79-928459c36e68",
                  "parameters": {
                    "path": "abde7a49-208b-4bce-bcb9-910c4e529b06",
                    "options": {},
                    "httpMethod": "POST"
                  },
                  "typeVersion": 1.1
                },
                {
                  "id": "baa0ed59-75a2-4cdb-a540-073bf505bc43",
                  "name": "Post message in Channel",
                  "type": "n8n-nodes-base.slack",
                  "position": [
                    1900,
                    280
                  ],
                  "parameters": {
                    "text": "Test message!",
                    "select": "channel",
                    "blocksUi": "={\n\t\"blocks\": [\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"text\": {\n\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\"text\": \"A high value lead just signed up on our Discourse community \ud83d\udc47\"\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"context\",\n\t\t\t\"elements\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"image\",\n\t\t\t\t\t\"image_url\": \"{{ $('Enrich user with Clearbit').item.json[\"avatar\"] }}\",\n\t\t\t\t\t\"alt_text\": \"User's profile avatar\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*{{ $('Enrich user with Clearbit').item.json[\"name\"][\"fullName\"] }}*, *{{ $('Enrich user with Clearbit').item.json[\"employment\"][\"title\"] }}* at *{{ $('Enrich user with Clearbit').item.json[\"employment\"][\"name\"] }}* ({{ $json[\"category\"][\"industry\"] }})\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"divider\"\n\t\t},\n\t\t{\n\t\t\t\"type\": \"actions\",\n\t\t\t\"block_id\": \"actionblock789\",\n\t\t\t\"elements\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"button\",\n\t\t\t\t\t\"text\": {\n\t\t\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\t\t\"text\": \"Open LinkedIn Profile\"\n\t\t\t\t\t},\n\t\t\t\t\t\"style\": \"primary\",\n\t\t\t\t\t\"url\": \"https://www.linkedin.com/{{ $('Enrich user with Clearbit').item.json[\"linkedin\"][\"handle\"]}}\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"button\",\n\t\t\t\t\t\"text\": {\n\t\t\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\t\t\"text\": \"Email {{ $('Enrich user with Clearbit').item.json[\"name\"][\"givenName\"] }} \"\n\t\t\t\t\t},\n\t\t\t\t\t\"url\": \"mailto:{{ $('On new Discourse user').item.json[\"body\"][\"user\"][\"email\"] }}\"\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t]\n}",
                    "channelId": {
                      "__rl": true,
                      "mode": "name",
                      "value": "#team-design"
                    },
                    "messageType": "block",
                    "otherOptions": {}
                  },
                  "credentials": {
                    "slackApi": {
                      "id": "114",
                      "name": "n8n Slack"
                    }
                  },
                  "typeVersion": 2.1
                },
                {
                  "id": "3f9687f4-0bb4-4e46-9beb-e37eb632bb95",
                  "name": "Sticky Note",
                  "type": "n8n-nodes-base.stickyNote",
                  "position": [
                    600,
                    520
                  ],
                  "parameters": {
                    "color": 7,
                    "width": 330.80402248919853,
                    "height": 159.6208789325232,
                    "content": "**1. \u261d\ufe0f Set up `On new Discourse user` Trigger and Webhook in Discourse**\n\nOpen `https://{Your discourse root domain}/admin/api/web_hooks/new/edit` to create a new Webhook in Discourse. See detailed instructions in [\ud83c\udfa5 set up video](https://www.loom.com/share/d379895004374ddc85dc9171ca37c139?t=32&sid=da64c668-f7f5-4d49-982e-d1e72fb77fcc)\n"
                  },
                  "typeVersion": 1
                },
                {
                  "id": "3223fcb7-dddb-4566-a6c3-340bd1a8b3e3",
                  "name": "Sticky Note4",
                  "type": "n8n-nodes-base.stickyNote",
                  "position": [
                    1900,
                    120
                  ],
                  "parameters": {
                    "color": 7,
                    "width": 249.15806405688022,
                    "height": 124.16286220264169,
                    "content": "**2. \ud83d\udc47 Set up `Post message in Channel`  node**\nChange `Channel` parameter to your channel like `#sales` or `#townsquare`\n"
                  },
                  "typeVersion": 1
                }
              ],
              "pinData": {},
              "connections": {
                "Get company info": {
                  "main": [
                    [
                      {
                        "node": "Filter for high value leads",
                        "type": "main",
                        "index": 0
                      }
                    ]
                  ]
                },
                "On new Discourse user": {
                  "main": [
                    [
                      {
                        "node": "Filter out common personal emails",
                        "type": "main",
                        "index": 0
                      }
                    ]
                  ]
                },
                "Enrich user with Clearbit": {
                  "main": [
                    [
                      {
                        "node": "Get company info",
                        "type": "main",
                        "index": 0
                      }
                    ],
                    [
                      {
                        "node": "No clearbit enrichment available",
                        "type": "main",
                        "index": 0
                      }
                    ]
                  ]
                },
                "Filter for high value leads": {
                  "main": [
                    [
                      {
                        "node": "Post message in Channel",
                        "type": "main",
                        "index": 0
                      }
                    ]
                  ]
                },
                "Filter out common personal emails": {
                  "main": [
                    [
                      {
                        "node": "Enrich user with Clearbit",
                        "type": "main",
                        "index": 0
                      }
                    ]
                  ]
                }
              }
            }
          },
          "node_count": 12,
          "connection_count": 5,
          "extraction_time": 0.255862,
          "error": null
        },
        "layer3": {
          "success": true,
          "data": {
            "introduction": "Who is this template for?This workflow template is designed forSalesandCustomer Successprofessionals seeking alerts when potential high-value users, prospects, or existing customers register for a Discourse community. Leveraging Clearbit, it retrieves enriched data for the new member to assess their value.Example result in SlackHow it worksEach time a new member is created in Discourse, the workflow runs (powered by Discourse's native Webhooks feature).After filtering out popular private email accounts, we run the member's email through Clearbit to fetch available information on the member as well as their organization.If the enriched data meets certain criteria, we send a Slack message to a channel. This message has a few quick actions:Open LinkedIn profileandEmail memberSetup instructionsOverview is below. Watch this\ud83c\udfa5 quick set up videofor detailed instructions on how to get the template running, as well as how to customize it.Complete theSet up credentialsstep when you first open the workflow. You'll need a Discourse (admin user), Clearbit, and Slack account.Set up the Webhook in Discourse, linking theOn new Discourse userTrigger with your Discourse community.Set the correct channel to send to in thePost message in channelstepAfter testing your workflow, swap the Test URL to Production URL in Discourse and activate your workflowTemplate was created in n8nv1.29.1",
            "overview": "",
            "tutorial_text": "Who is this template for?This workflow template is designed forSalesandCustomer Successprofessionals seeking alerts when potential high-value users, prospects, or existing customers register for a Discourse community. Leveraging Clearbit, it retrieves enriched data for the new member to assess their value.Example result in SlackHow it worksEach time a new member is created in Discourse, the workflow runs (powered by Discourse's native Webhooks feature).After filtering out popular private email accounts, we run the member's email through Clearbit to fetch available information on the member as well as their organization.If the enriched data meets certain criteria, we send a Slack message to a channel. This message has a few quick actions:Open LinkedIn profileandEmail memberSetup instructionsOverview is below. Watch this\ud83c\udfa5 quick set up videofor detailed instructions on how to get the template running, as well as how to customize it.Complete theSet up credentialsstep when you first open the workflow. You'll need a Discourse (admin user), Clearbit, and Slack account.Set up the Webhook in Discourse, linking theOn new Discourse userTrigger with your Discourse community.Set the correct channel to send to in thePost message in channelstepAfter testing your workflow, swap the Test URL to Production URL in Discourse and activate your workflowTemplate was created in n8nv1.29.1",
            "tutorial_sections": [],
            "step_by_step": [],
            "best_practices": [],
            "common_pitfalls": [],
            "image_urls": [
              "https://n8n.io/nodes/slack.svg",
              "https://n8n.io/nodes/webhook.svg",
              "https://gravatar.com/avatar/c8f1965a9ff2bef51826e127081be880010ce5f0e3a3fc8ffd54e944d58bd2df?r=pg&d=retro&size=200",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/Screenshot_2024_02_21_at_13_51_29_030961dc1b.png",
              "https://n8n.io/nodes/http-request.svg",
              "https://n8n.io/nodes/respond-to-webhook.svg",
              "https://n8n.io/nodes/google-sheets.svg",
              "https://gravatar.com/avatar/e57785a112fbcca1ac70d537a9ed5c5a68be59f808ed8b36475bde0e2c8f384b?r=pg&d=retro&size=200",
              "https://gravatar.com/avatar/2b74c7f530e250439f5d752f2623ead4921fbb8aef56343c922b2873ef8a619f?r=pg&d=retro&size=200",
              "https://n8n.io/nodes/merge.svg",
              "https://gravatar.com/avatar/b0a32f127a6ad690cd4ee808cb4d1b59d3b5e53410181d54f91d10c0027ebb43?r=pg&d=retro&size=200",
              "https://n8n.io/images/stars-footer.svg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/avatar_igordisco_9243b86232_cd9a5c94ce.jpg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/neutral_avatar_purple_fee36bffe3.PNG",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/avatar_anderoav_589989fc39_ceb1c71a0c.jpg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/avatar_maxim_poulsen_48f450887b_852d0439bc.jpeg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/Felix_Leber_f7a5b3c776_130aeca79d.jpeg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/avatar_Ironben_0a4b3e7d12_e35805265c.jpg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/Francois_lassl_d5cfb504c7_710c87121d.jpeg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/twitter_x_62a44e965e.svg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/github_e1f217d7a3_b9a271324f.svg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/discord_253947c90b_191e8f60fa.svg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/linkedin_d710e84d63_6ed0dc28aa.svg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/youtube_de4bdef50a_4b3a8b8aac.svg"
            ],
            "video_urls": [],
            "code_snippets": [],
            "conclusion": "",
            "troubleshooting": {
              "common_issues": [],
              "error_messages": []
            },
            "related_workflows": []
          },
          "errors": [],
          "extraction_time": 5.641184,
          "metadata": {
            "workflow_id": "2109",
            "url": "https://n8n.io/workflows/2109",
            "extracted_at": "2025-10-11T08:49:46.727848",
            "extractor_version": "1.0.0"
          }
        }
      },
      "multimodal": null,
      "transcripts": null,
      "validation": {
        "layer1": {
          "score": 80,
          "issues": [
            "Difficulty level not set",
            "No engagement metrics available"
          ],
          "valid": true,
          "layer": "layer1"
        },
        "layer2": {
          "score": 100,
          "issues": [],
          "valid": true,
          "layer": "layer2"
        },
        "layer3": {
          "score": 35,
          "issues": [
            "No tutorial sections extracted",
            "No images extracted",
            "Missing required fields: title, description, steps",
            "No step-by-step content extracted"
          ],
          "valid": false,
          "layer": "layer3"
        }
      },
      "quality": {
        "overall_score": 70.0,
        "classification": "Fair",
        "layer1_score": 80,
        "layer2_score": 100,
        "layer3_score": 35,
        "consistency_score": 100.0,
        "total_issues": 6
      },
      "extraction_time": 15.863006353378296,
      "errors": [],
      "timestamp": "2025-10-11T08:49:36.549639"
    },
    {
      "success": true,
      "workflow_id": "1974",
      "url": "https://n8n.io/workflows/1974",
      "layers": {
        "layer1": {
          "success": true,
          "workflow_id": "1974",
          "data": {
            "title": "Monitor Security Advisories",
            "description": "This n8n workflow automates the monitoring and notification of Palo Alto Networks security advisories. It is triggered manually from within the n8n UI or...",
            "author": "Igor Fediczko@igordisco",
            "use_case": "This n8n workflow automates the monitoring and notification of Palo Alto Networks security advisories.",
            "primary_category": "Strictly necessary",
            "secondary_categories": [
              "Performance",
              "Targeting",
              "Functionality",
              "Strictly necessary cookies allow core website functionality such as user login and account management. The website cannot be used properly without strictly necessary cookies.",
              "Performance cookies are used to see how visitors use the website, eg. analytics cookies. Those cookies cannot be used to directly identify a certain visitor.",
              "Targeting cookies are used to identify visitors between different websites, eg. content partners, banner networks. Those cookies may be used by companies to build a profile of visitor interests or show relevant ads on other websites.",
              "Functionality cookies are used to remember visitor information on the website, eg. language, timezone, enhanced content."
            ],
            "node_tags": [
              "github147,222",
              "hiring"
            ],
            "general_tags": [
              "Targeting",
              "Performance",
              "Strictly necessary",
              "Functionality"
            ],
            "difficulty_level": "intermediate",
            "views": 0,
            "upvotes": 0,
            "created_date": "2025-10-11T08:49:47.925348",
            "updated_date": "2025-10-11T08:49:47.925348",
            "setup_instructions": "This n8n workflow automates the monitoring and notification of Palo Alto Networks security advisories. It is triggered manually from within the n8n UI or...",
            "prerequisites": [
              "token_v2",
              "or website it relates to",
              "identify and resolve any potential issues during setup.",
              "{\n\t\tcontent: attr(label);\n\t\tfont-weight: bold;\n\t\twidth: 120px;\n\t\tmin-width: 120px;\n\t}",
              "visiting the said website"
            ],
            "estimated_setup_time": "4 minutes 59 sec",
            "industry": [
              "Strictly necessary"
            ]
          },
          "extraction_time": 8.593043088912964,
          "error": null
        },
        "layer2": {
          "success": true,
          "workflow_id": "1974",
          "data": {
            "id": 1974,
            "name": "Monitor Security Advisories",
            "workflow": {
              "id": "YSjQ7TVCNY9v1F2A",
              "meta": {
                "instanceId": "03e9d14e9196363fe7191ce21dc0bb17387a6e755dcc9acc4f5904752919dca8"
              },
              "name": "Monitor_security_advisories",
              "tags": [
                {
                  "id": "DlIeVDZxzko5ifNi",
                  "name": "createdBy:David",
                  "createdAt": "2023-10-31T02:21:50.700Z",
                  "updatedAt": "2023-10-31T02:21:50.700Z"
                },
                {
                  "id": "QPJKatvLSxxtrE8U",
                  "name": "Secops",
                  "createdAt": "2023-10-31T02:15:11.396Z",
                  "updatedAt": "2023-10-31T02:15:11.396Z"
                },
                {
                  "id": "oyHT7KfD0rdIizVw",
                  "name": "Pending",
                  "createdAt": "2023-11-10T23:19:06.319Z",
                  "updatedAt": "2023-11-10T23:19:06.319Z"
                }
              ],
              "nodes": [
                {
                  "id": "62ef1311-a623-4a7d-b59a-6c0a0d7751d7",
                  "name": "When clicking \"Execute Workflow\"",
                  "type": "n8n-nodes-base.manualTrigger",
                  "position": [
                    100,
                    200
                  ],
                  "parameters": {},
                  "typeVersion": 1
                },
                {
                  "id": "808c1b88-69e9-4e96-bcfd-b93810740fda",
                  "name": "Get Palo Alto security advisories",
                  "type": "n8n-nodes-base.rssFeedRead",
                  "position": [
                    400,
                    360
                  ],
                  "parameters": {
                    "url": "https://security.paloaltonetworks.com/rss.xml",
                    "options": {}
                  },
                  "typeVersion": 1
                },
                {
                  "id": "97f16fe1-c720-40e0-85ff-61fdbfb9a2c2",
                  "name": "GlobalProtect advisory?",
                  "type": "n8n-nodes-base.filter",
                  "position": [
                    1240,
                    240
                  ],
                  "parameters": {
                    "conditions": {
                      "string": [
                        {
                          "value1": "={{ $json.title }}",
                          "value2": "GlobalProtect",
                          "operation": "contains"
                        }
                      ]
                    }
                  },
                  "typeVersion": 1
                },
                {
                  "id": "3602f7bb-87d3-49a2-9916-b9ab7d86f58b",
                  "name": "Traps advisory?",
                  "type": "n8n-nodes-base.filter",
                  "position": [
                    1240,
                    380
                  ],
                  "parameters": {
                    "conditions": {
                      "string": [
                        {
                          "value1": "={{ $json.title }}",
                          "value2": "Traps",
                          "operation": "contains"
                        }
                      ]
                    }
                  },
                  "typeVersion": 1
                },
                {
                  "id": "97c108f0-bdf1-4ed9-a545-d52acb7c9cec",
                  "name": "Create Jira issue",
                  "type": "n8n-nodes-base.jira",
                  "position": [
                    1520,
                    240
                  ],
                  "parameters": {
                    "project": {
                      "__rl": true,
                      "mode": "list",
                      "value": ""
                    },
                    "summary": "={{ $json.title.substring(14) }}",
                    "issueType": {
                      "__rl": true,
                      "mode": "list",
                      "value": ""
                    },
                    "additionalFields": {
                      "priority": {
                        "mode": "list",
                        "value": ""
                      },
                      "description": "=Severity: {{ $json.title.split('(Severity:')[1].replace(')', '').trim() }}\nLink: {{ $json.link }}\nPublished: {{ $json.pubDate }} "
                    }
                  },
                  "credentials": {
                    "jiraSoftwareCloudApi": {
                      "id": "4",
                      "name": "Jira Ricardo"
                    }
                  },
                  "typeVersion": 1
                },
                {
                  "id": "acb89eb0-c9e5-4fbb-a750-3607ae280670",
                  "name": "Get customers",
                  "type": "n8n-nodes-base.n8nTrainingCustomerDatastore",
                  "position": [
                    1960,
                    380
                  ],
                  "parameters": {
                    "operation": "getAllPeople",
                    "returnAll": true
                  },
                  "typeVersion": 1
                },
                {
                  "id": "babf1ce4-6ed4-4bd9-a1df-429a15fa6849",
                  "name": "Sticky Note",
                  "type": "n8n-nodes-base.stickyNote",
                  "position": [
                    -13.168003380834136,
                    -396.06737036843754
                  ],
                  "parameters": {
                    "width": 332.0284684971131,
                    "height": 926.523360092614,
                    "content": "![Shodan](https://i.imgur.com/PcOuvAL.png)\n## Workflow Overview\nThis n8n workflow is designed to streamline security oversight by fetching advisories from Palo Alto's feed and filtering out alerts not pertinent to your products. \n\nBy utilizing a dynamic filter system, it excludes unrelated advisories, ensuring that your team receives only relevant security updates. \n\nCoupled with a sample database of emails, this workflow offers a customizable solution to align with any corporate email directory, providing a strong foundation for your security information management strategy. \n\n## Execution Schedule\n\nScheduled to run every 24 hours at 1 am. If you change this timer, ensure to update the `Deduplicate Advisories` section to match. \n"
                  },
                  "typeVersion": 1
                },
                {
                  "id": "820112fc-e635-4d51-b152-8a2ee4de8f56",
                  "name": "Email customers",
                  "type": "n8n-nodes-base.gmail",
                  "position": [
                    2360,
                    380
                  ],
                  "parameters": {
                    "sendTo": "={{ $json.email }}",
                    "message": "=Dear {{ $json.name.split(' ')[0] }},\n\nWe wanted to let you know of a new security advisory:\n\n{{ $('GlobalProtect advisory?').item.json.title }}\n{{ $('GlobalProtect advisory?').item.json.link }}\n\nRegards,\n\nNathan",
                    "options": {},
                    "subject": "=New {{ $('Extract info').item.json.type }} security advisory "
                  },
                  "credentials": {
                    "gmailOAuth2": {
                      "id": "198",
                      "name": "Gmail account (David)"
                    }
                  },
                  "typeVersion": 2
                },
                {
                  "id": "06497e48-37ea-4c2a-a633-6b0f02d1da5f",
                  "name": "Extract info",
                  "type": "n8n-nodes-base.set",
                  "position": [
                    600,
                    360
                  ],
                  "parameters": {
                    "values": {
                      "string": [
                        {
                          "name": "type",
                          "value": "={{ $json.title.match(/[^ ]* ([^:]*):/)[1].trim() }}"
                        },
                        {
                          "name": "subject",
                          "value": "={{ $json.title.match(/[^ ]* [^:]*: (.*)(?=\\(Severity:)/)[1].trim() }}"
                        },
                        {
                          "name": "severity",
                          "value": "={{ $json.title.split('Severity:')[1].replaceAll(')', '').trim().toLowerCase().toTitleCase() }}"
                        }
                      ]
                    },
                    "options": {}
                  },
                  "typeVersion": 2
                },
                {
                  "id": "79a85d6e-2550-4351-9356-6f2f8c330693",
                  "name": "Sticky Note1",
                  "type": "n8n-nodes-base.stickyNote",
                  "position": [
                    340,
                    -54.852630774649356
                  ],
                  "parameters": {
                    "width": 419.37209302325573,
                    "height": 577.9223982165106,
                    "content": "![Shodan](https://i.imgur.com/weKPN2E.png)\n## Get Palo Alto security advisories\nAdaptable and efficient, this segment of the workflow retrieves Palo Alto security advisories directly through their RSS feed. \n\nYou can tailor the feed URL in the RSS node below to meet your needs and ensure the `Extract Info` node captures the correct information. \n\nThis flexibility allows the workflow to stay current with the latest advisories, making it a vital component in maintaining up-to-date security measures across your network infrastructure.\n"
                  },
                  "typeVersion": 1
                },
                {
                  "id": "f2c5155d-28ab-4ae4-a402-5244ccac94e3",
                  "name": "Check if posted in last 24 hours",
                  "type": "n8n-nodes-base.if",
                  "position": [
                    920,
                    360
                  ],
                  "parameters": {
                    "conditions": {
                      "dateTime": [
                        {
                          "value1": "={{ $json.pubDate }}",
                          "value2": "={{$today.minus({days: 1})}}"
                        }
                      ]
                    }
                  },
                  "typeVersion": 1
                },
                {
                  "id": "a3553ba4-3581-4844-abaf-e872cb6dc7ea",
                  "name": "Sticky Note2",
                  "type": "n8n-nodes-base.stickyNote",
                  "position": [
                    1751,
                    -366.68188678732713
                  ],
                  "parameters": {
                    "width": 461.89918009735027,
                    "height": 893.2712326436663,
                    "content": "![n8n](https://i.imgur.com/lKnBNnH.png)\n## Query Company Email Directory\nThe workflow includes a sample node setup that queries a company email directory, allowing for dynamic distribution of advisories to relevant personnel. \n\nReplace the sample node with a connection to your corporate directory or a Google Sheet for an integrated approach. If you choose to go the google sheets route, create a column for `name` and a column for `email` and use the Google Sheets node to get the rows. \n\nThis ensures that every advisory reaches the appropriate individual, promoting a proactive security posture organization-wide.\n\nEnsure that the node you use outputs the json in this format:\n\n```\n[\n  {\n    \"name\": \"Jay Gatsby\",\n    \"email\": \"gatsby@west-egg.com\"\n  },\n  {\n    \"name\": \"Jos\u00e9 Arcadio Buend\u00eda\",\n    \"email\": \"jab@macondo.co\"\n  },\n  {\n    \"name\": \"Max Sendak\",\n    \"email\": \"info@in-and-out-of-weeks.org\"\n  }\n]\n```"
                  },
                  "typeVersion": 1
                },
                {
                  "id": "4c6a7aac-8aa3-480e-9691-bfa5472d3d91",
                  "name": "Sticky Note3",
                  "type": "n8n-nodes-base.stickyNote",
                  "position": [
                    2240,
                    -113.74332300803701
                  ],
                  "parameters": {
                    "width": 324.2540832882642,
                    "height": 639.8357317519218,
                    "content": "![gmail](https://i.imgur.com/f6f6my0.png)\n## Email advisory information to your team\nOnce advisories are filtered and prepared, this final node uses Gmail to disseminate the information to your team, ensuring that those who need to be aware of security updates are informed in a timely manner. \n\nThis step is pivotal in the communication chain, turning advisories into actionable insights for your team, thereby promoting a culture of responsiveness and awareness regarding network security.\n\nYou can replace this with your preferred email provider by substituting the node and expressions in the Gmail node. "
                  },
                  "typeVersion": 1
                },
                {
                  "id": "75aae5d6-bcaf-4d69-9adf-f71075b16318",
                  "name": "Sticky Note4",
                  "type": "n8n-nodes-base.stickyNote",
                  "position": [
                    1180,
                    -320
                  ],
                  "parameters": {
                    "width": 552.9069767441861,
                    "height": 844.9721583936011,
                    "content": "![Jira](https://i.imgur.com/Ko72Qxa.png)\n## Filter advisories based on Palo Alto Products used in your organization \nThis node enhances specificity by filtering advisories based on the Palo Alto products utilized within your organization. \n\nBy customizing the filter nodes to match your environment, you create a streamlined process that directs pertinent advisories to a Jira issue (or any incident management system that uses an API) for further investigation, ensuring your incident management process is both efficient and tailored to your specific security landscape.\n\n**Want to add a new filter?** Duplicate one of the `filter nodes` below and connect it to the `true output` of the date filter node, decide whether you wish to add an incident management node, and then connect to your email directory node.\n \n**Want to create a ticket for your team to investigate if an advisory is found for your filtered product/keyword?** Simply add the node for your favorite incident management platform if it exists, and an http request if it doesn't to integrate with any REST api.\n"
                  },
                  "typeVersion": 1
                },
                {
                  "id": "4c34c8aa-3876-4248-9c5e-cd362ffb6833",
                  "name": "Sticky Note5",
                  "type": "n8n-nodes-base.stickyNote",
                  "position": [
                    780,
                    -176.24786257310654
                  ],
                  "parameters": {
                    "width": 382.81395348837174,
                    "height": 700.2899123297333,
                    "content": "![n8n](https://i.imgur.com/lKnBNnH.png)\n## Deduplicate Advisories\n### Filter advisories based on date \nTo maintain accuracy and avoid redundancy, this n8n node deduplicates advisories by date, ensuring that each security notice is unique and relevant. \n\nIt's programmed to sync with the scheduled trigger, preventing any overlap in data analysis. \n\nAdjustments can be made to alter the frequency and timing of the trigger, allowing for weekly or custom schedules, demonstrating n8n's versatile capability to adapt to your operational requirements.\n\nFor example if you preferred to change it to weekly, set the `Trigger Node` to run weekly, and adjust the expression in the `If` node below from `{{$today.minus({days: 1})}}` to `{{$today.minus({days: 7})}}`."
                  },
                  "typeVersion": 1
                },
                {
                  "id": "518de294-2961-419b-b936-3519fc4bdcf8",
                  "name": "Ignore, stale advisory",
                  "type": "n8n-nodes-base.noOp",
                  "position": [
                    1220,
                    600
                  ],
                  "parameters": {},
                  "typeVersion": 1
                },
                {
                  "id": "699ba4b3-ef02-4e7c-8894-c302566ac5e7",
                  "name": "Run workflow every 24 hours at 1am",
                  "type": "n8n-nodes-base.scheduleTrigger",
                  "position": [
                    100,
                    360
                  ],
                  "parameters": {
                    "rule": {
                      "interval": [
                        {
                          "triggerAtHour": 1
                        }
                      ]
                    }
                  },
                  "typeVersion": 1.1
                }
              ],
              "active": false,
              "pinData": {},
              "settings": {
                "executionOrder": "v1"
              },
              "versionId": "e64a6ec2-b231-4cb7-9d36-8933c844d482",
              "connections": {
                "Extract info": {
                  "main": [
                    [
                      {
                        "node": "Check if posted in last 24 hours",
                        "type": "main",
                        "index": 0
                      }
                    ]
                  ]
                },
                "Get customers": {
                  "main": [
                    [
                      {
                        "node": "Email customers",
                        "type": "main",
                        "index": 0
                      }
                    ]
                  ]
                },
                "Traps advisory?": {
                  "main": [
                    [
                      {
                        "node": "Get customers",
                        "type": "main",
                        "index": 0
                      }
                    ]
                  ]
                },
                "Create Jira issue": {
                  "main": [
                    [
                      {
                        "node": "Get customers",
                        "type": "main",
                        "index": 0
                      }
                    ]
                  ]
                },
                "GlobalProtect advisory?": {
                  "main": [
                    [
                      {
                        "node": "Create Jira issue",
                        "type": "main",
                        "index": 0
                      }
                    ]
                  ]
                },
                "Check if posted in last 24 hours": {
                  "main": [
                    [
                      {
                        "node": "GlobalProtect advisory?",
                        "type": "main",
                        "index": 0
                      },
                      {
                        "node": "Traps advisory?",
                        "type": "main",
                        "index": 0
                      }
                    ],
                    [
                      {
                        "node": "Ignore, stale advisory",
                        "type": "main",
                        "index": 0
                      }
                    ]
                  ]
                },
                "When clicking \"Execute Workflow\"": {
                  "main": [
                    [
                      {
                        "node": "Get Palo Alto security advisories",
                        "type": "main",
                        "index": 0
                      }
                    ]
                  ]
                },
                "Get Palo Alto security advisories": {
                  "main": [
                    [
                      {
                        "node": "Extract info",
                        "type": "main",
                        "index": 0
                      }
                    ]
                  ]
                },
                "Run workflow every 24 hours at 1am": {
                  "main": [
                    [
                      {
                        "node": "Get Palo Alto security advisories",
                        "type": "main",
                        "index": 0
                      }
                    ]
                  ]
                }
              }
            }
          },
          "node_count": 17,
          "connection_count": 9,
          "extraction_time": 0.624363,
          "error": null
        },
        "layer3": {
          "success": true,
          "data": {
            "introduction": "This n8n workflow automates the monitoring and notification of Palo Alto Networks security advisories. It is triggered manually from within the n8n UI or scheduled to run daily at midnight using the Schedule Trigger. The workflow begins by fetching the latest security advisories from Palo Alto Networks' RSS feed.Each advisory is then processed, and relevant information is extracted and categorized, including the advisory type, subject, and severity. The workflow checks the publication date of each advisory to ensure that it was posted within the last 24 hours, filtering out older advisories.The workflow then splits into two paths based on the advisory type: GlobalProtect and Traps. In the GlobalProtect path, advisories related to GlobalProtect are identified and used to create Jira issues. The Jira issues include a summary with the advisory title and a description that provides details about the advisory, its severity, link, and publication date.In the Traps path, advisories related to Traps are recognized, and dummy data (which should be replaced with logic to retrieve valid user emails) is generated for sample purposes. These email addresses are then used to send email notifications using the Gmail node. Each email's subject includes the type of advisory, while the body contains the advisory title and a link for more information.Potential issues when setting up this workflow for the first time might involve configuring the Schedule Trigger to match the desired time zone. Additionally, ensuring that the Jira and Gmail nodes are configured correctly with the required credentials and email addresses is crucial. The placeholder for generating dummy data for email recipients should be replaced with logic to retrieve valid user emails. Proper error handling and testing with real and sample advisories can help identify and resolve any potential issues during setup.",
            "overview": "",
            "tutorial_text": "This n8n workflow automates the monitoring and notification of Palo Alto Networks security advisories. It is triggered manually from within the n8n UI or scheduled to run daily at midnight using the Schedule Trigger. The workflow begins by fetching the latest security advisories from Palo Alto Networks' RSS feed.Each advisory is then processed, and relevant information is extracted and categorized, including the advisory type, subject, and severity. The workflow checks the publication date of each advisory to ensure that it was posted within the last 24 hours, filtering out older advisories.The workflow then splits into two paths based on the advisory type: GlobalProtect and Traps. In the GlobalProtect path, advisories related to GlobalProtect are identified and used to create Jira issues. The Jira issues include a summary with the advisory title and a description that provides details about the advisory, its severity, link, and publication date.In the Traps path, advisories related to Traps are recognized, and dummy data (which should be replaced with logic to retrieve valid user emails) is generated for sample purposes. These email addresses are then used to send email notifications using the Gmail node. Each email's subject includes the type of advisory, while the body contains the advisory title and a link for more information.Potential issues when setting up this workflow for the first time might involve configuring the Schedule Trigger to match the desired time zone. Additionally, ensuring that the Jira and Gmail nodes are configured correctly with the required credentials and email addresses is crucial. The placeholder for generating dummy data for email recipients should be replaced with logic to retrieve valid user emails. Proper error handling and testing with real and sample advisories can help identify and resolve any potential issues during setup.",
            "tutorial_sections": [],
            "step_by_step": [],
            "best_practices": [],
            "common_pitfalls": [],
            "image_urls": [
              "https://gravatar.com/avatar/b3d1a47322f05a8be3d2e7bad6a80c29161bd58b91e4762cbb3ac25e5d0db5a8?r=pg&d=retro&size=200",
              "https://n8n.io/nodes/github-trigger.svg",
              "https://n8n.io/nodes/http-request.svg",
              "https://n8n.io/nodes/merge.svg",
              "https://n8n.io/nodes/gmail.svg",
              "https://gravatar.com/avatar/5388f694f455e66e83773a986d066ef4326c0f05c4e992a5184cddb27d7de00f?r=pg&d=retro&size=200",
              "https://n8n.io/nodes/google-sheets.svg",
              "https://gravatar.com/avatar/19e625b50be6c5e0f734a6e837828341ade4fa64ca3d52321ed95ead0bf4c270?r=pg&d=retro&size=200",
              "https://n8n.io/images/stars-footer.svg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/avatar_igordisco_9243b86232_cd9a5c94ce.jpg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/neutral_avatar_purple_fee36bffe3.PNG",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/avatar_anderoav_589989fc39_ceb1c71a0c.jpg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/avatar_maxim_poulsen_48f450887b_852d0439bc.jpeg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/Felix_Leber_f7a5b3c776_130aeca79d.jpeg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/avatar_Ironben_0a4b3e7d12_e35805265c.jpg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/Francois_lassl_d5cfb504c7_710c87121d.jpeg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/twitter_x_62a44e965e.svg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/github_e1f217d7a3_b9a271324f.svg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/discord_253947c90b_191e8f60fa.svg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/linkedin_d710e84d63_6ed0dc28aa.svg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/youtube_de4bdef50a_4b3a8b8aac.svg"
            ],
            "video_urls": [],
            "code_snippets": [],
            "conclusion": "",
            "troubleshooting": {
              "common_issues": [],
              "error_messages": []
            },
            "related_workflows": []
          },
          "errors": [],
          "extraction_time": 5.805096,
          "metadata": {
            "workflow_id": "1974",
            "url": "https://n8n.io/workflows/1974",
            "extracted_at": "2025-10-11T08:49:49.807267",
            "extractor_version": "1.0.0"
          }
        }
      },
      "multimodal": null,
      "transcripts": null,
      "validation": {
        "layer1": {
          "score": 80,
          "issues": [
            "Difficulty level not set",
            "No engagement metrics available"
          ],
          "valid": true,
          "layer": "layer1"
        },
        "layer2": {
          "score": 100,
          "issues": [],
          "valid": true,
          "layer": "layer2"
        },
        "layer3": {
          "score": 35,
          "issues": [
            "No tutorial sections extracted",
            "No images extracted",
            "Missing required fields: title, description, steps",
            "No step-by-step content extracted"
          ],
          "valid": false,
          "layer": "layer3"
        }
      },
      "quality": {
        "overall_score": 70.0,
        "classification": "Fair",
        "layer1_score": 80,
        "layer2_score": 100,
        "layer3_score": 35,
        "consistency_score": 100.0,
        "total_issues": 6
      },
      "extraction_time": 15.652622938156128,
      "errors": [],
      "timestamp": "2025-10-11T08:49:39.997273"
    },
    {
      "success": true,
      "workflow_id": "2268",
      "url": "https://n8n.io/workflows/2268",
      "layers": {
        "layer1": {
          "success": true,
          "workflow_id": "2268",
          "data": {
            "title": "Unknown Title",
            "description": "",
            "author": "Unknown Author",
            "use_case": "General workflow automation",
            "primary_category": "Strictly necessary",
            "secondary_categories": [
              "Performance",
              "Targeting",
              "Functionality",
              "Strictly necessary cookies allow core website functionality such as user login and account management. The website cannot be used properly without strictly necessary cookies.",
              "Performance cookies are used to see how visitors use the website, eg. analytics cookies. Those cookies cannot be used to directly identify a certain visitor.",
              "Targeting cookies are used to identify visitors between different websites, eg. content partners, banner networks. Those cookies may be used by companies to build a profile of visitor interests or show relevant ads on other websites.",
              "Functionality cookies are used to remember visitor information on the website, eg. language, timezone, enhanced content."
            ],
            "node_tags": [],
            "general_tags": [
              "Targeting",
              "Performance",
              "Strictly necessary",
              "Functionality"
            ],
            "difficulty_level": "intermediate",
            "views": 0,
            "upvotes": 0,
            "created_date": "2025-10-11T08:49:55.960284",
            "updated_date": "2025-10-11T08:49:55.960284",
            "setup_instructions": "",
            "prerequisites": [
              "token_v2",
              "or website it relates to",
              "{\n\t\tcontent: attr(label);\n\t\tfont-weight: bold;\n\t\twidth: 120px;\n\t\tmin-width: 120px;\n\t}",
              "visiting the said website",
              "__Secure-ROLLOUT_TOKEN"
            ],
            "estimated_setup_time": "4 minutes 59 sec",
            "industry": [
              "Strictly necessary"
            ]
          },
          "extraction_time": 4.9991559982299805,
          "error": null
        },
        "layer2": {
          "success": false,
          "workflow_id": "2268",
          "data": null,
          "node_count": 0,
          "connection_count": 0,
          "extraction_time": 0.447703,
          "error": "Workflow not found (404)"
        },
        "layer3": {
          "success": true,
          "data": {
            "introduction": "",
            "overview": "",
            "tutorial_text": "",
            "tutorial_sections": [],
            "step_by_step": [],
            "best_practices": [],
            "common_pitfalls": [],
            "image_urls": [],
            "video_urls": [],
            "code_snippets": [],
            "conclusion": "",
            "troubleshooting": {
              "common_issues": [],
              "error_messages": []
            },
            "related_workflows": []
          },
          "errors": [],
          "extraction_time": 5.600977,
          "metadata": {
            "workflow_id": "2268",
            "url": "https://n8n.io/workflows/2268",
            "extracted_at": "2025-10-11T08:49:57.771833",
            "extractor_version": "1.0.0"
          }
        }
      },
      "multimodal": null,
      "transcripts": null,
      "validation": {
        "layer1": {
          "score": 55,
          "issues": [
            "Description missing or too short (minimum 20 characters)",
            "Difficulty level not set",
            "Author not identified",
            "No engagement metrics available"
          ],
          "valid": false,
          "layer": "layer1"
        },
        "layer2": null,
        "layer3": {
          "score": 5,
          "issues": [
            "Tutorial text missing",
            "No tutorial sections extracted",
            "No images extracted",
            "Missing required fields: title, description, steps",
            "No step-by-step content extracted"
          ],
          "valid": false,
          "layer": "layer3"
        }
      },
      "quality": {
        "overall_score": 20.0,
        "classification": "Poor",
        "layer1_score": 55,
        "layer2_score": null,
        "layer3_score": 5,
        "consistency_score": 70.0,
        "total_issues": 9
      },
      "extraction_time": 11.996002674102783,
      "errors": [
        "Layer 2 extraction failed: Workflow not found (404)"
      ],
      "timestamp": "2025-10-11T08:49:51.413754"
    },
    {
      "success": true,
      "workflow_id": "1893",
      "url": "https://n8n.io/workflows/1893",
      "layers": {
        "layer1": {
          "success": true,
          "workflow_id": "1893",
          "data": {
            "title": "Unknown Title",
            "description": "",
            "author": "Unknown Author",
            "use_case": "General workflow automation",
            "primary_category": "Strictly necessary",
            "secondary_categories": [
              "Performance",
              "Targeting",
              "Functionality",
              "Strictly necessary cookies allow core website functionality such as user login and account management. The website cannot be used properly without strictly necessary cookies.",
              "Performance cookies are used to see how visitors use the website, eg. analytics cookies. Those cookies cannot be used to directly identify a certain visitor.",
              "Targeting cookies are used to identify visitors between different websites, eg. content partners, banner networks. Those cookies may be used by companies to build a profile of visitor interests or show relevant ads on other websites.",
              "Functionality cookies are used to remember visitor information on the website, eg. language, timezone, enhanced content."
            ],
            "node_tags": [],
            "general_tags": [
              "Targeting",
              "Performance",
              "Strictly necessary",
              "Functionality"
            ],
            "difficulty_level": "intermediate",
            "views": 0,
            "upvotes": 0,
            "created_date": "2025-10-11T08:49:57.168119",
            "updated_date": "2025-10-11T08:49:57.168119",
            "setup_instructions": "",
            "prerequisites": [
              "token_v2",
              "or website it relates to",
              "{\n\t\tcontent: attr(label);\n\t\tfont-weight: bold;\n\t\twidth: 120px;\n\t\tmin-width: 120px;\n\t}",
              "visiting the said website",
              "__Secure-ROLLOUT_TOKEN"
            ],
            "estimated_setup_time": "4 minutes 59 sec",
            "industry": [
              "Strictly necessary"
            ]
          },
          "extraction_time": 5.17763614654541,
          "error": null
        },
        "layer2": {
          "success": false,
          "workflow_id": "1893",
          "data": null,
          "node_count": 0,
          "connection_count": 0,
          "extraction_time": 0.306614,
          "error": "Workflow not found (404)"
        },
        "layer3": {
          "success": true,
          "data": {
            "introduction": "",
            "overview": "",
            "tutorial_text": "",
            "tutorial_sections": [],
            "step_by_step": [],
            "best_practices": [],
            "common_pitfalls": [],
            "image_urls": [],
            "video_urls": [],
            "code_snippets": [],
            "conclusion": "",
            "troubleshooting": {
              "common_issues": [],
              "error_messages": []
            },
            "related_workflows": []
          },
          "errors": [],
          "extraction_time": 5.804833,
          "metadata": {
            "workflow_id": "1893",
            "url": "https://n8n.io/workflows/1893",
            "extracted_at": "2025-10-11T08:49:58.497892",
            "extractor_version": "1.0.0"
          }
        }
      },
      "multimodal": null,
      "transcripts": null,
      "validation": {
        "layer1": {
          "score": 55,
          "issues": [
            "Description missing or too short (minimum 20 characters)",
            "Difficulty level not set",
            "Author not identified",
            "No engagement metrics available"
          ],
          "valid": false,
          "layer": "layer1"
        },
        "layer2": null,
        "layer3": {
          "score": 5,
          "issues": [
            "Tutorial text missing",
            "No tutorial sections extracted",
            "No images extracted",
            "Missing required fields: title, description, steps",
            "No step-by-step content extracted"
          ],
          "valid": false,
          "layer": "layer3"
        }
      },
      "quality": {
        "overall_score": 20.0,
        "classification": "Poor",
        "layer1_score": 55,
        "layer2_score": null,
        "layer3_score": 5,
        "consistency_score": 70.0,
        "total_issues": 9
      },
      "extraction_time": 11.93830394744873,
      "errors": [
        "Layer 2 extraction failed: Workflow not found (404)"
      ],
      "timestamp": "2025-10-11T08:49:52.412867"
    },
    {
      "success": true,
      "workflow_id": "2183",
      "url": "https://n8n.io/workflows/2183",
      "layers": {
        "layer1": {
          "success": true,
          "workflow_id": "2183",
          "data": {
            "title": "AI Crew to Automate Fundamental Stock Analysis - Q&A Workflow",
            "description": "How it works: Using a Crew of AI agents (Senior Researcher, Visionary, and Senior Editor), this crew will automatically determine the right questions to ask...",
            "author": "Igor Fediczko@igordisco",
            "use_case": "How it works: Using a Crew of AI agents (Senior Researcher, Visionary, and Senior Editor), this crew will automatically determine the right questions to ask.",
            "primary_category": "Strictly necessary",
            "secondary_categories": [
              "Performance",
              "Targeting",
              "Functionality",
              "Strictly necessary cookies allow core website functionality such as user login and account management. The website cannot be used properly without strictly necessary cookies.",
              "Performance cookies are used to see how visitors use the website, eg. analytics cookies. Those cookies cannot be used to directly identify a certain visitor.",
              "Targeting cookies are used to identify visitors between different websites, eg. content partners, banner networks. Those cookies may be used by companies to build a profile of visitor interests or show relevant ads on other websites.",
              "Functionality cookies are used to remember visitor information on the website, eg. language, timezone, enhanced content."
            ],
            "node_tags": [
              "github147,222",
              "hiring"
            ],
            "general_tags": [
              "Targeting",
              "Performance",
              "Strictly necessary",
              "Functionality"
            ],
            "difficulty_level": "intermediate",
            "views": 0,
            "upvotes": 0,
            "created_date": "2025-10-11T08:50:03.620968",
            "updated_date": "2025-10-11T08:50:03.620968",
            "setup_instructions": "How it works: Using a Crew of AI agents (Senior Researcher, Visionary, and Senior Editor), this crew will automatically determine the right questions to ask...",
            "prerequisites": [
              "token_v2",
              "or website it relates to",
              "{\n\t\tcontent: attr(label);\n\t\tfont-weight: bold;\n\t\twidth: 120px;\n\t\tmin-width: 120px;\n\t}",
              "visiting the said website",
              "__Secure-ROLLOUT_TOKEN"
            ],
            "estimated_setup_time": "4 minutes 59 sec",
            "industry": [
              "Strictly necessary"
            ]
          },
          "extraction_time": 8.673945903778076,
          "error": null
        },
        "layer2": {
          "success": true,
          "workflow_id": "2183",
          "data": {
            "id": 2183,
            "name": "AI Crew to Automate Fundamental Stock Analysis - Q&A Workflow  ",
            "workflow": {
              "meta": {
                "instanceId": "408f9fb9940c3cb18ffdef0e0150fe342d6e655c3a9fac21f0f644e8bedabcd9",
                "templateCredsSetupCompleted": true
              },
              "nodes": [
                {
                  "id": "01730710-e299-4e66-93e9-6079fdf9b8b7",
                  "name": "Sticky Note1",
                  "type": "n8n-nodes-base.stickyNote",
                  "position": [
                    2120,
                    0
                  ],
                  "parameters": {
                    "color": 6,
                    "width": 903.0896125323785,
                    "height": 733.5099670584011,
                    "content": "## Step 2: Setup the Q&A \n### The incoming message from the webhook is queried from the Supabase Vector Store.  The response is provided in the response webhook.  "
                  },
                  "typeVersion": 1
                },
                {
                  "id": "66aed89e-fd72-4067-82bf-d480be27e5d6",
                  "name": "When clicking \"Execute Workflow\"",
                  "type": "n8n-nodes-base.manualTrigger",
                  "position": [
                    840,
                    140
                  ],
                  "parameters": {},
                  "typeVersion": 1
                },
                {
                  "id": "9dc8f2a7-eeff-4a35-be52-05c42b71eee4",
                  "name": "Google Drive",
                  "type": "n8n-nodes-base.googleDrive",
                  "position": [
                    1140,
                    140
                  ],
                  "parameters": {
                    "fileId": {
                      "__rl": true,
                      "mode": "list",
                      "value": "1LZezppYrWpMStr4qJXtoIX-Dwzvgehll",
                      "cachedResultUrl": "https://drive.google.com/file/d/1LZezppYrWpMStr4qJXtoIX-Dwzvgehll/view?usp=drivesdk",
                      "cachedResultName": "crowdstrike.pdf"
                    },
                    "options": {},
                    "operation": "download"
                  },
                  "credentials": {
                    "googleDriveOAuth2Api": {
                      "id": "yOwz41gMQclOadgu",
                      "name": "Google Drive account"
                    }
                  },
                  "typeVersion": 3
                },
                {
                  "id": "1dd3d3fd-6c2e-4e23-9c82-b0d07b199de3",
                  "name": "Sticky Note",
                  "type": "n8n-nodes-base.stickyNote",
                  "position": [
                    1100,
                    0
                  ],
                  "parameters": {
                    "color": 6,
                    "width": 772.0680602743597,
                    "height": 732.3675002130781,
                    "content": "## Step 1: Upserting the PDF\n### Fetch file from Google Drive, split it into chunks and insert into Supabase index\n\n"
                  },
                  "typeVersion": 1
                },
                {
                  "id": "4796124f-bc12-4353-b7ea-ec8cd7653e68",
                  "name": "Sticky Note2",
                  "type": "n8n-nodes-base.stickyNote",
                  "position": [
                    0,
                    0
                  ],
                  "parameters": {
                    "color": 6,
                    "width": 710.9124489067698,
                    "height": 726.4452519516944,
                    "content": "## Start here: Step-by Step Youtube Tutorial :star:\n\n[![Building an AI Crew to Analyze Financial Data with CrewAI and n8n](https://img.youtube.com/vi/pMvizUx5n1g/sddefault.jpg)](https://www.youtube.com/watch?v=pMvizUx5n1g)\n"
                  },
                  "typeVersion": 1
                },
                {
                  "id": "1e2ecc88-c8c7-4687-a2a1-b20b0da9b772",
                  "name": "Default Data Loader",
                  "type": "@n8n/n8n-nodes-langchain.documentDefaultDataLoader",
                  "position": [
                    1400,
                    320
                  ],
                  "parameters": {
                    "options": {
                      "splitPages": true
                    },
                    "dataType": "binary"
                  },
                  "typeVersion": 1
                },
                {
                  "id": "6dd8545d-df8c-49ff-acf6-f8c150723ee8",
                  "name": "Recursive Character Text Splitter1",
                  "type": "@n8n/n8n-nodes-langchain.textSplitterRecursiveCharacterTextSplitter",
                  "position": [
                    1400,
                    460
                  ],
                  "parameters": {
                    "options": {},
                    "chunkSize": 3000,
                    "chunkOverlap": 200
                  },
                  "typeVersion": 1
                },
                {
                  "id": "6899e2d6-965a-40cd-a34f-a61de8fd32ef",
                  "name": "Qdrant Vector Store",
                  "type": "@n8n/n8n-nodes-langchain.vectorStoreQdrant",
                  "position": [
                    1480,
                    140
                  ],
                  "parameters": {
                    "mode": "insert",
                    "options": {},
                    "qdrantCollection": {
                      "__rl": true,
                      "mode": "id",
                      "value": "crowd"
                    }
                  },
                  "credentials": {
                    "qdrantApi": {
                      "id": "NyinAS3Pgfik66w5",
                      "name": "QdrantApi account"
                    }
                  },
                  "typeVersion": 1.1
                },
                {
                  "id": "6136c6fb-3d20-44a7-ab00-6c5671bafa10",
                  "name": "When chat message received",
                  "type": "@n8n/n8n-nodes-langchain.chatTrigger",
                  "disabled": true,
                  "position": [
                    2180,
                    120
                  ],
                  "webhookId": "551107fb-b349-4e2b-a888-febe5e282734",
                  "parameters": {
                    "options": {}
                  },
                  "typeVersion": 1.1
                },
                {
                  "id": "c970f654-4c79-4637-bec0-73f79a01ab59",
                  "name": "Webhook",
                  "type": "n8n-nodes-base.webhook",
                  "position": [
                    2180,
                    320
                  ],
                  "webhookId": "55b825ad-8987-4618-ae92-d9b08966324b",
                  "parameters": {
                    "path": "19f5499a-3083-4783-93a0-e8ed76a9f742",
                    "options": {},
                    "httpMethod": "POST",
                    "responseMode": "responseNode"
                  },
                  "typeVersion": 2
                },
                {
                  "id": "e05e9046-de17-4ca1-b1ac-2502ee123e5f",
                  "name": "Retrieval QA Chain",
                  "type": "@n8n/n8n-nodes-langchain.chainRetrievalQa",
                  "position": [
                    2420,
                    120
                  ],
                  "parameters": {
                    "text": "={{ $json.chatInput || $json.body.input }}",
                    "options": {},
                    "promptType": "define"
                  },
                  "typeVersion": 1.5
                },
                {
                  "id": "ecf0d248-a8a9-45ed-8786-8864547f79b6",
                  "name": "Vector Store Retriever",
                  "type": "@n8n/n8n-nodes-langchain.retrieverVectorStore",
                  "position": [
                    2580,
                    320
                  ],
                  "parameters": {
                    "topK": 5
                  },
                  "typeVersion": 1
                },
                {
                  "id": "4fb1d8ac-bc6f-4f99-965f-7d38ea0680e0",
                  "name": "Qdrant Vector Store1",
                  "type": "@n8n/n8n-nodes-langchain.vectorStoreQdrant",
                  "position": [
                    2540,
                    460
                  ],
                  "parameters": {
                    "options": {},
                    "qdrantCollection": {
                      "__rl": true,
                      "mode": "id",
                      "value": "={{ $json.body.company }}"
                    }
                  },
                  "credentials": {
                    "qdrantApi": {
                      "id": "NyinAS3Pgfik66w5",
                      "name": "QdrantApi account"
                    }
                  },
                  "typeVersion": 1.1
                },
                {
                  "id": "66868422-39c9-4e76-99b9-a77bb613b248",
                  "name": "OpenAI Chat Model",
                  "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
                  "position": [
                    2420,
                    340
                  ],
                  "parameters": {
                    "model": {
                      "__rl": true,
                      "mode": "list",
                      "value": "gpt-4o-mini"
                    },
                    "options": {}
                  },
                  "credentials": {
                    "openAiApi": {
                      "id": "8gccIjcuf3gvaoEr",
                      "name": "OpenAi account"
                    }
                  },
                  "typeVersion": 1.2
                },
                {
                  "id": "f290f809-3b4e-42e3-bfb5-d505566d9275",
                  "name": "Embeddings OpenAI1",
                  "type": "@n8n/n8n-nodes-langchain.embeddingsOpenAi",
                  "position": [
                    2520,
                    580
                  ],
                  "parameters": {
                    "options": {}
                  },
                  "credentials": {
                    "openAiApi": {
                      "id": "8gccIjcuf3gvaoEr",
                      "name": "OpenAi account"
                    }
                  },
                  "typeVersion": 1.2
                },
                {
                  "id": "c360f7b3-2ae4-4ebd-85ca-f64c3966e65d",
                  "name": "Embeddings OpenAI",
                  "type": "@n8n/n8n-nodes-langchain.embeddingsOpenAi",
                  "position": [
                    1700,
                    320
                  ],
                  "parameters": {
                    "options": {}
                  },
                  "credentials": {
                    "openAiApi": {
                      "id": "8gccIjcuf3gvaoEr",
                      "name": "OpenAi account"
                    }
                  },
                  "typeVersion": 1.2
                },
                {
                  "id": "9223d119-b5a7-40d4-b8da-f85951b52bde",
                  "name": "Respond to Webhook",
                  "type": "n8n-nodes-base.respondToWebhook",
                  "position": [
                    2840,
                    120
                  ],
                  "parameters": {
                    "options": {},
                    "respondWith": "text",
                    "responseBody": "={{ $json.response.text }}"
                  },
                  "typeVersion": 1.1
                }
              ],
              "pinData": {},
              "connections": {
                "Webhook": {
                  "main": [
                    [
                      {
                        "node": "Retrieval QA Chain",
                        "type": "main",
                        "index": 0
                      }
                    ]
                  ]
                },
                "Google Drive": {
                  "main": [
                    [
                      {
                        "node": "Qdrant Vector Store",
                        "type": "main",
                        "index": 0
                      }
                    ]
                  ]
                },
                "Embeddings OpenAI": {
                  "ai_embedding": [
                    [
                      {
                        "node": "Qdrant Vector Store",
                        "type": "ai_embedding",
                        "index": 0
                      }
                    ]
                  ]
                },
                "OpenAI Chat Model": {
                  "ai_languageModel": [
                    [
                      {
                        "node": "Retrieval QA Chain",
                        "type": "ai_languageModel",
                        "index": 0
                      }
                    ]
                  ]
                },
                "Embeddings OpenAI1": {
                  "ai_embedding": [
                    [
                      {
                        "node": "Qdrant Vector Store1",
                        "type": "ai_embedding",
                        "index": 0
                      }
                    ]
                  ]
                },
                "Retrieval QA Chain": {
                  "main": [
                    [
                      {
                        "node": "Respond to Webhook",
                        "type": "main",
                        "index": 0
                      }
                    ]
                  ]
                },
                "Default Data Loader": {
                  "ai_document": [
                    [
                      {
                        "node": "Qdrant Vector Store",
                        "type": "ai_document",
                        "index": 0
                      }
                    ]
                  ]
                },
                "Qdrant Vector Store1": {
                  "ai_vectorStore": [
                    [
                      {
                        "node": "Vector Store Retriever",
                        "type": "ai_vectorStore",
                        "index": 0
                      }
                    ]
                  ]
                },
                "Vector Store Retriever": {
                  "ai_retriever": [
                    [
                      {
                        "node": "Retrieval QA Chain",
                        "type": "ai_retriever",
                        "index": 0
                      }
                    ]
                  ]
                },
                "When chat message received": {
                  "main": [
                    [
                      {
                        "node": "Retrieval QA Chain",
                        "type": "main",
                        "index": 0
                      }
                    ]
                  ]
                },
                "When clicking \"Execute Workflow\"": {
                  "main": [
                    [
                      {
                        "node": "Google Drive",
                        "type": "main",
                        "index": 0
                      }
                    ]
                  ]
                },
                "Recursive Character Text Splitter1": {
                  "ai_textSplitter": [
                    [
                      {
                        "node": "Default Data Loader",
                        "type": "ai_textSplitter",
                        "index": 0
                      }
                    ]
                  ]
                }
              }
            }
          },
          "node_count": 17,
          "connection_count": 12,
          "extraction_time": 0.337669,
          "error": null
        },
        "layer3": {
          "success": true,
          "data": {
            "introduction": "How it works:Using a Crew of AI agents (Senior Researcher, Visionary, and Senior Editor), this crew will automatically determine the right questions to ask to produce a detailed fundamental stock analysis.This application has two components: a front-end and a Stock Q&A engine.The front end is the team of agents automatically figuring out the questions to ask, and the back-end part is the ability to answer those questions with the SEC 10K data.This template implements the Stock Q&A engine.For the front-end of the application, you can choose one of two options:using CrewAI with the Replit environment (code approach)fully visual approach with n8n template (AI-powered automated stock analysis)Setup steps:Use first workflow in template to upsert a company annual report PDF (such as from SEC 10K filling)Get URL for Webhook in second workflow templateCrewAI front-end:Youtube overview videoFork this AI Agent environmentCrew Agent EnvironmentSet the webhook URL into N8N_WEBHOOK_URL variableSet OpenAI_API_KEY variable",
            "overview": "",
            "tutorial_text": "How it works:Using a Crew of AI agents (Senior Researcher, Visionary, and Senior Editor), this crew will automatically determine the right questions to ask to produce a detailed fundamental stock analysis.This application has two components: a front-end and a Stock Q&A engine.The front end is the team of agents automatically figuring out the questions to ask, and the back-end part is the ability to answer those questions with the SEC 10K data.This template implements the Stock Q&A engine.For the front-end of the application, you can choose one of two options:using CrewAI with the Replit environment (code approach)fully visual approach with n8n template (AI-powered automated stock analysis)Setup steps:Use first workflow in template to upsert a company annual report PDF (such as from SEC 10K filling)Get URL for Webhook in second workflow templateCrewAI front-end:Youtube overview videoFork this AI Agent environmentCrew Agent EnvironmentSet the webhook URL into N8N_WEBHOOK_URL variableSet OpenAI_API_KEY variable",
            "tutorial_sections": [],
            "step_by_step": [],
            "best_practices": [],
            "common_pitfalls": [],
            "image_urls": [
              "https://n8n.io/nodes/webhook.svg",
              "https://n8n.io/nodes/google-drive.svg",
              "https://n8n.io/nodes/respond-to-webhook.svg",
              "https://gravatar.com/avatar/1d8dbb30401a76425734d4319abbaa38548b7572064ca080740bbfe60324772a?r=pg&d=retro&size=200",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/stock_ai_explainer_diagram_5315d55a70.png",
              "https://n8n.io/nodes/http-request.svg",
              "https://n8n.io/nodes/telegram.svg",
              "https://n8n.io/nodes/telegram-trigger.svg",
              "https://n8n.io/nodes/merge.svg",
              "https://gravatar.com/avatar/781e87029e4a7d11be463acd014686df7502fe4e7e906a3d5c5e6be73fc7ee56?r=pg&d=retro&size=200",
              "https://gravatar.com/avatar/75f9b1e2ecae02776012dc68bee99c4e2e23d6f4ffab185151ffa6f233dfce02?r=pg&d=retro&size=200",
              "https://gravatar.com/avatar/42969f2af3975748ca65af3f31b1b39f0c82eb685c2df0ad8cefa9f99b408dbd?r=pg&d=retro&size=200",
              "https://n8n.io/nodes/google-drive-trigger.svg",
              "https://gravatar.com/avatar/a73ca84b07b557e95322815bc04859245e9243c7cfd5bf9a14568fd0ce3e72c5?r=pg&d=retro&size=200",
              "https://n8n.io/nodes/binary-input-loader.svg",
              "https://gravatar.com/avatar/4cda9c7c1c24fdb61896cac588296d1dad03655a439ab71ef34f4c62c0ba8524?r=pg&d=retro&size=200",
              "https://n8n.io/nodes/openai-chat-model.svg",
              "https://n8n.io/images/stars-footer.svg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/avatar_igordisco_9243b86232_cd9a5c94ce.jpg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/neutral_avatar_purple_fee36bffe3.PNG",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/avatar_anderoav_589989fc39_ceb1c71a0c.jpg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/avatar_maxim_poulsen_48f450887b_852d0439bc.jpeg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/Felix_Leber_f7a5b3c776_130aeca79d.jpeg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/avatar_Ironben_0a4b3e7d12_e35805265c.jpg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/Francois_lassl_d5cfb504c7_710c87121d.jpeg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/twitter_x_62a44e965e.svg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/github_e1f217d7a3_b9a271324f.svg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/discord_253947c90b_191e8f60fa.svg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/linkedin_d710e84d63_6ed0dc28aa.svg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/youtube_de4bdef50a_4b3a8b8aac.svg"
            ],
            "video_urls": [
              "https://www.youtube.com/watch?v=pMvizUx5n1g"
            ],
            "code_snippets": [],
            "conclusion": "",
            "troubleshooting": {
              "common_issues": [],
              "error_messages": []
            },
            "related_workflows": []
          },
          "errors": [],
          "extraction_time": 6.060672,
          "metadata": {
            "workflow_id": "2183",
            "url": "https://n8n.io/workflows/2183",
            "extracted_at": "2025-10-11T08:50:05.396424",
            "extractor_version": "1.0.0"
          }
        }
      },
      "multimodal": null,
      "transcripts": null,
      "validation": {
        "layer1": {
          "score": 80,
          "issues": [
            "Difficulty level not set",
            "No engagement metrics available"
          ],
          "valid": true,
          "layer": "layer1"
        },
        "layer2": {
          "score": 100,
          "issues": [],
          "valid": true,
          "layer": "layer2"
        },
        "layer3": {
          "score": 35,
          "issues": [
            "No tutorial sections extracted",
            "No images extracted",
            "Missing required fields: title, description, steps",
            "No step-by-step content extracted"
          ],
          "valid": false,
          "layer": "layer3"
        }
      },
      "quality": {
        "overall_score": 70.0,
        "classification": "Fair",
        "layer1_score": 80,
        "layer2_score": 100,
        "layer3_score": 35,
        "consistency_score": 100.0,
        "total_issues": 6
      },
      "extraction_time": 15.845241069793701,
      "errors": [],
      "timestamp": "2025-10-11T08:49:55.650515"
    },
    {
      "success": true,
      "workflow_id": "1821",
      "url": "https://n8n.io/workflows/1821",
      "layers": {
        "layer1": {
          "success": true,
          "workflow_id": "1821",
          "data": {
            "title": "Sync Zendesk tickets with subsequent comments to Asana tasks",
            "description": "This workflow creates an Asana task when a new ticket is created in Zendesk. Subsequent comments on the ticket in Zendesk are added as comments to the task...",
            "author": "Igor Fediczko@igordisco",
            "use_case": "This workflow creates an Asana task when a new ticket is created in Zendesk.",
            "primary_category": "Strictly necessary",
            "secondary_categories": [
              "Performance",
              "Targeting",
              "Functionality",
              "Strictly necessary cookies allow core website functionality such as user login and account management. The website cannot be used properly without strictly necessary cookies.",
              "Performance cookies are used to see how visitors use the website, eg. analytics cookies. Those cookies cannot be used to directly identify a certain visitor.",
              "Targeting cookies are used to identify visitors between different websites, eg. content partners, banner networks. Those cookies may be used by companies to build a profile of visitor interests or show relevant ads on other websites.",
              "Functionality cookies are used to remember visitor information on the website, eg. language, timezone, enhanced content."
            ],
            "node_tags": [
              "github147,222",
              "hiring"
            ],
            "general_tags": [
              "Targeting",
              "Performance",
              "Strictly necessary",
              "Functionality"
            ],
            "difficulty_level": "intermediate",
            "views": 0,
            "upvotes": 0,
            "created_date": "2025-10-11T08:50:11.947134",
            "updated_date": "2025-10-11T08:50:11.947134",
            "setup_instructions": "This workflow creates an Asana task when a new ticket is created in Zendesk. Subsequent comments on the ticket in Zendesk are added as comments to the task...",
            "prerequisites": [
              "token_v2",
              "or website it relates to",
              "{\n\t\tcontent: attr(label);\n\t\tfont-weight: bold;\n\t\twidth: 120px;\n\t\tmin-width: 120px;\n\t}",
              "visiting the said website",
              "Zendesk account and Zendesk credentials"
            ],
            "estimated_setup_time": "4 minutes 59 sec",
            "industry": [
              "Strictly necessary"
            ]
          },
          "extraction_time": 9.226093769073486,
          "error": null
        },
        "layer2": {
          "success": true,
          "workflow_id": "1821",
          "data": {
            "id": 1821,
            "name": "Sync Zendesk tickets with subsequent comments to Asana tasks",
            "workflow": {
              "meta": {
                "instanceId": "237600ca44303ce91fa31ee72babcdc8493f55ee2c0e8aa2b78b3b4ce6f70bd9"
              },
              "nodes": [
                {
                  "id": "1c041974-2a1f-4464-be3e-70b8a700f40d",
                  "name": "Get ticket",
                  "type": "n8n-nodes-base.zendesk",
                  "position": [
                    460,
                    480
                  ],
                  "parameters": {
                    "id": "={{$node[\"On new Zendesk ticket\"].json[\"body\"][\"id\"]}}",
                    "operation": "get"
                  },
                  "credentials": {
                    "zendeskApi": {
                      "id": "24",
                      "name": "[UPDATE ME]"
                    }
                  },
                  "typeVersion": 1
                },
                {
                  "id": "a4a05b2a-2382-44af-8226-a2c60bee1ce3",
                  "name": "Create task",
                  "type": "n8n-nodes-base.asana",
                  "position": [
                    1000,
                    580
                  ],
                  "parameters": {
                    "name": "={{$node[\"Get ticket\"].json[\"subject\"]}}",
                    "workspace": "1177253494675264",
                    "otherProperties": {
                      "assignee": "1202718619090236",
                      "assignee_status": "inbox"
                    }
                  },
                  "credentials": {
                    "asanaApi": {
                      "id": "8",
                      "name": "[UPDATE ME]"
                    }
                  },
                  "typeVersion": 1
                },
                {
                  "id": "55128ee9-9210-4341-bf9a-2e4ea415b668",
                  "name": "IF",
                  "type": "n8n-nodes-base.if",
                  "position": [
                    820,
                    480
                  ],
                  "parameters": {
                    "conditions": {
                      "string": [
                        {
                          "value1": "={{$node[\"Determine\"].json[\"Asana GID\"]}}",
                          "operation": "isNotEmpty"
                        }
                      ]
                    }
                  },
                  "typeVersion": 1
                },
                {
                  "id": "6319045c-7df8-4031-b738-835f8fe12d06",
                  "name": "Update ticket",
                  "type": "n8n-nodes-base.zendesk",
                  "notes": "Update the Zendesk ticket by adding the Jira issue key to the \"Jira Issue Key\" field.",
                  "position": [
                    1180,
                    580
                  ],
                  "parameters": {
                    "id": "={{$node[\"On new Zendesk ticket\"].json[\"body\"][\"id\"]}}",
                    "operation": "update",
                    "updateFields": {
                      "customFieldsUi": {
                        "customFieldsValues": [
                          {
                            "id": 6707064637597,
                            "value": "={{$node[\"Create task\"].json[\"gid\"]}}"
                          }
                        ]
                      }
                    }
                  },
                  "credentials": {
                    "zendeskApi": {
                      "id": "24",
                      "name": "[UPDATE ME]"
                    }
                  },
                  "notesInFlow": true,
                  "typeVersion": 1
                },
                {
                  "id": "39172e43-def7-4e05-9ce3-6d0bb1c3ff59",
                  "name": "Determine",
                  "type": "n8n-nodes-base.function",
                  "notes": "if issue was created already in Jira",
                  "position": [
                    640,
                    480
                  ],
                  "parameters": {
                    "functionCode": "/* configure here =========================================================== */\n/*  Zendesk field ID which represents the \"Jira Issue Key\" field.\n*/\nconst ISSUE_KEY_FIELD_ID = 6707064637597;\n\n/* ========================================================================== */\nnew_items = [];\n\nfor (item of $items(\"Get ticket\")) {\n    \n    // instantiate a new variable for status\n    var custom_fields = item.json[\"custom_fields\"];\n    var asana_gid = \"\";\n    for (var i = 0; i < custom_fields.length; i++) {\n        if (custom_fields[i].id == ISSUE_KEY_FIELD_ID) {\n            asana_gid = custom_fields[i].value;\n            break;\n        }\n    }\n\n    // push the new item to the new_items array\n    new_items.push({\n        \"Asana GID\": asana_gid\n    });\n}\n\nreturn new_items;"
                  },
                  "notesInFlow": true,
                  "typeVersion": 1
                },
                {
                  "id": "26f2aaf3-8b21-429f-bfec-c5876792d4b9",
                  "name": "Create comment on existing task",
                  "type": "n8n-nodes-base.asana",
                  "position": [
                    1000,
                    380
                  ],
                  "parameters": {
                    "id": "={{$node[\"Determine\"].json[\"Asana GID\"]}}",
                    "text": "=<body>{{$node[\"On new Zendesk ticket\"].json[\"body\"][\"comment\"]}}</body>",
                    "resource": "taskComment",
                    "isTextHtml": true,
                    "additionalFields": {}
                  },
                  "credentials": {
                    "asanaApi": {
                      "id": "8",
                      "name": "[UPDATE ME]"
                    }
                  },
                  "typeVersion": 1
                },
                {
                  "id": "bbbf0fc1-3fa7-4a15-a949-c8d9d5e32031",
                  "name": "On new Zendesk ticket",
                  "type": "n8n-nodes-base.webhook",
                  "position": [
                    280,
                    480
                  ],
                  "webhookId": "4637a853-0b3a-43d4-9d76-92e1ce87889d",
                  "parameters": {
                    "path": "4637a853-0b3a-43d4-9d76-92e1ce87889d",
                    "options": {},
                    "httpMethod": "POST"
                  },
                  "typeVersion": 1
                }
              ],
              "connections": {
                "IF": {
                  "main": [
                    [
                      {
                        "node": "Create comment on existing task",
                        "type": "main",
                        "index": 0
                      }
                    ],
                    [
                      {
                        "node": "Create task",
                        "type": "main",
                        "index": 0
                      }
                    ]
                  ]
                },
                "Determine": {
                  "main": [
                    [
                      {
                        "node": "IF",
                        "type": "main",
                        "index": 0
                      }
                    ]
                  ]
                },
                "Get ticket": {
                  "main": [
                    [
                      {
                        "node": "Determine",
                        "type": "main",
                        "index": 0
                      }
                    ]
                  ]
                },
                "Create task": {
                  "main": [
                    [
                      {
                        "node": "Update ticket",
                        "type": "main",
                        "index": 0
                      }
                    ]
                  ]
                },
                "On new Zendesk ticket": {
                  "main": [
                    [
                      {
                        "node": "Get ticket",
                        "type": "main",
                        "index": 0
                      }
                    ]
                  ]
                }
              }
            }
          },
          "node_count": 7,
          "connection_count": 5,
          "extraction_time": 0.248783,
          "error": null
        },
        "layer3": {
          "success": true,
          "data": {
            "introduction": "This workflow creates an Asana task when a new ticket is created in Zendesk. Subsequent comments on the ticket in Zendesk are added as comments to the task in Asana.PrerequisitesZendesk account andZendesk credentials.Asana account andAsana credentials.Asana workspace to create tasks in.How it worksThe workflow listens for new tickets in Zendesk.When a new ticket is created, the workflow creates a new task in Asana.The Asana GID is then saved in one of the ticket's fields (insetupwe call this \"Asana GID\").The next time a comment is added to the ticket, the workflow retrieves the Asana GID from the ticket's field and adds the comment to the task in Asana.SetupThis workflow requires that you set up a webhook in Zendesk. To do so, follow the steps below:In the workflow, open theOn new Zendesk ticketnode and copy the webhook URL.In Zendesk, navigate to Admin Center > Apps and integrations > Webhooks > Actions > Create Webhook.Add all the required details which can be retrieved from theOn new Zendesk ticketnode. The webhook URL gets added to the \u201cEndpoint URL\u201d field, and the \u201cRequest method\u201d should match what is shown in n8n.Save the webhook.In Zendesk, navigate to Admin Center > Objects and rules > Business rules > Triggers > Add trigger.Give trigger a name such as \u201cNew tickets\u201d.Under \u201cConditions\u201d in \u201cMeet ALL of the following conditions\u201d, add \u201cStatus is New\u201d.Under \u201cActions\u201d, select \u201cNotify active webhook\u201d and select the webhook you created previously.In the JSON body, add the following:{\n\t\"id\": \"{{ticket.id}}\",\n\t\"comment\": \"{{ticket.latest_comment_html}}\"\n}Save the Zendesk trigger.You will also need to set up a field in Zendesk to store the Asana GID. To do so, follow the steps below:In Zendesk, navigate to Admin Center > Objects and rules > Tickets > Fields > Add field.Use the number field option and give the field a name such as \u201cAsana GID\u201d.Save the field.In n8n, open theUpdate ticketnode and select the field you created in Zendesk.",
            "overview": "",
            "tutorial_text": "This workflow creates an Asana task when a new ticket is created in Zendesk. Subsequent comments on the ticket in Zendesk are added as comments to the task in Asana.PrerequisitesZendesk account andZendesk credentials.Asana account andAsana credentials.Asana workspace to create tasks in.How it worksThe workflow listens for new tickets in Zendesk.When a new ticket is created, the workflow creates a new task in Asana.The Asana GID is then saved in one of the ticket's fields (insetupwe call this \"Asana GID\").The next time a comment is added to the ticket, the workflow retrieves the Asana GID from the ticket's field and adds the comment to the task in Asana.SetupThis workflow requires that you set up a webhook in Zendesk. To do so, follow the steps below:In the workflow, open theOn new Zendesk ticketnode and copy the webhook URL.In Zendesk, navigate to Admin Center > Apps and integrations > Webhooks > Actions > Create Webhook.Add all the required details which can be retrieved from theOn new Zendesk ticketnode. The webhook URL gets added to the \u201cEndpoint URL\u201d field, and the \u201cRequest method\u201d should match what is shown in n8n.Save the webhook.In Zendesk, navigate to Admin Center > Objects and rules > Business rules > Triggers > Add trigger.Give trigger a name such as \u201cNew tickets\u201d.Under \u201cConditions\u201d in \u201cMeet ALL of the following conditions\u201d, add \u201cStatus is New\u201d.Under \u201cActions\u201d, select \u201cNotify active webhook\u201d and select the webhook you created previously.In the JSON body, add the following:{\n\t\"id\": \"{{ticket.id}}\",\n\t\"comment\": \"{{ticket.latest_comment_html}}\"\n}Save the Zendesk trigger.You will also need to set up a field in Zendesk to store the Asana GID. To do so, follow the steps below:In Zendesk, navigate to Admin Center > Objects and rules > Tickets > Fields > Add field.Use the number field option and give the field a name such as \u201cAsana GID\u201d.Save the field.In n8n, open theUpdate ticketnode and select the field you created in Zendesk.",
            "tutorial_sections": [],
            "step_by_step": [],
            "best_practices": [],
            "common_pitfalls": [],
            "image_urls": [
              "https://n8n.io/nodes/asana.svg",
              "https://gravatar.com/avatar/b3d1a47322f05a8be3d2e7bad6a80c29161bd58b91e4762cbb3ac25e5d0db5a8?r=pg&d=retro&size=200",
              "https://n8n.io/nodes/github-trigger.svg",
              "https://n8n.io/nodes/http-request.svg",
              "https://n8n.io/nodes/merge.svg",
              "https://n8n.io/nodes/microsoft-teams.svg",
              "https://gravatar.com/avatar/7ee0febc0cbec2f1f6b24ddec3c4322e27c82c91dc729cfecf6ce12bfddd058d?r=pg&d=retro&size=200",
              "https://gravatar.com/avatar/eb8eb92141f57c72c5f5a9fb5e8c85dca42047f764de54ab5466999cbb691079?r=pg&d=retro&size=200",
              "https://gravatar.com/avatar/6d3d2053279bc63e9be7bf4cd3fb74e13e7cc1309d32eab0b72140332cff577e?r=pg&d=retro&size=200",
              "https://n8n.io/images/stars-footer.svg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/avatar_igordisco_9243b86232_cd9a5c94ce.jpg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/neutral_avatar_purple_fee36bffe3.PNG",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/avatar_anderoav_589989fc39_ceb1c71a0c.jpg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/avatar_maxim_poulsen_48f450887b_852d0439bc.jpeg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/Felix_Leber_f7a5b3c776_130aeca79d.jpeg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/avatar_Ironben_0a4b3e7d12_e35805265c.jpg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/Francois_lassl_d5cfb504c7_710c87121d.jpeg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/twitter_x_62a44e965e.svg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/github_e1f217d7a3_b9a271324f.svg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/discord_253947c90b_191e8f60fa.svg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/linkedin_d710e84d63_6ed0dc28aa.svg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/youtube_de4bdef50a_4b3a8b8aac.svg"
            ],
            "video_urls": [],
            "code_snippets": [
              {
                "id": "snippet-1",
                "language": "unknown",
                "code": "{\n\t\"id\": \"{{ticket.id}}\",\n\t\"comment\": \"{{ticket.latest_comment_html}}\"\n}\n",
                "description": ""
              }
            ],
            "conclusion": "",
            "troubleshooting": {
              "common_issues": [],
              "error_messages": []
            },
            "related_workflows": []
          },
          "errors": [],
          "extraction_time": 5.649068,
          "metadata": {
            "workflow_id": "1821",
            "url": "https://n8n.io/workflows/1821",
            "extracted_at": "2025-10-11T08:50:13.491421",
            "extractor_version": "1.0.0"
          }
        }
      },
      "multimodal": null,
      "transcripts": null,
      "validation": {
        "layer1": {
          "score": 80,
          "issues": [
            "Difficulty level not set",
            "No engagement metrics available"
          ],
          "valid": true,
          "layer": "layer1"
        },
        "layer2": {
          "score": 100,
          "issues": [],
          "valid": true,
          "layer": "layer2"
        },
        "layer3": {
          "score": 35,
          "issues": [
            "No tutorial sections extracted",
            "No images extracted",
            "Missing required fields: title, description, steps",
            "No step-by-step content extracted"
          ],
          "valid": false,
          "layer": "layer3"
        }
      },
      "quality": {
        "overall_score": 70.0,
        "classification": "Fair",
        "layer1_score": 80,
        "layer2_score": 100,
        "layer3_score": 35,
        "consistency_score": 100.0,
        "total_issues": 6
      },
      "extraction_time": 15.777217864990234,
      "errors": [],
      "timestamp": "2025-10-11T08:50:03.409957"
    },
    {
      "success": true,
      "workflow_id": "2056",
      "url": "https://n8n.io/workflows/2056",
      "layers": {
        "layer1": {
          "success": true,
          "workflow_id": "2056",
          "data": {
            "title": "Send Webflow form submissions to Discord dynamically",
            "description": "What this does:This automation will dynamically create channels on your Discord server for each of your Webflow forms then send formatted form submissions...",
            "author": "Igor Fediczko@igordisco",
            "use_case": "What this does:This automation will dynamically create channels on your Discord server for each of your Webflow forms then send formatted form submissions.",
            "primary_category": "Strictly necessary",
            "secondary_categories": [
              "Performance",
              "Targeting",
              "Functionality",
              "Strictly necessary cookies allow core website functionality such as user login and account management. The website cannot be used properly without strictly necessary cookies.",
              "Performance cookies are used to see how visitors use the website, eg. analytics cookies. Those cookies cannot be used to directly identify a certain visitor.",
              "Targeting cookies are used to identify visitors between different websites, eg. content partners, banner networks. Those cookies may be used by companies to build a profile of visitor interests or show relevant ads on other websites.",
              "Functionality cookies are used to remember visitor information on the website, eg. language, timezone, enhanced content."
            ],
            "node_tags": [
              "github147,222",
              "hiring"
            ],
            "general_tags": [
              "Targeting",
              "Performance",
              "Strictly necessary",
              "Functionality"
            ],
            "difficulty_level": "intermediate",
            "views": 0,
            "upvotes": 0,
            "created_date": "2025-10-11T08:50:10.522694",
            "updated_date": "2025-10-11T08:50:10.522694",
            "setup_instructions": "What this does:This automation will dynamically create channels on your Discord server for each of your Webflow forms then send formatted form submissions...",
            "prerequisites": [
              "token_v2",
              "or website it relates to",
              "{\n\t\tcontent: attr(label);\n\t\tfont-weight: bold;\n\t\twidth: 120px;\n\t\tmin-width: 120px;\n\t}",
              "visiting the said website",
              "__Secure-ROLLOUT_TOKEN"
            ],
            "estimated_setup_time": "4 minutes 59 sec",
            "industry": [
              "Strictly necessary"
            ]
          },
          "extraction_time": 6.706499099731445,
          "error": null
        },
        "layer2": {
          "success": true,
          "workflow_id": "2056",
          "data": {
            "id": 2056,
            "name": "Send Webflow form submissions to Discord dynamically",
            "workflow": {
              "id": "cGTxHYV93kS71hLL",
              "meta": {
                "instanceId": "f0243439e79874c29f002782f736673d3388e5328a2ff2db7dd45820643256f5"
              },
              "name": "Send Discord message from Webflow form submission",
              "tags": [
                {
                  "id": "7cKuF8oYmXKMRDsD",
                  "name": "webflow",
                  "createdAt": "2024-01-09T02:22:11.773Z",
                  "updatedAt": "2024-01-09T02:22:11.773Z"
                },
                {
                  "id": "3Rn4VbTINmdaOxoY",
                  "name": "discord",
                  "createdAt": "2024-01-16T06:00:48.375Z",
                  "updatedAt": "2024-01-16T06:00:48.375Z"
                }
              ],
              "nodes": [
                {
                  "id": "5de5b2ea-5257-4782-8f11-ea9c746083eb",
                  "name": "Does the channel exist?",
                  "type": "n8n-nodes-base.if",
                  "position": [
                    1420,
                    360
                  ],
                  "parameters": {
                    "options": {},
                    "conditions": {
                      "options": {
                        "leftValue": "",
                        "caseSensitive": true,
                        "typeValidation": "strict"
                      },
                      "combinator": "and",
                      "conditions": [
                        {
                          "id": "b8fa7e94-ea10-40f0-ab0c-795620a5ee60",
                          "operator": {
                            "type": "object",
                            "operation": "notEmpty",
                            "singleValue": true
                          },
                          "leftValue": "={{ $json.channel }}",
                          "rightValue": ""
                        }
                      ]
                    }
                  },
                  "typeVersion": 2
                },
                {
                  "id": "325ac193-b72f-4753-8d74-4e3d5cd5172c",
                  "name": "Transform data to send message",
                  "type": "n8n-nodes-base.set",
                  "position": [
                    1880,
                    540
                  ],
                  "parameters": {
                    "fields": {
                      "values": [
                        {
                          "name": "formData",
                          "type": "objectValue",
                          "objectValue": "={{ $('Filter existing Discord channel').item.json.formData }}"
                        },
                        {
                          "name": "formName",
                          "stringValue": "={{ $('Filter existing Discord channel').item.json.formName }}"
                        },
                        {
                          "name": "channel",
                          "type": "objectValue",
                          "objectValue": "={\"id\":\"{{ $json.id }}\", \"name\": \"{{ $json.name }}\" }"
                        }
                      ]
                    },
                    "include": "none",
                    "options": {
                      "dotNotation": true
                    }
                  },
                  "typeVersion": 3.2
                },
                {
                  "id": "1f084545-53a6-4460-81bb-d5109cb06db4",
                  "name": "Webflow Form Submission Trigger",
                  "type": "n8n-nodes-base.webflowTrigger",
                  "position": [
                    780,
                    360
                  ],
                  "webhookId": "4f11dae8-d23f-43c7-992b-04460b38f488",
                  "parameters": {
                    "site": "60e6f0f07c46af62aa2b1c98"
                  },
                  "credentials": {
                    "webflowApi": {
                      "id": "Nuq6n7zNYTp6iS2m",
                      "name": "Webflow Tutum Access"
                    }
                  },
                  "typeVersion": 1
                },
                {
                  "id": "a6076ef4-5b8a-45dc-8f44-02ccf9d2ba34",
                  "name": "Compose Slack message",
                  "type": "n8n-nodes-base.code",
                  "position": [
                    2140,
                    340
                  ],
                  "parameters": {
                    "jsCode": "const webflowFormData = $input.all()[0].json.formData;\n\nconst objectToMarkdown = (obj) => {\n  return Object.entries(obj)\n    .map(([key, value]) => `**${key}**: ${value}`)\n    .join('\\n');\n}\n\nconst discordChannelMessage = {\n\t\"content\": `New form submission: \\n ${objectToMarkdown(webflowFormData)}`\n\t\n};\nconst data = {...$input.all()[0].json, discordChannelMessage: discordChannelMessage};\nreturn data;\n"
                  },
                  "typeVersion": 2
                },
                {
                  "id": "76dd8d4f-5b65-4171-a921-9d32a8e5c893",
                  "name": "List Discord Channels",
                  "type": "n8n-nodes-base.discord",
                  "position": [
                    1000,
                    360
                  ],
                  "parameters": {
                    "guildId": {
                      "__rl": true,
                      "mode": "list",
                      "value": "987961215550623794",
                      "cachedResultUrl": "https://discord.com/channels/987961215550623794",
                      "cachedResultName": "kreonovo"
                    },
                    "options": {},
                    "operation": "getAll"
                  },
                  "credentials": {
                    "discordBotApi": {
                      "id": "rAP7e9I0RHBsnq7Y",
                      "name": "Discord Bot KN"
                    }
                  },
                  "typeVersion": 2
                },
                {
                  "id": "7551d395-6364-4d28-b778-c2a16b04db96",
                  "name": "Filter existing Discord channel",
                  "type": "n8n-nodes-base.code",
                  "position": [
                    1200,
                    360
                  ],
                  "parameters": {
                    "jsCode": "\nconst transformedFormName = (inputString)=> {\n    // Convert to lowercase\n  const lowercaseString = inputString.toLowerCase();\n\n  // Split by space\n  const wordsArray = lowercaseString.split(' ');\n\n  // Join with hyphens\n  const resultString = wordsArray.join('-');\n\n  return resultString;\n}\n\nconst currentForm = transformedFormName($('Webflow Form Submission Trigger').all()[0].json[\"name\"]);\n\nconst doesChannelExist = (channelName)=> {\n  return channelName == currentForm\n}\n\nlet channels = [];\nfor (const item of $input.all()) {\n  let channel = {\n    name: item.json[\"name\"],\n    id: item.json[\"id\"],\n    channelExists: doesChannelExist(item.json[\"name\"]),\n  };\n  channels.push(channel);\n}\n\nlet data = [ { \n  channel: channels.filter((c)=>{return c.channelExists === true})[0],\n  formName: currentForm,\n  formData: $('Webflow Form Submission Trigger').all()[0].json[\"data\"]\n}\n  \n]\n\nreturn data;"
                  },
                  "typeVersion": 2
                },
                {
                  "id": "df38e67b-f76d-4b43-8da4-8e39230a5d0a",
                  "name": "Create Discord channel with form name",
                  "type": "n8n-nodes-base.discord",
                  "position": [
                    1640,
                    540
                  ],
                  "parameters": {
                    "name": "={{ $json.formName }}",
                    "guildId": {
                      "__rl": true,
                      "mode": "list",
                      "value": "987961215550623794",
                      "cachedResultUrl": "https://discord.com/channels/987961215550623794",
                      "cachedResultName": "kreonovo"
                    },
                    "options": {}
                  },
                  "credentials": {
                    "discordBotApi": {
                      "id": "rAP7e9I0RHBsnq7Y",
                      "name": "Discord Bot KN"
                    }
                  },
                  "typeVersion": 2
                },
                {
                  "id": "8a4fb8af-f156-48cf-b6cd-52235ced1de9",
                  "name": "Notify #general channel of newly created channel1",
                  "type": "n8n-nodes-base.discord",
                  "position": [
                    1880,
                    780
                  ],
                  "parameters": {
                    "content": "=A new channel was created <#{{ $json['id']  }}>",
                    "guildId": {
                      "__rl": true,
                      "mode": "list",
                      "value": "987961215550623794",
                      "cachedResultUrl": "https://discord.com/channels/987961215550623794",
                      "cachedResultName": "kreonovo"
                    },
                    "options": {},
                    "resource": "message",
                    "channelId": {
                      "__rl": true,
                      "mode": "list",
                      "value": "987961215550623797",
                      "cachedResultUrl": "https://discord.com/channels/987961215550623794/987961215550623797",
                      "cachedResultName": "general"
                    }
                  },
                  "credentials": {
                    "discordBotApi": {
                      "id": "rAP7e9I0RHBsnq7Y",
                      "name": "Discord Bot KN"
                    }
                  },
                  "typeVersion": 2
                },
                {
                  "id": "1c1a20ee-303e-4015-9465-9674f17fca46",
                  "name": "Send form submission to Discord channel",
                  "type": "n8n-nodes-base.discord",
                  "position": [
                    2360,
                    340
                  ],
                  "parameters": {
                    "content": "={{ $json.discordChannelMessage.content }}",
                    "guildId": {
                      "__rl": true,
                      "mode": "list",
                      "value": "987961215550623794",
                      "cachedResultUrl": "https://discord.com/channels/987961215550623794",
                      "cachedResultName": "kreonovo"
                    },
                    "options": {},
                    "resource": "message",
                    "channelId": {
                      "__rl": true,
                      "mode": "id",
                      "value": "={{ $json.channel.id }}"
                    }
                  },
                  "credentials": {
                    "discordBotApi": {
                      "id": "rAP7e9I0RHBsnq7Y",
                      "name": "Discord Bot KN"
                    }
                  },
                  "typeVersion": 2
                },
                {
                  "id": "8e7f2f57-b6eb-4b34-84d4-e61f24e0cdf9",
                  "name": "Sticky Note",
                  "type": "n8n-nodes-base.stickyNote",
                  "position": [
                    20,
                    200
                  ],
                  "parameters": {
                    "color": 6,
                    "width": 624.279069767441,
                    "height": 535.976744186046,
                    "content": "# Manage Webflow form submissions in Discord \n## Full guide with video\n[Full guide with video here](https://blog.kreonovo.co.za/send-webflow-form-submissions-to-discord-server/)\n\nThis workflow dynamically creates Discord channels for your Webflow forms then sends form submissions to those channels. The Webflow form name is used to make the channel name.\n\n## Getting started\n1. Create Webflow credential using API V1 Token\n2. Create Discord credentials using Bot API by making an application [Your applications in Discord](https://discord.com/developers/applications) for a detailed list of scopes for your application please see the video guide above.\n3. Connect your credentials to the relevant nodes on the canvas.\n4. Activate the workflow and submit a form on your Webflow site\n\nThat's it! You do not need to add any custom code to your Webflow forms or site.\n\nThe name of your forms in the form settings section of the Designer in Webflow will be used to create the Discord channels. This workflow will automatically do this for you.\n"
                  },
                  "typeVersion": 1
                },
                {
                  "id": "fc1ce7a7-ae13-447c-9c60-c8b082fb2b70",
                  "name": "Sticky Note1",
                  "type": "n8n-nodes-base.stickyNote",
                  "position": [
                    2080,
                    242.97574123989227
                  ],
                  "parameters": {
                    "width": 224.58139534883728,
                    "height": 296.44286341127054,
                    "content": "### Format the message \nDiscord accepts Markdown"
                  },
                  "typeVersion": 1
                },
                {
                  "id": "154a43e0-6967-4307-b9d2-c30be6dae84a",
                  "name": "Sticky Note2",
                  "type": "n8n-nodes-base.stickyNote",
                  "position": [
                    1320,
                    740
                  ],
                  "parameters": {
                    "width": 323.0232558139535,
                    "height": 304.69767441860455,
                    "content": "### False branch \nWe create a new Discord channel using the form name in Webflow. Channel names must be converted to lowercase and words separated with dash.\n\nWhen the new channel is created we send a message in the #general channel with a direct link to the new channel.\n\nFinally we send the Webflow form submission as a message in the new channel."
                  },
                  "typeVersion": 1
                },
                {
                  "id": "f668884a-b6fe-4abd-bf6f-dd45986235bf",
                  "name": "Sticky Note3",
                  "type": "n8n-nodes-base.stickyNote",
                  "position": [
                    1160,
                    160
                  ],
                  "parameters": {
                    "width": 224.58139534883728,
                    "height": 393.9954240581709,
                    "content": "### Combining data to move forward \nThis code will check if a channel with the form name exists in Discord. \n\nWe also create an object to pass forward to the next node."
                  },
                  "typeVersion": 1
                }
              ],
              "active": false,
              "pinData": {},
              "settings": {
                "executionOrder": "v1"
              },
              "versionId": "677986e6-bdc4-4e4d-92ee-568385174325",
              "connections": {
                "Compose Slack message": {
                  "main": [
                    [
                      {
                        "node": "Send form submission to Discord channel",
                        "type": "main",
                        "index": 0
                      }
                    ]
                  ]
                },
                "List Discord Channels": {
                  "main": [
                    [
                      {
                        "node": "Filter existing Discord channel",
                        "type": "main",
                        "index": 0
                      }
                    ]
                  ]
                },
                "Does the channel exist?": {
                  "main": [
                    [
                      {
                        "node": "Compose Slack message",
                        "type": "main",
                        "index": 0
                      }
                    ],
                    [
                      {
                        "node": "Create Discord channel with form name",
                        "type": "main",
                        "index": 0
                      }
                    ]
                  ]
                },
                "Transform data to send message": {
                  "main": [
                    [
                      {
                        "node": "Compose Slack message",
                        "type": "main",
                        "index": 0
                      }
                    ]
                  ]
                },
                "Filter existing Discord channel": {
                  "main": [
                    [
                      {
                        "node": "Does the channel exist?",
                        "type": "main",
                        "index": 0
                      }
                    ]
                  ]
                },
                "Webflow Form Submission Trigger": {
                  "main": [
                    [
                      {
                        "node": "List Discord Channels",
                        "type": "main",
                        "index": 0
                      }
                    ]
                  ]
                },
                "Create Discord channel with form name": {
                  "main": [
                    [
                      {
                        "node": "Transform data to send message",
                        "type": "main",
                        "index": 0
                      },
                      {
                        "node": "Notify #general channel of newly created channel1",
                        "type": "main",
                        "index": 0
                      }
                    ]
                  ]
                }
              }
            }
          },
          "node_count": 13,
          "connection_count": 7,
          "extraction_time": 0.318423,
          "error": null
        },
        "layer3": {
          "success": true,
          "data": {
            "introduction": "What this does:This automation will dynamically create channels on your Discord server for each of your Webflow forms then send formatted form submissions as messages in those channels.This is useful forWebflow will only notify a single email of a form submission. By using this workflow you can enhance your Webflow form management by receiving them in Discord. This is great if you need to notify multiple team members or communities of your form submissions.Usage guideFull written and video guideSimply create credentials for Webflow and Discord and connect them to the nodes. The video guide demonstrates a realworld usecase using a Webflow template and breaks down each node in detail about how it works.",
            "overview": "",
            "tutorial_text": "What this does:This automation will dynamically create channels on your Discord server for each of your Webflow forms then send formatted form submissions as messages in those channels.This is useful forWebflow will only notify a single email of a form submission. By using this workflow you can enhance your Webflow form management by receiving them in Discord. This is great if you need to notify multiple team members or communities of your form submissions.Usage guideFull written and video guideSimply create credentials for Webflow and Discord and connect them to the nodes. The video guide demonstrates a realworld usecase using a Webflow template and breaks down each node in detail about how it works.",
            "tutorial_sections": [],
            "step_by_step": [],
            "best_practices": [],
            "common_pitfalls": [],
            "image_urls": [
              "https://n8n.io/nodes/discord.svg",
              "https://gravatar.com/avatar/89fd5fed02594631a1e2f8850e1bbda1032300c5fccb978097c5b7ad9a36c336?r=pg&d=retro&size=200",
              "https://n8n.io/nodes/slack.svg",
              "https://n8n.io/nodes/airtable.svg",
              "https://n8n.io/nodes/http-request.svg",
              "https://n8n.io/nodes/customer-datastore-n8n-training.svg",
              "https://gravatar.com/avatar/8ed14c592510a0627ebe55fdad3a42a3917a77a9e081b93209ce05ecf3c2ba8f?r=pg&d=retro&size=200",
              "https://gravatar.com/avatar/74234187cf4a650d53f6a86e7b03d1bcb8cfef4cbd0552eabd8d966cd808cc54?r=pg&d=retro&size=200",
              "https://n8n.io/nodes/code.svg",
              "https://n8n.io/images/stars-footer.svg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/avatar_igordisco_9243b86232_cd9a5c94ce.jpg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/neutral_avatar_purple_fee36bffe3.PNG",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/avatar_anderoav_589989fc39_ceb1c71a0c.jpg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/avatar_maxim_poulsen_48f450887b_852d0439bc.jpeg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/Felix_Leber_f7a5b3c776_130aeca79d.jpeg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/avatar_Ironben_0a4b3e7d12_e35805265c.jpg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/Francois_lassl_d5cfb504c7_710c87121d.jpeg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/twitter_x_62a44e965e.svg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/github_e1f217d7a3_b9a271324f.svg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/discord_253947c90b_191e8f60fa.svg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/linkedin_d710e84d63_6ed0dc28aa.svg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/youtube_de4bdef50a_4b3a8b8aac.svg"
            ],
            "video_urls": [],
            "code_snippets": [],
            "conclusion": "",
            "troubleshooting": {
              "common_issues": [],
              "error_messages": []
            },
            "related_workflows": []
          },
          "errors": [],
          "extraction_time": 5.910508,
          "metadata": {
            "workflow_id": "2056",
            "url": "https://n8n.io/workflows/2056",
            "extracted_at": "2025-10-11T08:50:12.564525",
            "extractor_version": "1.0.0"
          }
        }
      },
      "multimodal": null,
      "transcripts": null,
      "validation": {
        "layer1": {
          "score": 80,
          "issues": [
            "Difficulty level not set",
            "No engagement metrics available"
          ],
          "valid": true,
          "layer": "layer1"
        },
        "layer2": {
          "score": 100,
          "issues": [],
          "valid": true,
          "layer": "layer2"
        },
        "layer3": {
          "score": 35,
          "issues": [
            "No tutorial sections extracted",
            "No images extracted",
            "Missing required fields: title, description, steps",
            "No step-by-step content extracted"
          ],
          "valid": false,
          "layer": "layer3"
        }
      },
      "quality": {
        "overall_score": 70.0,
        "classification": "Fair",
        "layer1_score": 80,
        "layer2_score": 100,
        "layer3_score": 35,
        "consistency_score": 100.0,
        "total_issues": 6
      },
      "extraction_time": 14.16142988204956,
      "errors": [],
      "timestamp": "2025-10-11T08:50:04.351450"
    },
    {
      "success": true,
      "workflow_id": "1935",
      "url": "https://n8n.io/workflows/1935",
      "layers": {
        "layer1": {
          "success": true,
          "workflow_id": "1935",
          "data": {
            "title": "Unknown Title",
            "description": "",
            "author": "Unknown Author",
            "use_case": "General workflow automation",
            "primary_category": "Strictly necessary",
            "secondary_categories": [
              "Performance",
              "Targeting",
              "Functionality",
              "Strictly necessary cookies allow core website functionality such as user login and account management. The website cannot be used properly without strictly necessary cookies.",
              "Performance cookies are used to see how visitors use the website, eg. analytics cookies. Those cookies cannot be used to directly identify a certain visitor.",
              "Targeting cookies are used to identify visitors between different websites, eg. content partners, banner networks. Those cookies may be used by companies to build a profile of visitor interests or show relevant ads on other websites.",
              "Functionality cookies are used to remember visitor information on the website, eg. language, timezone, enhanced content."
            ],
            "node_tags": [],
            "general_tags": [
              "Targeting",
              "Performance",
              "Strictly necessary",
              "Functionality"
            ],
            "difficulty_level": "intermediate",
            "views": 0,
            "upvotes": 0,
            "created_date": "2025-10-11T08:50:16.856894",
            "updated_date": "2025-10-11T08:50:16.856894",
            "setup_instructions": "",
            "prerequisites": [
              "token_v2",
              "or website it relates to",
              "{\n\t\tcontent: attr(label);\n\t\tfont-weight: bold;\n\t\twidth: 120px;\n\t\tmin-width: 120px;\n\t}",
              "visiting the said website",
              "__Secure-ROLLOUT_TOKEN"
            ],
            "estimated_setup_time": "4 minutes 59 sec",
            "industry": [
              "Strictly necessary"
            ]
          },
          "extraction_time": 5.757843971252441,
          "error": null
        },
        "layer2": {
          "success": false,
          "workflow_id": "1935",
          "data": null,
          "node_count": 0,
          "connection_count": 0,
          "extraction_time": 0.76288,
          "error": "Workflow not found (404)"
        },
        "layer3": {
          "success": true,
          "data": {
            "introduction": "",
            "overview": "",
            "tutorial_text": "",
            "tutorial_sections": [],
            "step_by_step": [],
            "best_practices": [],
            "common_pitfalls": [],
            "image_urls": [],
            "video_urls": [],
            "code_snippets": [],
            "conclusion": "",
            "troubleshooting": {
              "common_issues": [],
              "error_messages": []
            },
            "related_workflows": []
          },
          "errors": [],
          "extraction_time": 5.626988,
          "metadata": {
            "workflow_id": "1935",
            "url": "https://n8n.io/workflows/1935",
            "extracted_at": "2025-10-11T08:50:18.672178",
            "extractor_version": "1.0.0"
          }
        }
      },
      "multimodal": null,
      "transcripts": null,
      "validation": {
        "layer1": {
          "score": 55,
          "issues": [
            "Description missing or too short (minimum 20 characters)",
            "Difficulty level not set",
            "Author not identified",
            "No engagement metrics available"
          ],
          "valid": false,
          "layer": "layer1"
        },
        "layer2": null,
        "layer3": {
          "score": 5,
          "issues": [
            "Tutorial text missing",
            "No tutorial sections extracted",
            "No images extracted",
            "Missing required fields: title, description, steps",
            "No step-by-step content extracted"
          ],
          "valid": false,
          "layer": "layer3"
        }
      },
      "quality": {
        "overall_score": 20.0,
        "classification": "Poor",
        "layer1_score": 55,
        "layer2_score": null,
        "layer3_score": 5,
        "consistency_score": 70.0,
        "total_issues": 9
      },
      "extraction_time": 12.836443901062012,
      "errors": [
        "Layer 2 extraction failed: Workflow not found (404)"
      ],
      "timestamp": "2025-10-11T08:50:11.496065"
    },
    {
      "success": true,
      "workflow_id": "2241",
      "url": "https://n8n.io/workflows/2241",
      "layers": {
        "layer1": {
          "success": true,
          "workflow_id": "2241",
          "data": {
            "title": "Unsubscribe Mautic contacts from automated unsubscribe emails",
            "description": "Who is this for?This template is designed for businesses and organizations that use Mautic for email marketing and want to automate the process of removing...",
            "author": "Igor Fediczko@igordisco",
            "use_case": "Who is this for?This template is designed for businesses and organizations that use Mautic for email marketing and want to automate the process of removing.",
            "primary_category": "Strictly necessary",
            "secondary_categories": [
              "Performance",
              "Targeting",
              "Functionality",
              "Strictly necessary cookies allow core website functionality such as user login and account management. The website cannot be used properly without strictly necessary cookies.",
              "Performance cookies are used to see how visitors use the website, eg. analytics cookies. Those cookies cannot be used to directly identify a certain visitor.",
              "Targeting cookies are used to identify visitors between different websites, eg. content partners, banner networks. Those cookies may be used by companies to build a profile of visitor interests or show relevant ads on other websites.",
              "Functionality cookies are used to remember visitor information on the website, eg. language, timezone, enhanced content."
            ],
            "node_tags": [
              "github147,222",
              "hiring"
            ],
            "general_tags": [
              "Targeting",
              "Performance",
              "Strictly necessary",
              "Functionality"
            ],
            "difficulty_level": "intermediate",
            "views": 0,
            "upvotes": 0,
            "created_date": "2025-10-11T08:50:25.836766",
            "updated_date": "2025-10-11T08:50:25.836766",
            "setup_instructions": "Who is this for?This template is designed for businesses and organizations that use Mautic for email marketing and want to automate the process of removing...",
            "prerequisites": [
              "token_v2",
              "or website it relates to",
              "{\n\t\tcontent: attr(label);\n\t\tfont-weight: bold;\n\t\twidth: 120px;\n\t\tmin-width: 120px;\n\t}",
              "visiting the said website",
              "__Secure-ROLLOUT_TOKEN"
            ],
            "estimated_setup_time": "4 minutes 59 sec",
            "industry": [
              "Strictly necessary"
            ]
          },
          "extraction_time": 7.995518922805786,
          "error": null
        },
        "layer2": {
          "success": true,
          "workflow_id": "2241",
          "data": {
            "id": 2241,
            "name": "Unsubscribe Mautic contacts from automated unsubscribe emails",
            "workflow": {
              "meta": {
                "instanceId": "f0efd559def66ddc761033b0b2eb86ed3edec31121f2c1aa92ed05e63303529a"
              },
              "name": "Unsubscribe Mautic contacts from automated unsubscribe emails",
              "tags": [],
              "nodes": [
                {
                  "id": "55d6a64b-88e2-4162-a93a-b31ad32b94fd",
                  "name": "Gmail Trigger",
                  "type": "n8n-nodes-base.gmailTrigger",
                  "position": [
                    140,
                    860
                  ],
                  "parameters": {
                    "filters": {
                      "includeSpamTrash": true
                    },
                    "pollTimes": {
                      "item": [
                        {
                          "mode": "everyMinute"
                        }
                      ]
                    }
                  },
                  "credentials": {
                    "gmailOAuth2": {
                      "id": "3",
                      "name": "Gmail account"
                    }
                  },
                  "typeVersion": 1
                },
                {
                  "id": "a697b58c-e0c8-42e0-8211-49caf46ce222",
                  "name": "Is automated unsubscribe?",
                  "type": "n8n-nodes-base.if",
                  "position": [
                    460,
                    1000
                  ],
                  "parameters": {
                    "conditions": {
                      "string": [
                        {
                          "value1": "= {{ $json[\"To\"] }}",
                          "value2": "unsubscribe",
                          "operation": "contains"
                        },
                        {
                          "value1": "={{ $json[\"From\"] }}",
                          "value2": "={{ $node[\"Edit Fields\"].json[\"emailAddress\"] }}",
                          "operation": "notEqual"
                        }
                      ]
                    }
                  },
                  "typeVersion": 1,
                  "alwaysOutputData": false
                },
                {
                  "id": "72c76f4b-50da-481a-9c3e-204158f3a016",
                  "name": "Add to unsubscribed segment",
                  "type": "n8n-nodes-base.mautic",
                  "position": [
                    1520,
                    720
                  ],
                  "parameters": {
                    "resource": "contactSegment",
                    "contactId": "={{ $json[\"id\"] }}",
                    "segmentId": 3,
                    "authentication": "oAuth2"
                  },
                  "credentials": {
                    "mauticOAuth2Api": {
                      "id": "4",
                      "name": "Mautic account"
                    }
                  },
                  "typeVersion": 1
                },
                {
                  "id": "44c85f57-0716-476f-bea5-00efeddf908f",
                  "name": "Remove newsletter segment",
                  "type": "n8n-nodes-base.mautic",
                  "position": [
                    1520,
                    920
                  ],
                  "parameters": {
                    "resource": "contactSegment",
                    "contactId": "={{ $json[\"id\"] }}",
                    "operation": "remove",
                    "segmentId": 1,
                    "authentication": "oAuth2"
                  },
                  "credentials": {
                    "mauticOAuth2Api": {
                      "id": "4",
                      "name": "Mautic account"
                    }
                  },
                  "typeVersion": 1
                },
                {
                  "id": "b26ddbb9-3209-458b-8e94-2854ed8bf8de",
                  "name": "Reply Unsubscribe Message",
                  "type": "n8n-nodes-base.gmail",
                  "position": [
                    1520,
                    1140
                  ],
                  "parameters": {
                    "message": "={{$node[\"Edit Fields\"].json[\"unsubscribeMessage\"]}}",
                    "options": {},
                    "messageId": "={{ $node[\"Gmail Trigger\"].json[\"id\"] }}",
                    "operation": "reply"
                  },
                  "credentials": {
                    "gmailOAuth2": {
                      "id": "3",
                      "name": "Gmail account"
                    }
                  },
                  "typeVersion": 2
                },
                {
                  "id": "34fc931b-f692-4383-a75b-76502c11452b",
                  "name": "Add to Do Not Contact List",
                  "type": "n8n-nodes-base.mautic",
                  "disabled": true,
                  "position": [
                    1520,
                    520
                  ],
                  "parameters": {
                    "contactId": "{{ $json[\"id\"] }}",
                    "operation": "editDoNotContactList",
                    "authentication": "oAuth2",
                    "additionalFields": {}
                  },
                  "credentials": {
                    "mauticOAuth2Api": {
                      "id": "4",
                      "name": "Mautic account"
                    }
                  },
                  "typeVersion": 1
                },
                {
                  "id": "b5dd2d22-c367-4f30-a1b3-e3a767aec96b",
                  "name": "Extract Email from 'From' Field",
                  "type": "n8n-nodes-base.code",
                  "position": [
                    640,
                    840
                  ],
                  "parameters": {
                    "mode": "runOnceForEachItem",
                    "jsCode": "var fromField = $input.item.json.From;\nvar extractedEmail;\nif (fromField.includes('<') && fromField.includes('>')) {\n    // From field is wrapped in carets\n    var regex = /[^< ]+(?=>)/g;\n    extractedEmail = fromField.match(regex)[0];\n} else {\n    // From field is not wrapped in carets\n    extractedEmail = fromField;\n}\nreturn {json: {extractedEmail}}"
                  },
                  "typeVersion": 1
                },
                {
                  "id": "f11e57b5-7834-4654-8793-42b1aa297730",
                  "name": "Extract Unique Email Addresses",
                  "type": "n8n-nodes-base.code",
                  "position": [
                    820,
                    1000
                  ],
                  "parameters": {
                    "jsCode": "// Access the input data using all() method\nconst inputData = $input.all();\nconst uniqueEmailsSet = new Set();\n\n// Loop through each item, extract the email, and add it to the Set\ninputData.forEach(item => {\n    uniqueEmailsSet.add(item.json.extractedEmail);\n});\n\n// Convert the Set to an array of objects in the n8n format\nconst uniqueEmailsArray = Array.from(uniqueEmailsSet).map(email => {\n    return { json: { extractedEmail: email } };\n});\n\nreturn uniqueEmailsArray;\n"
                  },
                  "typeVersion": 2
                },
                {
                  "id": "5e168e07-1a6b-4140-81b9-9d9ffb852f61",
                  "name": "Get Mautic Contact ID from Email Address",
                  "type": "n8n-nodes-base.mautic",
                  "position": [
                    1020,
                    840
                  ],
                  "parameters": {
                    "limit": 1,
                    "options": {
                      "search": "=email:{{ $json[\"extractedEmail\"] }}",
                      "rawData": false
                    },
                    "operation": "getAll",
                    "authentication": "oAuth2"
                  },
                  "credentials": {
                    "mauticOAuth2Api": {
                      "id": "4",
                      "name": "Mautic account"
                    }
                  },
                  "typeVersion": 1,
                  "alwaysOutputData": false
                },
                {
                  "id": "ad1a7b7a-230a-4098-b419-c93e3a6398a1",
                  "name": "If Contact Exists in Mautic",
                  "type": "n8n-nodes-base.if",
                  "position": [
                    1180,
                    1060
                  ],
                  "parameters": {
                    "conditions": {
                      "string": [
                        {
                          "value1": "={{ $json[\"id\"] }}",
                          "operation": "isNotEmpty"
                        }
                      ]
                    }
                  },
                  "typeVersion": 1
                },
                {
                  "id": "17b999f9-9c50-488a-b5d2-d98bbd566048",
                  "name": "Sticky Note",
                  "type": "n8n-nodes-base.stickyNote",
                  "position": [
                    200,
                    500
                  ],
                  "parameters": {
                    "content": "## Step 1\nSet your email address and unsubscribe message in the edit fields node"
                  },
                  "typeVersion": 1
                },
                {
                  "id": "11d28571-7335-4e53-a691-973412b6daef",
                  "name": "Sticky Note1",
                  "type": "n8n-nodes-base.stickyNote",
                  "position": [
                    140,
                    1020
                  ],
                  "parameters": {
                    "content": "## Step 2\nSet your credentials in the Gmail trigger"
                  },
                  "typeVersion": 1
                },
                {
                  "id": "2874fbc3-5735-471c-8c34-70854e0770bd",
                  "name": "Sticky Note2",
                  "type": "n8n-nodes-base.stickyNote",
                  "position": [
                    940,
                    660
                  ],
                  "parameters": {
                    "content": "## Step 3\nSet credentials in the mautic nodes"
                  },
                  "typeVersion": 1
                },
                {
                  "id": "1e51f13f-3fba-4b5b-8c88-eb792c4c0b40",
                  "name": "Sticky Note3",
                  "type": "n8n-nodes-base.stickyNote",
                  "position": [
                    1240,
                    460
                  ],
                  "parameters": {
                    "content": "## Step 4\nEdit segments (add or remove) in the mautic nodes, optionally add to do not contact list."
                  },
                  "typeVersion": 1
                },
                {
                  "id": "3b5f94df-864b-480c-a6f2-d572345e7d9a",
                  "name": "Sticky Note4",
                  "type": "n8n-nodes-base.stickyNote",
                  "position": [
                    580,
                    440
                  ],
                  "parameters": {
                    "width": 237.7703390037576,
                    "height": 194.55974544175768,
                    "content": "## Unsubscribe Mautic contacts from automated unsubscribe emails"
                  },
                  "typeVersion": 1
                },
                {
                  "id": "69496c4b-254d-4a89-8ab1-9fe80cfaea14",
                  "name": "Edit Fields",
                  "type": "n8n-nodes-base.set",
                  "position": [
                    300,
                    700
                  ],
                  "parameters": {
                    "fields": {
                      "values": [
                        {
                          "name": "emailAddress",
                          "stringValue": "hello@example.com"
                        },
                        {
                          "name": "unsubscribeMessage",
                          "stringValue": "Your have successfully opted out from our marketing campaigns. Please reply if you believe this is an error."
                        }
                      ]
                    },
                    "options": {}
                  },
                  "typeVersion": 3.2
                }
              ],
              "active": false,
              "pinData": {},
              "settings": {
                "executionOrder": "v1"
              },
              "versionId": "",
              "connections": {
                "Edit Fields": {
                  "main": [
                    [
                      {
                        "node": "Is automated unsubscribe?",
                        "type": "main",
                        "index": 0
                      }
                    ]
                  ]
                },
                "Gmail Trigger": {
                  "main": [
                    [
                      {
                        "node": "Edit Fields",
                        "type": "main",
                        "index": 0
                      }
                    ]
                  ]
                },
                "Is automated unsubscribe?": {
                  "main": [
                    [
                      {
                        "node": "Extract Email from 'From' Field",
                        "type": "main",
                        "index": 0
                      }
                    ]
                  ]
                },
                "If Contact Exists in Mautic": {
                  "main": [
                    [
                      {
                        "node": "Add to unsubscribed segment",
                        "type": "main",
                        "index": 0
                      },
                      {
                        "node": "Remove newsletter segment",
                        "type": "main",
                        "index": 0
                      },
                      {
                        "node": "Reply Unsubscribe Message",
                        "type": "main",
                        "index": 0
                      },
                      {
                        "node": "Add to Do Not Contact List",
                        "type": "main",
                        "index": 0
                      }
                    ],
                    [
                      {
                        "node": "Reply Unsubscribe Message",
                        "type": "main",
                        "index": 0
                      }
                    ]
                  ]
                },
                "Extract Unique Email Addresses": {
                  "main": [
                    [
                      {
                        "node": "Get Mautic Contact ID from Email Address",
                        "type": "main",
                        "index": 0
                      }
                    ]
                  ]
                },
                "Extract Email from 'From' Field": {
                  "main": [
                    [
                      {
                        "node": "Extract Unique Email Addresses",
                        "type": "main",
                        "index": 0
                      }
                    ]
                  ]
                },
                "Get Mautic Contact ID from Email Address": {
                  "main": [
                    [
                      {
                        "node": "If Contact Exists in Mautic",
                        "type": "main",
                        "index": 0
                      }
                    ]
                  ]
                }
              }
            }
          },
          "node_count": 16,
          "connection_count": 7,
          "extraction_time": 0.327097,
          "error": null
        },
        "layer3": {
          "success": true,
          "data": {
            "introduction": "Who is this for?This template is designed for businesses and organizations that use Mautic for email marketing and want to automate the process of removing contacts from specific segments when they receive an unsubscribe request via email.What problem is this workflow solving? / use caseMany email recipients, especially those who are less tech-savvy, may not follow the standard unsubscribe link provided in emails. Instead, for example in Gmail, they click the \"Unsubscribe\" button in the Gmail web interface, which in turn sends an email with a consistent format, these emails contain the word unsubscribe in the 'To' field using the following structure:hello+unsubscribe_6629823aa976f053068426@example.comThis workflow automates the process of identifying such unsubscribe emails and removing the contact from the relevant Mautic segments, ensuring compliance with unsubscribe requests and maintaining a clean mailing list.What this workflow doesMonitors a Gmail account for incoming emails.Identifies unsubscribe emails based on specific patterns in the \"To\" field (e.g., containing the word \"unsubscribe\").Retrieves the contact's ID from Mautic based on the email address.Removes the contact from the specified \"newsletter\" segment in Mautic.Adds the contact to the \"unsubscribed\" segment in Mautic.Sends a confirmation email to the contact, acknowledging their unsubscribe request.SetupConfigure your email address and unsubscribe message in the \"Edit Fields\" node.Set your credentials in the Gmail trigger and in the Mautic nodes.Set the segments for the \"newsletter\" and \"unsubscribed\" in the Mautic nodes.Make sure your n8n installation has a public endpoint for your Gmail trigger to work correctly.Deploy the workflow.How to customize this workflow to your needsAdjust the conditions for identifying unsubscribe emails based on your specific requirements.Modify the segments or actions taken in Mautic according to your desired behavior.Customize the confirmation email message and sender details.Note:This workflow assumes a consistent structure for unsubscribe emails, where the \"From\" field contains the word \"unsubscribe\" using the \"+\" sign. If your email provider follows a different convention, adjust the conditions in the \"Is automated unsubscribe?\" node accordingly.",
            "overview": "",
            "tutorial_text": "Who is this for?This template is designed for businesses and organizations that use Mautic for email marketing and want to automate the process of removing contacts from specific segments when they receive an unsubscribe request via email.What problem is this workflow solving? / use caseMany email recipients, especially those who are less tech-savvy, may not follow the standard unsubscribe link provided in emails. Instead, for example in Gmail, they click the \"Unsubscribe\" button in the Gmail web interface, which in turn sends an email with a consistent format, these emails contain the word unsubscribe in the 'To' field using the following structure:hello+unsubscribe_6629823aa976f053068426@example.comThis workflow automates the process of identifying such unsubscribe emails and removing the contact from the relevant Mautic segments, ensuring compliance with unsubscribe requests and maintaining a clean mailing list.What this workflow doesMonitors a Gmail account for incoming emails.Identifies unsubscribe emails based on specific patterns in the \"To\" field (e.g., containing the word \"unsubscribe\").Retrieves the contact's ID from Mautic based on the email address.Removes the contact from the specified \"newsletter\" segment in Mautic.Adds the contact to the \"unsubscribed\" segment in Mautic.Sends a confirmation email to the contact, acknowledging their unsubscribe request.SetupConfigure your email address and unsubscribe message in the \"Edit Fields\" node.Set your credentials in the Gmail trigger and in the Mautic nodes.Set the segments for the \"newsletter\" and \"unsubscribed\" in the Mautic nodes.Make sure your n8n installation has a public endpoint for your Gmail trigger to work correctly.Deploy the workflow.How to customize this workflow to your needsAdjust the conditions for identifying unsubscribe emails based on your specific requirements.Modify the segments or actions taken in Mautic according to your desired behavior.Customize the confirmation email message and sender details.Note:This workflow assumes a consistent structure for unsubscribe emails, where the \"From\" field contains the word \"unsubscribe\" using the \"+\" sign. If your email provider follows a different convention, adjust the conditions in the \"Is automated unsubscribe?\" node accordingly.",
            "tutorial_sections": [],
            "step_by_step": [],
            "best_practices": [],
            "common_pitfalls": [],
            "image_urls": [
              "https://n8n.io/nodes/mautic.svg",
              "https://gravatar.com/avatar/7ce9dce7ebf675304f3eb39dc10f37f520d483c92763fe79ad3a706c122b0f05?r=pg&d=retro&size=200",
              "https://n8n.io/nodes/http-request.svg",
              "https://n8n.io/nodes/merge.svg",
              "https://gravatar.com/avatar/e7ca218dfc87b68344bbd66f40da01546d2f6fc1cf884267821e8a77e3e8410a?r=pg&d=retro&size=200",
              "https://gravatar.com/avatar/8760ed64a38ed65da42983737659c7e295e4a7f14b59ed5ce1b0b1077435f573?r=pg&d=retro&size=200",
              "https://n8n.io/nodes/linkedin.svg",
              "https://gravatar.com/avatar/018562cd36511e98b1f19a8a3f63f4232ed69998ebfa9127e62bc2b185d728b9?r=pg&d=retro&size=200",
              "https://n8n.io/images/stars-footer.svg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/avatar_igordisco_9243b86232_cd9a5c94ce.jpg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/neutral_avatar_purple_fee36bffe3.PNG",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/avatar_anderoav_589989fc39_ceb1c71a0c.jpg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/avatar_maxim_poulsen_48f450887b_852d0439bc.jpeg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/Felix_Leber_f7a5b3c776_130aeca79d.jpeg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/avatar_Ironben_0a4b3e7d12_e35805265c.jpg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/Francois_lassl_d5cfb504c7_710c87121d.jpeg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/twitter_x_62a44e965e.svg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/github_e1f217d7a3_b9a271324f.svg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/discord_253947c90b_191e8f60fa.svg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/linkedin_d710e84d63_6ed0dc28aa.svg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/youtube_de4bdef50a_4b3a8b8aac.svg"
            ],
            "video_urls": [],
            "code_snippets": [],
            "conclusion": "",
            "troubleshooting": {
              "common_issues": [],
              "error_messages": []
            },
            "related_workflows": []
          },
          "errors": [],
          "extraction_time": 5.666573,
          "metadata": {
            "workflow_id": "2241",
            "url": "https://n8n.io/workflows/2241",
            "extracted_at": "2025-10-11T08:50:27.441364",
            "extractor_version": "1.0.0"
          }
        }
      },
      "multimodal": null,
      "transcripts": null,
      "validation": {
        "layer1": {
          "score": 80,
          "issues": [
            "Difficulty level not set",
            "No engagement metrics available"
          ],
          "valid": true,
          "layer": "layer1"
        },
        "layer2": {
          "score": 100,
          "issues": [],
          "valid": true,
          "layer": "layer2"
        },
        "layer3": {
          "score": 35,
          "issues": [
            "No tutorial sections extracted",
            "No images extracted",
            "Missing required fields: title, description, steps",
            "No step-by-step content extracted"
          ],
          "valid": false,
          "layer": "layer3"
        }
      },
      "quality": {
        "overall_score": 70.0,
        "classification": "Fair",
        "layer1_score": 80,
        "layer2_score": 100,
        "layer3_score": 35,
        "consistency_score": 100.0,
        "total_issues": 6
      },
      "extraction_time": 14.680687189102173,
      "errors": [],
      "timestamp": "2025-10-11T08:50:18.513162"
    },
    {
      "success": true,
      "workflow_id": "1854",
      "url": "https://n8n.io/workflows/1854",
      "layers": {
        "layer1": {
          "success": true,
          "workflow_id": "1854",
          "data": {
            "title": "Unknown Title",
            "description": "",
            "author": "Unknown Author",
            "use_case": "General workflow automation",
            "primary_category": "Strictly necessary",
            "secondary_categories": [
              "Performance",
              "Targeting",
              "Functionality",
              "Strictly necessary cookies allow core website functionality such as user login and account management. The website cannot be used properly without strictly necessary cookies.",
              "Performance cookies are used to see how visitors use the website, eg. analytics cookies. Those cookies cannot be used to directly identify a certain visitor.",
              "Targeting cookies are used to identify visitors between different websites, eg. content partners, banner networks. Those cookies may be used by companies to build a profile of visitor interests or show relevant ads on other websites.",
              "Functionality cookies are used to remember visitor information on the website, eg. language, timezone, enhanced content."
            ],
            "node_tags": [],
            "general_tags": [
              "Targeting",
              "Performance",
              "Strictly necessary",
              "Functionality"
            ],
            "difficulty_level": "intermediate",
            "views": 0,
            "upvotes": 0,
            "created_date": "2025-10-11T08:50:23.695701",
            "updated_date": "2025-10-11T08:50:23.695701",
            "setup_instructions": "",
            "prerequisites": [
              "token_v2",
              "or website it relates to",
              "{\n\t\tcontent: attr(label);\n\t\tfont-weight: bold;\n\t\twidth: 120px;\n\t\tmin-width: 120px;\n\t}",
              "visiting the said website",
              "__Secure-ROLLOUT_TOKEN"
            ],
            "estimated_setup_time": "4 minutes 59 sec",
            "industry": [
              "Strictly necessary"
            ]
          },
          "extraction_time": 4.880452871322632,
          "error": null
        },
        "layer2": {
          "success": false,
          "workflow_id": "1854",
          "data": null,
          "node_count": 0,
          "connection_count": 0,
          "extraction_time": 0.713768,
          "error": "Workflow not found (404)"
        },
        "layer3": {
          "success": true,
          "data": {
            "introduction": "",
            "overview": "",
            "tutorial_text": "",
            "tutorial_sections": [],
            "step_by_step": [],
            "best_practices": [],
            "common_pitfalls": [],
            "image_urls": [],
            "video_urls": [],
            "code_snippets": [],
            "conclusion": "",
            "troubleshooting": {
              "common_issues": [],
              "error_messages": []
            },
            "related_workflows": []
          },
          "errors": [],
          "extraction_time": 6.602189,
          "metadata": {
            "workflow_id": "1854",
            "url": "https://n8n.io/workflows/1854",
            "extracted_at": "2025-10-11T08:50:25.459769",
            "extractor_version": "1.0.0"
          }
        }
      },
      "multimodal": null,
      "transcripts": null,
      "validation": {
        "layer1": {
          "score": 55,
          "issues": [
            "Description missing or too short (minimum 20 characters)",
            "Difficulty level not set",
            "Author not identified",
            "No engagement metrics available"
          ],
          "valid": false,
          "layer": "layer1"
        },
        "layer2": null,
        "layer3": {
          "score": 5,
          "issues": [
            "Tutorial text missing",
            "No tutorial sections extracted",
            "No images extracted",
            "Missing required fields: title, description, steps",
            "No step-by-step content extracted"
          ],
          "valid": false,
          "layer": "layer3"
        }
      },
      "quality": {
        "overall_score": 20.0,
        "classification": "Poor",
        "layer1_score": 55,
        "layer2_score": null,
        "layer3_score": 5,
        "consistency_score": 70.0,
        "total_issues": 9
      },
      "extraction_time": 12.924755096435547,
      "errors": [
        "Layer 2 extraction failed: Workflow not found (404)"
      ],
      "timestamp": "2025-10-11T08:50:19.187400"
    },
    {
      "success": true,
      "workflow_id": "2118",
      "url": "https://n8n.io/workflows/2118",
      "layers": {
        "layer1": {
          "success": true,
          "workflow_id": "2118",
          "data": {
            "title": "Send follow-ups using Gmail to Hubspot contacts",
            "description": "Use CaseFollowing up at the right time is one of the most important parts of sales. This workflow uses Gmail to send outreach emails to Hubspot contacts...",
            "author": "Igor Fediczko@igordisco",
            "use_case": "Use CaseFollowing up at the right time is one of the most important parts of sales.",
            "primary_category": "Strictly necessary",
            "secondary_categories": [
              "Performance",
              "Targeting",
              "Functionality",
              "Strictly necessary cookies allow core website functionality such as user login and account management. The website cannot be used properly without strictly necessary cookies.",
              "Performance cookies are used to see how visitors use the website, eg. analytics cookies. Those cookies cannot be used to directly identify a certain visitor.",
              "Targeting cookies are used to identify visitors between different websites, eg. content partners, banner networks. Those cookies may be used by companies to build a profile of visitor interests or show relevant ads on other websites.",
              "Functionality cookies are used to remember visitor information on the website, eg. language, timezone, enhanced content."
            ],
            "node_tags": [
              "github147,222",
              "hiring"
            ],
            "general_tags": [
              "Targeting",
              "Performance",
              "Strictly necessary",
              "Functionality"
            ],
            "difficulty_level": "intermediate",
            "views": 0,
            "upvotes": 0,
            "created_date": "2025-10-11T08:50:31.382801",
            "updated_date": "2025-10-11T08:50:31.382801",
            "setup_instructions": "Use CaseFollowing up at the right time is one of the most important parts of sales. This workflow uses Gmail to send outreach emails to Hubspot contacts...",
            "prerequisites": [
              "token_v2",
              "or website it relates to",
              "3\",[185,186],\"n8n-nodes-base",
              "Gmail creds",
              "{\n\t\tcontent: attr(label);\n\t\tfont-weight: bold;\n\t\twidth: 120px;\n\t\tmin-width: 120px;\n\t}"
            ],
            "estimated_setup_time": "4 minutes 59 sec",
            "industry": [
              "Strictly necessary"
            ]
          },
          "extraction_time": 7.743171215057373,
          "error": null
        },
        "layer2": {
          "success": true,
          "workflow_id": "2118",
          "data": {
            "id": 2118,
            "name": "Send follow-ups using Gmail to Hubspot contacts",
            "workflow": {
              "nodes": [
                {
                  "id": "3a0ba7f4-ac41-49b0-a055-b993c82f2680",
                  "name": "Every day at 9 am",
                  "type": "n8n-nodes-base.scheduleTrigger",
                  "position": [
                    340,
                    1280
                  ],
                  "parameters": {
                    "rule": {
                      "interval": [
                        {
                          "triggerAtHour": 9
                        }
                      ]
                    }
                  },
                  "typeVersion": 1.1
                },
                {
                  "id": "5fa47f36-3206-44b9-965a-0d27b10acc21",
                  "name": "Sticky Note2",
                  "type": "n8n-nodes-base.stickyNote",
                  "position": [
                    740,
                    980
                  ],
                  "parameters": {
                    "width": 348.2877732355713,
                    "height": 595.2986206729652,
                    "content": "## Search for all contacts that last contact date for is known\n\n1. Setup Oauth2 creds using n8n docs\nhttps://docs.n8n.io/integrations/builtin/trigger-nodes/n8n-nodes-base.hubspottrigger/\n\n### Be careful with scopes. Scopes must be exactly as defined in the n8n docs\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n### To make this more effective, we sort ascending by last contact date."
                  },
                  "typeVersion": 1
                },
                {
                  "id": "16b6fadf-ff1d-4670-b148-151cfbd242d5",
                  "name": "Send outreach email",
                  "type": "n8n-nodes-base.gmail",
                  "position": [
                    2040,
                    1060
                  ],
                  "parameters": {
                    "sendTo": "={{ $json.to }}",
                    "message": "={{ $json.html }}",
                    "options": {
                      "senderName": "Mutasem from n8n",
                      "appendAttribution": false
                    },
                    "subject": "={{ $json.subject }}"
                  },
                  "credentials": {
                    "gmailOAuth2": {
                      "id": "rd2agqPeJBD2377h",
                      "name": "Work Gmail"
                    }
                  },
                  "typeVersion": 2.1
                },
                {
                  "id": "a89ec3bd-7bb0-4dde-a9eb-800842073fc9",
                  "name": "Sticky Note",
                  "type": "n8n-nodes-base.stickyNote",
                  "position": [
                    2000,
                    1300
                  ],
                  "parameters": {
                    "color": 3,
                    "width": 289.74216745960825,
                    "height": 402.1775107197669,
                    "content": "## Record engagement in Hubspot\n\nOnce engagement is added, last contact date is updated and won't show up in search results for another month.\n"
                  },
                  "typeVersion": 1
                },
                {
                  "id": "687509ed-4d25-4597-bade-1802348e42c9",
                  "name": "Sticky Note1",
                  "type": "n8n-nodes-base.stickyNote",
                  "position": [
                    260,
                    980
                  ],
                  "parameters": {
                    "color": 5,
                    "width": 407.25356360335365,
                    "height": 242.51175804432177,
                    "content": "## Send followup email using Gmail to Hubspot contacts \n\nFollowing up at the right time is one of the most important parts of sales. This workflow uses Gmail to send outreach emails to Hubspot contacts that have already been contacted only once more than a month ago, and records the engagement in Hubspot. "
                  },
                  "typeVersion": 1
                },
                {
                  "id": "e66f48c9-0e19-4089-a4a4-d9e87b56898a",
                  "name": "Record engagement in HubSpot",
                  "type": "n8n-nodes-base.hubspot",
                  "position": [
                    2080,
                    1500
                  ],
                  "parameters": {
                    "type": "email",
                    "metadata": {
                      "html": "={{ $json.html }}",
                      "subject": "={{ $json.subject }}",
                      "toEmail": [
                        "={{ $json.to }}"
                      ],
                      "firstName": "Mutasem",
                      "fromEmail": "mutasem@n8n.io"
                    },
                    "resource": "engagement",
                    "authentication": "oAuth2",
                    "additionalFields": {
                      "associations": {
                        "contactIds": "={{ $json.id }}"
                      }
                    }
                  },
                  "credentials": {
                    "hubspotOAuth2Api": {
                      "id": "Gxwfj6z9NwaEC3P5",
                      "name": "HubSpot account 3"
                    }
                  },
                  "typeVersion": 2
                },
                {
                  "id": "f90770cf-aa6c-4148-b471-2b28ed978f72",
                  "name": "Get previously HubSpot contacts",
                  "type": "n8n-nodes-base.hubspot",
                  "position": [
                    840,
                    1280
                  ],
                  "parameters": {
                    "operation": "search",
                    "authentication": "oAuth2",
                    "filterGroupsUi": {
                      "filterGroupsValues": [
                        {
                          "filtersUi": {
                            "filterValues": [
                              {
                                "operator": "HAS_PROPERTY",
                                "propertyName": "notes_last_contacted|datetime"
                              }
                            ]
                          }
                        }
                      ]
                    },
                    "additionalFields": {
                      "sortBy": "notes_last_contacted",
                      "direction": "ASCENDING",
                      "properties": [
                        "firstname",
                        "lastname",
                        "email",
                        "notes_last_contacted"
                      ]
                    }
                  },
                  "credentials": {
                    "hubspotOAuth2Api": {
                      "id": "Gxwfj6z9NwaEC3P5",
                      "name": "HubSpot account 3"
                    }
                  },
                  "typeVersion": 2
                },
                {
                  "id": "751fd345-9fec-4c7c-b20b-1db86ce6df10",
                  "name": "if last contacted before a month",
                  "type": "n8n-nodes-base.if",
                  "position": [
                    1120,
                    1280
                  ],
                  "parameters": {
                    "options": {},
                    "conditions": {
                      "options": {
                        "leftValue": "",
                        "caseSensitive": true,
                        "typeValidation": "strict"
                      },
                      "combinator": "and",
                      "conditions": [
                        {
                          "id": "8d9ad7ef-6e1a-486c-9fac-419ad2660ace",
                          "operator": {
                            "type": "dateTime",
                            "operation": "before"
                          },
                          "leftValue": "={{ $json.properties.notes_last_contacted }}",
                          "rightValue": "={{ DateTime.now().minus({days: 30}) }}"
                        }
                      ]
                    }
                  },
                  "typeVersion": 2
                },
                {
                  "id": "52596987-ef7f-4dd7-98e7-6c3aaf6c2853",
                  "name": "Get Hubspot Contact to engagement",
                  "type": "n8n-nodes-base.httpRequest",
                  "position": [
                    1340,
                    1280
                  ],
                  "parameters": {
                    "url": "=https://api.hubapi.com/crm-associations/v1/associations/{{ $json.id }}/HUBSPOT_DEFINED/9",
                    "options": {},
                    "authentication": "predefinedCredentialType",
                    "nodeCredentialType": "hubspotOAuth2Api"
                  },
                  "credentials": {
                    "hubspotOAuth2Api": {
                      "id": "Gxwfj6z9NwaEC3P5",
                      "name": "HubSpot account 3"
                    }
                  },
                  "typeVersion": 4.1
                },
                {
                  "id": "fe0bc120-8bee-41fa-a896-3c9ff8cf3a29",
                  "name": "if there has been only one engagement",
                  "type": "n8n-nodes-base.if",
                  "position": [
                    1560,
                    1280
                  ],
                  "parameters": {
                    "options": {},
                    "conditions": {
                      "options": {
                        "leftValue": "",
                        "caseSensitive": true,
                        "typeValidation": "strict"
                      },
                      "combinator": "and",
                      "conditions": [
                        {
                          "id": "07c7e29c-eed1-4872-a9f7-b833bb0cafca",
                          "operator": {
                            "type": "number",
                            "operation": "equals"
                          },
                          "leftValue": "={{ $json.results.length }}",
                          "rightValue": 1
                        }
                      ]
                    }
                  },
                  "typeVersion": 2
                },
                {
                  "id": "512909c7-104b-4507-b91e-aa5b5a9410e5",
                  "name": "Set email keys",
                  "type": "n8n-nodes-base.set",
                  "position": [
                    1820,
                    1280
                  ],
                  "parameters": {
                    "options": {},
                    "assignments": {
                      "assignments": [
                        {
                          "id": "f3ecc873-2d60-4f2d-bc40-81f9379c725b",
                          "name": "html",
                          "type": "string",
                          "value": "=Hey {{ $json.properties.firstname }},\n\nJust want to follow up on my previous email, since I have not \n heard from you. Have you had the chance to consider n8n? \n\nCheers,\n\nMutasem"
                        },
                        {
                          "id": "9f4f5b68-984b-415e-a110-a35ded22dd41",
                          "name": "subject",
                          "type": "string",
                          "value": "Follow up on n8n"
                        },
                        {
                          "id": "5362aa67-f3fa-4a6e-b6e8-4c50cc7a3192",
                          "name": "to",
                          "type": "string",
                          "value": "={{ $('Get previously HubSpot contacts').item.json.properties.email }}"
                        },
                        {
                          "id": "5b11e503-868d-4fca-bb44-59bb44d597a8",
                          "name": "id",
                          "type": "string",
                          "value": "={{ $('Get previously HubSpot contacts').item.json.id }}"
                        }
                      ]
                    }
                  },
                  "typeVersion": 3.3
                },
                {
                  "id": "c0e5472d-5208-4df7-89e8-380c2dab9642",
                  "name": "Sticky Note3",
                  "type": "n8n-nodes-base.stickyNote",
                  "position": [
                    1300,
                    1060
                  ],
                  "parameters": {
                    "color": 4,
                    "width": 490.3275896931988,
                    "height": 496.3776986502359,
                    "content": "## Get pervious engagements. Avoid sending follow ups if first eng\n\n### Here we simply follow up if there has only been outreach email before.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n### We could the engagements here and their types and perform more advanced filtering. "
                  },
                  "typeVersion": 1
                }
              ],
              "pinData": {},
              "connections": {
                "Set email keys": {
                  "main": [
                    [
                      {
                        "node": "Record engagement in HubSpot",
                        "type": "main",
                        "index": 0
                      },
                      {
                        "node": "Send outreach email",
                        "type": "main",
                        "index": 0
                      }
                    ]
                  ]
                },
                "Every day at 9 am": {
                  "main": [
                    [
                      {
                        "node": "Get previously HubSpot contacts",
                        "type": "main",
                        "index": 0
                      }
                    ]
                  ]
                },
                "Get previously HubSpot contacts": {
                  "main": [
                    [
                      {
                        "node": "if last contacted before a month",
                        "type": "main",
                        "index": 0
                      }
                    ]
                  ]
                },
                "if last contacted before a month": {
                  "main": [
                    [
                      {
                        "node": "Get Hubspot Contact to engagement",
                        "type": "main",
                        "index": 0
                      }
                    ]
                  ]
                },
                "Get Hubspot Contact to engagement": {
                  "main": [
                    [
                      {
                        "node": "if there has been only one engagement",
                        "type": "main",
                        "index": 0
                      }
                    ]
                  ]
                },
                "if there has been only one engagement": {
                  "main": [
                    [
                      {
                        "node": "Set email keys",
                        "type": "main",
                        "index": 0
                      }
                    ]
                  ]
                }
              }
            }
          },
          "node_count": 12,
          "connection_count": 6,
          "extraction_time": 0.452151,
          "error": null
        },
        "layer3": {
          "success": true,
          "data": {
            "introduction": "Use CaseFollowing up at the right time is one of the most important parts of sales. This workflow uses Gmail to send outreach emails to Hubspot contacts that have already been contacted only once more than a month ago, and records the engagement in Hubspot.SetupSetup HubSpot Oauth2 creds (Be careful with scopes. They have to be exact, not less or more. Yes, it\u2019s not simple, but it\u2019s well documented in the n8n docs. Be smarter than me, read the docs)Setup Gmail creds.Change the email variables in theSet keysnodeHow to adjust this templateThere's plenty to do here because the approach here is really just a starting point. Most important here is to figure out what your rules are to follow up. After a month? More than once?Also, remember to update the follow-up email! Unless you want to sell n8n \ud83d\ude09",
            "overview": "",
            "tutorial_text": "Use CaseFollowing up at the right time is one of the most important parts of sales. This workflow uses Gmail to send outreach emails to Hubspot contacts that have already been contacted only once more than a month ago, and records the engagement in Hubspot.SetupSetup HubSpot Oauth2 creds (Be careful with scopes. They have to be exact, not less or more. Yes, it\u2019s not simple, but it\u2019s well documented in the n8n docs. Be smarter than me, read the docs)Setup Gmail creds.Change the email variables in theSet keysnodeHow to adjust this templateThere's plenty to do here because the approach here is really just a starting point. Most important here is to figure out what your rules are to follow up. After a month? More than once?Also, remember to update the follow-up email! Unless you want to sell n8n \ud83d\ude09",
            "tutorial_sections": [],
            "step_by_step": [],
            "best_practices": [],
            "common_pitfalls": [],
            "image_urls": [
              "https://n8n.io/nodes/http-request.svg",
              "https://gravatar.com/avatar/16d9c92db78317b6af7d0935bee34a47c522cb81d35c234ff76ea580ff1f6c29?r=pg&d=retro&size=200",
              "https://gravatar.com/avatar/4ab99e51473df76838beeaac908747f7928c625f869794815cabe34016967d51?r=pg&d=retro&size=200",
              "https://n8n.io/nodes/google-sheets.svg",
              "https://gravatar.com/avatar/4cda9c7c1c24fdb61896cac588296d1dad03655a439ab71ef34f4c62c0ba8524?r=pg&d=retro&size=200",
              "https://n8n.io/nodes/webhook.svg",
              "https://n8n.io/nodes/respond-to-webhook.svg",
              "https://gravatar.com/avatar/3cbbb9fa4e67c10b37fb59f284938c393e1cc1544f6307d0f2ca7ee3dedcdf43?r=pg&d=retro&size=200",
              "https://n8n.io/images/stars-footer.svg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/avatar_igordisco_9243b86232_cd9a5c94ce.jpg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/neutral_avatar_purple_fee36bffe3.PNG",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/avatar_anderoav_589989fc39_ceb1c71a0c.jpg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/avatar_maxim_poulsen_48f450887b_852d0439bc.jpeg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/Felix_Leber_f7a5b3c776_130aeca79d.jpeg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/avatar_Ironben_0a4b3e7d12_e35805265c.jpg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/Francois_lassl_d5cfb504c7_710c87121d.jpeg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/twitter_x_62a44e965e.svg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/github_e1f217d7a3_b9a271324f.svg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/discord_253947c90b_191e8f60fa.svg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/linkedin_d710e84d63_6ed0dc28aa.svg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/youtube_de4bdef50a_4b3a8b8aac.svg"
            ],
            "video_urls": [],
            "code_snippets": [],
            "conclusion": "",
            "troubleshooting": {
              "common_issues": [],
              "error_messages": []
            },
            "related_workflows": []
          },
          "errors": [],
          "extraction_time": 5.612154,
          "metadata": {
            "workflow_id": "2118",
            "url": "https://n8n.io/workflows/2118",
            "extracted_at": "2025-10-11T08:50:33.136576",
            "extractor_version": "1.0.0"
          }
        }
      },
      "multimodal": null,
      "transcripts": null,
      "validation": {
        "layer1": {
          "score": 80,
          "issues": [
            "Difficulty level not set",
            "No engagement metrics available"
          ],
          "valid": true,
          "layer": "layer1"
        },
        "layer2": {
          "score": 90,
          "issues": [
            "Missing or invalid workflow metadata"
          ],
          "valid": true,
          "layer": "layer2"
        },
        "layer3": {
          "score": 35,
          "issues": [
            "No tutorial sections extracted",
            "No images extracted",
            "Missing required fields: title, description, steps",
            "No step-by-step content extracted"
          ],
          "valid": false,
          "layer": "layer3"
        }
      },
      "quality": {
        "overall_score": 67.0,
        "classification": "Fair",
        "layer1_score": 80,
        "layer2_score": 90,
        "layer3_score": 35,
        "consistency_score": 100.0,
        "total_issues": 7
      },
      "extraction_time": 14.454743146896362,
      "errors": [],
      "timestamp": "2025-10-11T08:50:24.332921"
    },
    {
      "success": true,
      "workflow_id": "1982",
      "url": "https://n8n.io/workflows/1982",
      "layers": {
        "layer1": {
          "success": true,
          "workflow_id": "1982",
          "data": {
            "title": "Unknown Title",
            "description": "",
            "author": "Unknown Author",
            "use_case": "General workflow automation",
            "primary_category": "Strictly necessary",
            "secondary_categories": [
              "Performance",
              "Targeting",
              "Functionality",
              "Strictly necessary cookies allow core website functionality such as user login and account management. The website cannot be used properly without strictly necessary cookies.",
              "Performance cookies are used to see how visitors use the website, eg. analytics cookies. Those cookies cannot be used to directly identify a certain visitor.",
              "Targeting cookies are used to identify visitors between different websites, eg. content partners, banner networks. Those cookies may be used by companies to build a profile of visitor interests or show relevant ads on other websites.",
              "Functionality cookies are used to remember visitor information on the website, eg. language, timezone, enhanced content."
            ],
            "node_tags": [],
            "general_tags": [
              "Targeting",
              "Performance",
              "Strictly necessary",
              "Functionality"
            ],
            "difficulty_level": "intermediate",
            "views": 0,
            "upvotes": 0,
            "created_date": "2025-10-11T08:50:36.662483",
            "updated_date": "2025-10-11T08:50:36.662483",
            "setup_instructions": "",
            "prerequisites": [
              "token_v2",
              "or website it relates to",
              "{\n\t\tcontent: attr(label);\n\t\tfont-weight: bold;\n\t\twidth: 120px;\n\t\tmin-width: 120px;\n\t}",
              "visiting the said website",
              "__Secure-ROLLOUT_TOKEN"
            ],
            "estimated_setup_time": "4 minutes 59 sec",
            "industry": [
              "Strictly necessary"
            ]
          },
          "extraction_time": 5.023698091506958,
          "error": null
        },
        "layer2": {
          "success": false,
          "workflow_id": "1982",
          "data": null,
          "node_count": 0,
          "connection_count": 0,
          "extraction_time": 0.141496,
          "error": "Workflow not found (404)"
        },
        "layer3": {
          "success": true,
          "data": {
            "introduction": "",
            "overview": "",
            "tutorial_text": "",
            "tutorial_sections": [],
            "step_by_step": [],
            "best_practices": [],
            "common_pitfalls": [],
            "image_urls": [],
            "video_urls": [],
            "code_snippets": [],
            "conclusion": "",
            "troubleshooting": {
              "common_issues": [],
              "error_messages": []
            },
            "related_workflows": []
          },
          "errors": [],
          "extraction_time": 5.788846,
          "metadata": {
            "workflow_id": "1982",
            "url": "https://n8n.io/workflows/1982",
            "extracted_at": "2025-10-11T08:50:38.005384",
            "extractor_version": "1.0.0"
          }
        }
      },
      "multimodal": null,
      "transcripts": null,
      "validation": {
        "layer1": {
          "score": 55,
          "issues": [
            "Description missing or too short (minimum 20 characters)",
            "Difficulty level not set",
            "Author not identified",
            "No engagement metrics available"
          ],
          "valid": false,
          "layer": "layer1"
        },
        "layer2": null,
        "layer3": {
          "score": 5,
          "issues": [
            "Tutorial text missing",
            "No tutorial sections extracted",
            "No images extracted",
            "Missing required fields: title, description, steps",
            "No step-by-step content extracted"
          ],
          "valid": false,
          "layer": "layer3"
        }
      },
      "quality": {
        "overall_score": 20.0,
        "classification": "Poor",
        "layer1_score": 55,
        "layer2_score": null,
        "layer3_score": 5,
        "consistency_score": 70.0,
        "total_issues": 9
      },
      "extraction_time": 11.72267198562622,
      "errors": [
        "Layer 2 extraction failed: Workflow not found (404)"
      ],
      "timestamp": "2025-10-11T08:50:32.112537"
    },
    {
      "success": true,
      "workflow_id": "2296",
      "url": "https://n8n.io/workflows/2296",
      "layers": {
        "layer1": {
          "success": true,
          "workflow_id": "2296",
          "data": {
            "title": "Unknown Title",
            "description": "",
            "author": "Unknown Author",
            "use_case": "General workflow automation",
            "primary_category": "Strictly necessary",
            "secondary_categories": [
              "Performance",
              "Targeting",
              "Functionality",
              "Strictly necessary cookies allow core website functionality such as user login and account management. The website cannot be used properly without strictly necessary cookies.",
              "Performance cookies are used to see how visitors use the website, eg. analytics cookies. Those cookies cannot be used to directly identify a certain visitor.",
              "Targeting cookies are used to identify visitors between different websites, eg. content partners, banner networks. Those cookies may be used by companies to build a profile of visitor interests or show relevant ads on other websites.",
              "Functionality cookies are used to remember visitor information on the website, eg. language, timezone, enhanced content."
            ],
            "node_tags": [],
            "general_tags": [
              "Targeting",
              "Performance",
              "Strictly necessary",
              "Functionality"
            ],
            "difficulty_level": "intermediate",
            "views": 0,
            "upvotes": 0,
            "created_date": "2025-10-11T08:50:37.660684",
            "updated_date": "2025-10-11T08:50:37.660684",
            "setup_instructions": "",
            "prerequisites": [
              "token_v2",
              "or website it relates to",
              "{\n\t\tcontent: attr(label);\n\t\tfont-weight: bold;\n\t\twidth: 120px;\n\t\tmin-width: 120px;\n\t}",
              "visiting the said website",
              "__Secure-ROLLOUT_TOKEN"
            ],
            "estimated_setup_time": "4 minutes 59 sec",
            "industry": [
              "Strictly necessary"
            ]
          },
          "extraction_time": 4.850682020187378,
          "error": null
        },
        "layer2": {
          "success": false,
          "workflow_id": "2296",
          "data": null,
          "node_count": 0,
          "connection_count": 0,
          "extraction_time": 0.188706,
          "error": "Workflow not found (404)"
        },
        "layer3": {
          "success": true,
          "data": {
            "introduction": "",
            "overview": "",
            "tutorial_text": "",
            "tutorial_sections": [],
            "step_by_step": [],
            "best_practices": [],
            "common_pitfalls": [],
            "image_urls": [],
            "video_urls": [],
            "code_snippets": [],
            "conclusion": "",
            "troubleshooting": {
              "common_issues": [],
              "error_messages": []
            },
            "related_workflows": []
          },
          "errors": [],
          "extraction_time": 5.681343,
          "metadata": {
            "workflow_id": "2296",
            "url": "https://n8n.io/workflows/2296",
            "extracted_at": "2025-10-11T08:50:38.819649",
            "extractor_version": "1.0.0"
          }
        }
      },
      "multimodal": null,
      "transcripts": null,
      "validation": {
        "layer1": {
          "score": 55,
          "issues": [
            "Description missing or too short (minimum 20 characters)",
            "Difficulty level not set",
            "Author not identified",
            "No engagement metrics available"
          ],
          "valid": false,
          "layer": "layer1"
        },
        "layer2": null,
        "layer3": {
          "score": 5,
          "issues": [
            "Tutorial text missing",
            "No tutorial sections extracted",
            "No images extracted",
            "Missing required fields: title, description, steps",
            "No step-by-step content extracted"
          ],
          "valid": false,
          "layer": "layer3"
        }
      },
      "quality": {
        "overall_score": 20.0,
        "classification": "Poor",
        "layer1_score": 55,
        "layer2_score": null,
        "layer3_score": 5,
        "consistency_score": 70.0,
        "total_issues": 9
      },
      "extraction_time": 11.431676149368286,
      "errors": [
        "Layer 2 extraction failed: Workflow not found (404)"
      ],
      "timestamp": "2025-10-11T08:50:33.194237"
    },
    {
      "success": true,
      "workflow_id": "1904",
      "url": "https://n8n.io/workflows/1904",
      "layers": {
        "layer1": {
          "success": true,
          "workflow_id": "1904",
          "data": {
            "title": "Unknown Title",
            "description": "",
            "author": "Unknown Author",
            "use_case": "General workflow automation",
            "primary_category": "Strictly necessary",
            "secondary_categories": [
              "Performance",
              "Targeting",
              "Functionality",
              "Strictly necessary cookies allow core website functionality such as user login and account management. The website cannot be used properly without strictly necessary cookies.",
              "Performance cookies are used to see how visitors use the website, eg. analytics cookies. Those cookies cannot be used to directly identify a certain visitor.",
              "Targeting cookies are used to identify visitors between different websites, eg. content partners, banner networks. Those cookies may be used by companies to build a profile of visitor interests or show relevant ads on other websites.",
              "Functionality cookies are used to remember visitor information on the website, eg. language, timezone, enhanced content."
            ],
            "node_tags": [],
            "general_tags": [
              "Targeting",
              "Performance",
              "Strictly necessary",
              "Functionality"
            ],
            "difficulty_level": "intermediate",
            "views": 0,
            "upvotes": 0,
            "created_date": "2025-10-11T08:50:43.353307",
            "updated_date": "2025-10-11T08:50:43.353307",
            "setup_instructions": "",
            "prerequisites": [
              "token_v2",
              "or website it relates to",
              "{\n\t\tcontent: attr(label);\n\t\tfont-weight: bold;\n\t\twidth: 120px;\n\t\tmin-width: 120px;\n\t}",
              "visiting the said website",
              "__Secure-ROLLOUT_TOKEN"
            ],
            "estimated_setup_time": "4 minutes 59 sec",
            "industry": [
              "Strictly necessary"
            ]
          },
          "extraction_time": 5.019943952560425,
          "error": null
        },
        "layer2": {
          "success": false,
          "workflow_id": "1904",
          "data": null,
          "node_count": 0,
          "connection_count": 0,
          "extraction_time": 0.603102,
          "error": "Workflow not found (404)"
        },
        "layer3": {
          "success": true,
          "data": {
            "introduction": "",
            "overview": "",
            "tutorial_text": "",
            "tutorial_sections": [],
            "step_by_step": [],
            "best_practices": [],
            "common_pitfalls": [],
            "image_urls": [],
            "video_urls": [],
            "code_snippets": [],
            "conclusion": "",
            "troubleshooting": {
              "common_issues": [],
              "error_messages": []
            },
            "related_workflows": []
          },
          "errors": [],
          "extraction_time": 5.668303,
          "metadata": {
            "workflow_id": "1904",
            "url": "https://n8n.io/workflows/1904",
            "extracted_at": "2025-10-11T08:50:45.224251",
            "extractor_version": "1.0.0"
          }
        }
      },
      "multimodal": null,
      "transcripts": null,
      "validation": {
        "layer1": {
          "score": 55,
          "issues": [
            "Description missing or too short (minimum 20 characters)",
            "Difficulty level not set",
            "Author not identified",
            "No engagement metrics available"
          ],
          "valid": false,
          "layer": "layer1"
        },
        "layer2": null,
        "layer3": {
          "score": 5,
          "issues": [
            "Tutorial text missing",
            "No tutorial sections extracted",
            "No images extracted",
            "Missing required fields: title, description, steps",
            "No step-by-step content extracted"
          ],
          "valid": false,
          "layer": "layer3"
        }
      },
      "quality": {
        "overall_score": 20.0,
        "classification": "Poor",
        "layer1_score": 55,
        "layer2_score": null,
        "layer3_score": 5,
        "consistency_score": 70.0,
        "total_issues": 9
      },
      "extraction_time": 12.13959288597107,
      "errors": [
        "Layer 2 extraction failed: Workflow not found (404)"
      ],
      "timestamp": "2025-10-11T08:50:38.788448"
    },
    {
      "success": true,
      "workflow_id": "2192",
      "url": "https://n8n.io/workflows/2192",
      "layers": {
        "layer1": {
          "success": true,
          "workflow_id": "2192",
          "data": {
            "title": "Streamline Your Zoom Meetings with Secure, Automated Stripe Payments",
            "description": "\ud83c\udf89 Do you want to master AI automation, so you can save time and build cool stuff? I\u2019ve created a welcoming Skool community for non-technical yet...",
            "author": "Igor Fediczko@igordisco",
            "use_case": "\ud83c\udf89 Do you want to master AI automation, so you can save time and build cool stuff? I\u2019ve created a welcoming Skool community for non-technical yet.",
            "primary_category": "Strictly necessary",
            "secondary_categories": [
              "Performance",
              "Targeting",
              "Functionality",
              "Strictly necessary cookies allow core website functionality such as user login and account management. The website cannot be used properly without strictly necessary cookies.",
              "Performance cookies are used to see how visitors use the website, eg. analytics cookies. Those cookies cannot be used to directly identify a certain visitor.",
              "Targeting cookies are used to identify visitors between different websites, eg. content partners, banner networks. Those cookies may be used by companies to build a profile of visitor interests or show relevant ads on other websites.",
              "Functionality cookies are used to remember visitor information on the website, eg. language, timezone, enhanced content."
            ],
            "node_tags": [
              "github147,222",
              "hiring"
            ],
            "general_tags": [
              "Targeting",
              "Performance",
              "Strictly necessary",
              "Functionality"
            ],
            "difficulty_level": "intermediate",
            "views": 0,
            "upvotes": 0,
            "created_date": "2025-10-11T08:50:54.746901",
            "updated_date": "2025-10-11T08:50:54.746901",
            "setup_instructions": "\ud83c\udf89 Do you want to master AI automation, so you can save time and build cool stuff? I\u2019ve created a welcoming Skool community for non-technical yet...",
            "prerequisites": [
              "token_v2",
              "or website it relates to",
              "Connect your Zoom, Stripe, Gmail and Google Sheet credentials.",
              "{\n\t\tcontent: attr(label);\n\t\tfont-weight: bold;\n\t\twidth: 120px;\n\t\tmin-width: 120px;\n\t}",
              "visiting the said website"
            ],
            "estimated_setup_time": "4 minutes 59 sec",
            "industry": [
              "Strictly necessary"
            ]
          },
          "extraction_time": 11.707876920700073,
          "error": null
        },
        "layer2": {
          "success": true,
          "workflow_id": "2192",
          "data": {
            "id": 2192,
            "name": "Streamline Your Zoom Meetings with Secure, Automated Stripe Payments",
            "workflow": {
              "id": "2DT5BW5tOdy87AUl",
              "meta": {
                "instanceId": "8418cffce8d48086ec0a73fd90aca708aa07591f2fefa6034d87fe12a09de26e"
              },
              "name": "Streamline Your Zoom Meetings with Secure, Automated Stripe Payments",
              "tags": [],
              "nodes": [
                {
                  "id": "fcc38ae8-0dbf-4676-b47b-ba77f97a38b8",
                  "name": "Create Zoom meeting",
                  "type": "n8n-nodes-base.zoom",
                  "position": [
                    180,
                    480
                  ],
                  "parameters": {
                    "topic": "={{ $('Creation Form').item.json.title }}",
                    "authentication": "oAuth2",
                    "additionalFields": {
                      "password": "={{ Math.random().toString(36).slice(-4); }}",
                      "startTime": "={{ new Date(new Date($('Creation Form').item.json.date_start).getTime() + ($('Creation Form').item.json.hour * 3600000) + ($('Creation Form').item.json.minute * 60000)).toISOString() }}"
                    }
                  },
                  "credentials": {
                    "zoomOAuth2Api": {
                      "id": "JQ9fG5WNTVssHxGj",
                      "name": "Zoom account"
                    }
                  },
                  "typeVersion": 1
                },
                {
                  "id": "3d2dea09-c463-447b-9a9d-daca8fdcac06",
                  "name": "Create Stripe Product",
                  "type": "n8n-nodes-base.httpRequest",
                  "position": [
                    400,
                    480
                  ],
                  "parameters": {
                    "url": "https://api.stripe.com/v1/products",
                    "method": "POST",
                    "options": {},
                    "sendBody": true,
                    "contentType": "form-urlencoded",
                    "authentication": "predefinedCredentialType",
                    "bodyParameters": {
                      "parameters": [
                        {
                          "name": "name",
                          "value": "={{ $('Creation Form').item.json.title }}"
                        },
                        {
                          "name": "default_price_data[unit_amount]",
                          "value": "={{ $('Creation Form').item.json.price * 100 }}"
                        },
                        {
                          "name": "default_price_data[currency]",
                          "value": "={{ $('Config').item.json.currency }}"
                        }
                      ]
                    },
                    "nodeCredentialType": "stripeApi"
                  },
                  "credentials": {
                    "stripeApi": {
                      "id": "qjose8z3RR7Xzm7b",
                      "name": "Stripe Dev"
                    }
                  },
                  "typeVersion": 4.1
                },
                {
                  "id": "01ab74fb-19a1-42ef-a0ad-31107c7ded3f",
                  "name": "Config",
                  "type": "n8n-nodes-base.set",
                  "notes": "Setup your flow",
                  "position": [
                    -220,
                    640
                  ],
                  "parameters": {
                    "options": {},
                    "assignments": {
                      "assignments": [
                        {
                          "id": "038b54b7-9559-444e-8653-c5256a5b784e",
                          "name": "currency",
                          "type": "string",
                          "value": "EUR"
                        },
                        {
                          "id": "64d1eeee-cabe-403b-a634-f3238f586f58",
                          "name": "sheet_url",
                          "type": "string",
                          "value": "https://docs.google.com/spreadsheets/d/1ZliqqBNo6X0iM9yXBOiCG1e4Q7L7bQKMFmjvbSgUSnA/edit#gid=0"
                        },
                        {
                          "id": "997fe5a1-f601-458d-899c-673dff4acb04",
                          "name": "teacher_email",
                          "type": "string",
                          "value": "emm.bernard@gmail.com"
                        }
                      ]
                    }
                  },
                  "notesInFlow": true,
                  "typeVersion": 3.3
                },
                {
                  "id": "2aa87b96-924b-472c-8cc6-2de028ce0195",
                  "name": "Send email to teacher",
                  "type": "n8n-nodes-base.gmail",
                  "position": [
                    1040,
                    480
                  ],
                  "parameters": {
                    "sendTo": "={{ $('Config').item.json.teacher_email }}",
                    "message": "=<b>Congratulations, your event has been succesfully created \ud83c\udf89</b><br/><br/>\n\nTitle: {{ $('Creation Form').item.json.title }}<br/>\nPrice:  {{ $('Creation Form').item.json.price }} {{ $('Config').item.json.currency }}<br/>\nStart date: {{ $('Creation Form').item.json.date_start }}<br/><br/>\n\n<b>Payment link:</b><br/>\n {{ $('Create payment link').item.json.url }}<br/>\n<i>Start sharing this link to get subscriptions</i><br/><br/>\n<b>Participant list:</b><br/>\n{{ $('Config').item.json.sheet_url }}#gid={{ $('Create Stripe Product').item.json.created }}\n<br/><br/>\n<b>Zoom infos:</b><br/>\nLink: {{ $('Create Zoom meeting').item.json.join_url }}<br/>\nSession ID: {{ $('Create Zoom meeting').item.json.id }}<br/>\nPassword: {{ $('Create Zoom meeting').item.json.password }}<br/> ",
                    "options": {},
                    "subject": "=\ud83c\udf89 {{ $('Creation Form').item.json.title }} has been created!"
                  },
                  "credentials": {
                    "gmailOAuth2": {
                      "id": "DMcPDN0IHPwGmI7f",
                      "name": "Gmail account"
                    }
                  },
                  "typeVersion": 2.1
                },
                {
                  "id": "40f66f09-19c9-40eb-a9c4-138464ccd371",
                  "name": "Create participant list",
                  "type": "n8n-nodes-base.googleSheets",
                  "position": [
                    840,
                    480
                  ],
                  "parameters": {
                    "title": "={{ $('Creation Form').item.json.date_start }} - {{ $('Creation Form').item.json.title }} - {{ $('Create Stripe Product').item.json.created }}",
                    "options": {
                      "index": 0,
                      "sheetId": "={{ $('Create Stripe Product').item.json.created }}"
                    },
                    "operation": "create",
                    "documentId": {
                      "__rl": true,
                      "mode": "url",
                      "value": "={{ $('Config').item.json.sheet_url }}"
                    }
                  },
                  "credentials": {
                    "googleSheetsOAuth2Api": {
                      "id": "RICzFHixgHXMuKmg",
                      "name": "Google Sheets account"
                    }
                  },
                  "typeVersion": 4.3,
                  "alwaysOutputData": true
                },
                {
                  "id": "67ff21d2-57b8-4ccd-91ee-a1bff1ea23b2",
                  "name": "Add participant to list",
                  "type": "n8n-nodes-base.googleSheets",
                  "position": [
                    400,
                    800
                  ],
                  "parameters": {
                    "columns": {
                      "value": {},
                      "schema": [
                        {
                          "id": "city",
                          "type": "string",
                          "display": true,
                          "removed": false,
                          "required": false,
                          "displayName": "city",
                          "defaultMatch": false,
                          "canBeUsedToMatch": true
                        },
                        {
                          "id": "email",
                          "type": "string",
                          "display": true,
                          "removed": false,
                          "required": false,
                          "displayName": "email",
                          "defaultMatch": false,
                          "canBeUsedToMatch": true
                        },
                        {
                          "id": "name",
                          "type": "string",
                          "display": true,
                          "removed": false,
                          "required": false,
                          "displayName": "name",
                          "defaultMatch": false,
                          "canBeUsedToMatch": true
                        },
                        {
                          "id": "country",
                          "type": "string",
                          "display": true,
                          "removed": false,
                          "required": false,
                          "displayName": "country",
                          "defaultMatch": false,
                          "canBeUsedToMatch": true
                        },
                        {
                          "id": "postal_code",
                          "type": "string",
                          "display": true,
                          "removed": false,
                          "required": false,
                          "displayName": "postal_code",
                          "defaultMatch": false,
                          "canBeUsedToMatch": true
                        },
                        {
                          "id": "amount",
                          "type": "string",
                          "display": true,
                          "removed": false,
                          "required": false,
                          "displayName": "amount",
                          "defaultMatch": false,
                          "canBeUsedToMatch": true
                        },
                        {
                          "id": "currency",
                          "type": "string",
                          "display": true,
                          "removed": false,
                          "required": false,
                          "displayName": "currency",
                          "defaultMatch": false,
                          "canBeUsedToMatch": true
                        }
                      ],
                      "mappingMode": "autoMapInputData",
                      "matchingColumns": []
                    },
                    "options": {},
                    "operation": "append",
                    "sheetName": {
                      "__rl": true,
                      "mode": "id",
                      "value": "={{ $('On payment').item.json.data.object.metadata.event_sheet_id }}"
                    },
                    "documentId": {
                      "__rl": true,
                      "mode": "url",
                      "value": "={{ $('Config').item.json.sheet_url }}"
                    }
                  },
                  "credentials": {
                    "googleSheetsOAuth2Api": {
                      "id": "RICzFHixgHXMuKmg",
                      "name": "Google Sheets account"
                    }
                  },
                  "typeVersion": 4.3
                },
                {
                  "id": "67e317ba-77d5-4f77-8fe2-d38e1a68c6f1",
                  "name": "Send confirmation to participant",
                  "type": "n8n-nodes-base.gmail",
                  "position": [
                    620,
                    800
                  ],
                  "parameters": {
                    "sendTo": "={{ $('On payment').item.json.data.object.customer_details.email }}",
                    "message": "=Dear {{ $('On payment').item.json.data.object.customer_details.name }},<br/><br/>\n\nWe are very happy to announce that your subscription to our event <b>{{ $json.title }}</b> starting on <b>{{ $json.start }}</b> is now confirmed.<br/><br/>\n\nHere are the infos you will need to participate:<br/> \nZoom link:  {{ $('On payment').item.json.data.object.metadata.zoom_link }}<br/>\nZoom password:{{ $('On payment').item.json.data.object.metadata.zoom_password }}<br/>\nZoom ID: {{ $('On payment').item.json.data.object.metadata.zoom_id }}<br/><br/> \n\nLooking forward to see you there!<br/>\nKind regards<br/>",
                    "options": {
                      "appendAttribution": false
                    },
                    "subject": "Than you for your subscription \ud83d\ude4f"
                  },
                  "credentials": {
                    "gmailOAuth2": {
                      "id": "DMcPDN0IHPwGmI7f",
                      "name": "Gmail account"
                    }
                  },
                  "typeVersion": 2.1
                },
                {
                  "id": "ac5ca5f3-f9ca-494f-8e78-33dd663111ab",
                  "name": "Notify teacher",
                  "type": "n8n-nodes-base.gmail",
                  "position": [
                    840,
                    800
                  ],
                  "parameters": {
                    "sendTo": "={{ $('Config').item.json.teacher_email }}",
                    "message": "=<b>A new participant registred for the event {{ $('Retrieve event infos').item.json.title }} ({{ $('Retrieve event infos').item.json.start }})!</b><br/><br/>\n\n<b>Name: {{ $('On payment').item.json.data.object.customer_details.name }}</b><br/>\n<b>Email: {{ $('On payment').item.json.data.object.customer_details.email }}</b><br/><br/>\n\n<b>Participant list:</b><br/>\n{{ $('Config').item.json.sheet_url }}#gid={{ $('On payment').item.json.data.object.metadata.event_sheet_id }} ",
                    "options": {},
                    "subject": "New participant registred \u261d\ufe0f"
                  },
                  "credentials": {
                    "gmailOAuth2": {
                      "id": "DMcPDN0IHPwGmI7f",
                      "name": "Gmail account"
                    }
                  },
                  "typeVersion": 2.1
                },
                {
                  "id": "33e5283f-3854-4ada-8412-858c205f1d1e",
                  "name": "Create payment link",
                  "type": "n8n-nodes-base.httpRequest",
                  "position": [
                    620,
                    480
                  ],
                  "parameters": {
                    "url": "https://api.stripe.com/v1/payment_links",
                    "method": "POST",
                    "options": {},
                    "sendBody": true,
                    "contentType": "form-urlencoded",
                    "authentication": "predefinedCredentialType",
                    "bodyParameters": {
                      "parameters": [
                        {
                          "name": "line_items[0][price]",
                          "value": "={{ $json.default_price }}"
                        },
                        {
                          "name": "line_items[0][quantity]",
                          "value": "1"
                        },
                        {
                          "name": "metadata[event_sheet_id]",
                          "value": "={{ $('Create Stripe Product').item.json.created }}"
                        },
                        {
                          "name": "metadata[zoom_link]",
                          "value": "={{ $('Create Zoom meeting').item.json.join_url }}"
                        },
                        {
                          "name": "metadata[zoom_password]",
                          "value": "={{ $('Create Zoom meeting').item.json.password }}"
                        },
                        {
                          "name": "metadata[zoom_id]",
                          "value": "={{ $('Create Zoom meeting').item.json.id }}"
                        },
                        {
                          "name": "metadata[title]",
                          "value": "={{ $('Creation Form').item.json.title }}"
                        },
                        {
                          "name": "metadata[start_time]",
                          "value": "={{ $('Create Zoom meeting').item.json.start_time }}"
                        },
                        {
                          "name": "metadata[price]",
                          "value": "={{ $('Creation Form').item.json.price }}"
                        },
                        {
                          "name": "metadata[currency]",
                          "value": "={{ $('Config').item.json.currency }}"
                        }
                      ]
                    },
                    "nodeCredentialType": "stripeApi"
                  },
                  "credentials": {
                    "stripeApi": {
                      "id": "qjose8z3RR7Xzm7b",
                      "name": "Stripe Dev"
                    }
                  },
                  "typeVersion": 4.1
                },
                {
                  "id": "600c5382-bdac-4131-a784-399f5be2b54b",
                  "name": "Format participant",
                  "type": "n8n-nodes-base.set",
                  "position": [
                    180,
                    800
                  ],
                  "parameters": {
                    "options": {},
                    "assignments": {
                      "assignments": [
                        {
                          "id": "dabd3bc2-ca92-4d99-a223-b0ad18945121",
                          "name": "email",
                          "type": "string",
                          "value": "={{ $('On payment').item.json.data.object.customer_details.email }}"
                        },
                        {
                          "id": "d40709f6-ffcd-4055-a374-9044a9a5e3b2",
                          "name": "name",
                          "type": "string",
                          "value": "={{ $('On payment').item.json.data.object.customer_details.name }}"
                        }
                      ]
                    }
                  },
                  "typeVersion": 3.3
                },
                {
                  "id": "c8a90ac5-14cd-4ff2-bd5b-c35724f085d1",
                  "name": "Format event",
                  "type": "n8n-nodes-base.set",
                  "position": [
                    840,
                    280
                  ],
                  "parameters": {
                    "options": {},
                    "assignments": {
                      "assignments": [
                        {
                          "id": "a29943ba-b516-41a8-8f85-5bcee5eda0d1",
                          "name": "title",
                          "type": "string",
                          "value": "={{ $('Creation Form').item.json.title }}"
                        },
                        {
                          "id": "bf642fde-c4c2-42b4-beed-ef65efdab55b",
                          "name": "start",
                          "type": "string",
                          "value": "={{ $('Creation Form').item.json.date_start }}"
                        },
                        {
                          "id": "33f7a58e-624d-4ccc-bbea-ed3365cede20",
                          "name": "price",
                          "type": "number",
                          "value": "={{ $('Creation Form').item.json.price }}"
                        },
                        {
                          "id": "c948f71e-3b12-4c6a-a1f9-ee9a511fe262",
                          "name": "currency",
                          "type": "string",
                          "value": "={{ $('Config').item.json.currency }}"
                        },
                        {
                          "id": "887461ca-db0d-442e-8008-5fe6a6fbdd8f",
                          "name": "zoom_link",
                          "type": "string",
                          "value": "={{ $('Create Zoom meeting').item.json.join_url }}"
                        },
                        {
                          "id": "4b2bd5e2-3bd5-443a-94a3-9ababfd9d881",
                          "name": "zoom_id",
                          "type": "string",
                          "value": "={{ $('Create Zoom meeting').item.json.id }}"
                        },
                        {
                          "id": "a1cea8e2-9954-4143-b71f-5ea194a873dd",
                          "name": "zoom_password",
                          "type": "string",
                          "value": "={{ $('Create Zoom meeting').item.json.password }}"
                        },
                        {
                          "id": "faa52bc6-dfbe-49e2-bc95-dae198a61293",
                          "name": "payment_link",
                          "type": "string",
                          "value": "={{ $json.url }}"
                        },
                        {
                          "id": "d7f5f0f5-cc7b-436a-9ad1-0b8f410c62c6",
                          "name": "payment_id",
                          "type": "string",
                          "value": "={{ $json.id }}"
                        },
                        {
                          "id": "020b22d0-f525-4120-9f8b-2fa33e88c2e1",
                          "name": "event_sheet_id",
                          "type": "string",
                          "value": "={{ $json.metadata.event_sheet_id }}"
                        }
                      ]
                    }
                  },
                  "typeVersion": 3.3
                },
                {
                  "id": "def10b04-98c3-46cc-bdeb-9592c7466992",
                  "name": "Store event",
                  "type": "n8n-nodes-base.googleSheets",
                  "position": [
                    1040,
                    280
                  ],
                  "parameters": {
                    "columns": {
                      "value": {},
                      "schema": [],
                      "mappingMode": "autoMapInputData",
                      "matchingColumns": []
                    },
                    "options": {},
                    "operation": "append",
                    "sheetName": {
                      "__rl": true,
                      "mode": "id",
                      "value": "0"
                    },
                    "documentId": {
                      "__rl": true,
                      "mode": "url",
                      "value": "={{ $('Config').item.json.sheet_url }}"
                    }
                  },
                  "credentials": {
                    "googleSheetsOAuth2Api": {
                      "id": "RICzFHixgHXMuKmg",
                      "name": "Google Sheets account"
                    }
                  },
                  "typeVersion": 4.3,
                  "alwaysOutputData": true
                },
                {
                  "id": "594fc7a1-f299-49c4-a25b-07cf2ced16f7",
                  "name": "Creation Form",
                  "type": "n8n-nodes-base.formTrigger",
                  "position": [
                    -500,
                    480
                  ],
                  "webhookId": "1c6fe52c-48ab-4688-b5ae-7e24361aa603",
                  "parameters": {
                    "path": "1c6fe52c-48ab-4688-b5ae-7e24361aa602",
                    "options": {},
                    "formTitle": "Create a new meeting",
                    "formFields": {
                      "values": [
                        {
                          "fieldLabel": "title",
                          "requiredField": true
                        },
                        {
                          "fieldType": "number",
                          "fieldLabel": "price",
                          "requiredField": true
                        },
                        {
                          "fieldType": "date",
                          "fieldLabel": "date_start",
                          "requiredField": true
                        },
                        {
                          "fieldType": "number",
                          "fieldLabel": "hour"
                        },
                        {
                          "fieldType": "number",
                          "fieldLabel": "minute"
                        }
                      ]
                    },
                    "responseMode": "lastNode",
                    "formDescription": "This automates the creation of a Zoom Meeting and a Stripe Payment page, streamlining your event setup process."
                  },
                  "typeVersion": 2
                },
                {
                  "id": "18fec11b-da39-4fe2-afab-d1585e3d9a99",
                  "name": "On payment",
                  "type": "n8n-nodes-base.stripeTrigger",
                  "disabled": true,
                  "position": [
                    -500,
                    780
                  ],
                  "webhookId": "ee7d6932-0583-47a3-b442-8bc161eee5e9",
                  "parameters": {
                    "events": [
                      "checkout.session.completed"
                    ]
                  },
                  "credentials": {
                    "stripeApi": {
                      "id": "qjose8z3RR7Xzm7b",
                      "name": "Stripe Dev"
                    }
                  },
                  "typeVersion": 1
                },
                {
                  "id": "1d95a7a5-7ddc-4338-9784-1d0554f39808",
                  "name": "Sticky Note1",
                  "type": "n8n-nodes-base.stickyNote",
                  "position": [
                    -220,
                    118
                  ],
                  "parameters": {
                    "color": 6,
                    "width": 275.01592825011585,
                    "height": 468.76027109756643,
                    "content": "# Setup\n### 1/ Add Your credentials\n[Zoom](https://docs.n8n.io/integrations/builtin/credentials/zoom/)\n[Google](https://docs.n8n.io/integrations/builtin/credentials/google/)\n[Stripe](https://docs.n8n.io/integrations/builtin/credentials/stripe/)\n\nNote: For Google, you need to add Gmail and Google Sheet.\n\n### 2/ Create a [new Google Sheet](https://sheets.new/).\nKeep this sheet blank for now; it contains your meeting and participant information. Place it wherever it fits best in your organization.\n\n### 3/ And fill the config node\n# \ud83d\udc47"
                  },
                  "typeVersion": 1
                },
                {
                  "id": "58312523-1bee-4a56-9ab2-dc166fe30573",
                  "name": "Sticky Note2",
                  "type": "n8n-nodes-base.stickyNote",
                  "position": [
                    -920,
                    500
                  ],
                  "parameters": {
                    "color": 6,
                    "width": 372,
                    "height": 200.14793114506386,
                    "content": "# Create a meeting \ud83d\udc49\ud83c\udffb\n\nYour journey to easy event management starts here.\n\nClick this node, copy the production URL, and keep it handy. It's your personal admin tool for quickly creating new meetings. Simple and efficient!"
                  },
                  "typeVersion": 1
                },
                {
                  "id": "09153c6b-33cb-4fd1-8fa2-3513bca01f0c",
                  "name": "Sticky Note3",
                  "type": "n8n-nodes-base.stickyNote",
                  "position": [
                    620,
                    660
                  ],
                  "parameters": {
                    "color": 6,
                    "width": 519.9859025074911,
                    "height": 106.11515926602786,
                    "content": "# \ud83d\udd8b\ufe0f Customize\n### Feel free to adapt email contents to your needs."
                  },
                  "typeVersion": 1
                },
                {
                  "id": "da13aadc-eb3c-4d99-8e2b-3e56a40d09f3",
                  "name": "if is creation flow",
                  "type": "n8n-nodes-base.if",
                  "position": [
                    -20,
                    640
                  ],
                  "parameters": {
                    "options": {
                      "looseTypeValidation": true
                    },
                    "conditions": {
                      "options": {
                        "leftValue": "",
                        "caseSensitive": true,
                        "typeValidation": "loose"
                      },
                      "combinator": "and",
                      "conditions": [
                        {
                          "id": "40ddf809-1602-4120-ae7e-8be61437b50d",
                          "operator": {
                            "type": "boolean",
                            "operation": "true",
                            "singleValue": true
                          },
                          "leftValue": "={{ $(\"Creation Form\").isExecuted }}",
                          "rightValue": ""
                        }
                      ]
                    }
                  },
                  "typeVersion": 2
                },
                {
                  "id": "ca62dd52-cb79-45c1-a26a-91ba4c16b6ed",
                  "name": "Sticky Note",
                  "type": "n8n-nodes-base.stickyNote",
                  "position": [
                    180,
                    340
                  ],
                  "parameters": {
                    "color": 7,
                    "width": 202.64787116404852,
                    "height": 85.79488430601403,
                    "content": "### Crafted by the\n## [\ud83e\udd77 n8n.ninja](https://n8n.ninja)"
                  },
                  "typeVersion": 1
                },
                {
                  "id": "aebdc1b5-ccf7-4299-a8ec-10eb448c4d72",
                  "name": "the end",
                  "type": "n8n-nodes-base.noOp",
                  "position": [
                    1040,
                    800
                  ],
                  "parameters": {},
                  "typeVersion": 1
                }
              ],
              "active": true,
              "pinData": {
                "On payment": [
                  {
                    "json": {
                      "id": "evt_1Ou0e4BH8XCwzsfXEKVN0GkI",
                      "data": {
                        "object": {
                          "id": "cs_test_a1G73c0pSu8hnD8y4we2ZVGy3MdmDuam1jLT07DqcBgYkuH1vOpWSkclBr",
                          "url": null,
                          "mode": "payment",
                          "locale": "auto",
                          "object": "checkout.session",
                          "status": "complete",
                          "consent": null,
                          "created": 1710370285,
                          "invoice": null,
                          "ui_mode": "hosted",
                          "currency": "eur",
                          "customer": null,
                          "livemode": false,
                          "metadata": {
                            "zoom_id": "86579738722",
                            "zoom_link": "https://us06web.zoom.us/j/86579738722?pwd=i8QeOxKGO8GODInTP3gsYUjvrCYarA.1",
                            "zoom_password": "260j",
                            "event_sheet_id": "1710369993"
                          },
                          "shipping": null,
                          "cancel_url": "https://stripe.com",
                          "expires_at": 1710456685,
                          "custom_text": {
                            "submit": null,
                            "after_submit": null,
                            "shipping_address": null,
                            "terms_of_service_acceptance": null
                          },
                          "submit_type": "auto",
                          "success_url": "https://stripe.com",
                          "amount_total": 2000,
                          "payment_link": "plink_1Ou0ZCBH8XCwzsfXUongWL67",
                          "setup_intent": null,
                          "subscription": null,
                          "automatic_tax": {
                            "status": null,
                            "enabled": false,
                            "liability": null
                          },
                          "client_secret": null,
                          "custom_fields": [],
                          "shipping_rate": null,
                          "total_details": {
                            "amount_tax": 0,
                            "amount_discount": 0,
                            "amount_shipping": 0
                          },
                          "customer_email": null,
                          "payment_intent": "pi_3Ou0e2BH8XCwzsfX14Vi1Pak",
                          "payment_status": "paid",
                          "recovered_from": null,
                          "amount_subtotal": 2000,
                          "after_expiration": null,
                          "customer_details": {
                            "name": "Emmanuel Bern",
                            "email": "emm.bernard@gmail.com",
                            "phone": null,
                            "address": {
                              "city": "Lausanne",
                              "line1": "Avenue Charles Dickens 10",
                              "line2": null,
                              "state": null,
                              "country": "CH",
                              "postal_code": "1006"
                            },
                            "tax_ids": [],
                            "tax_exempt": "none"
                          },
                          "invoice_creation": {
                            "enabled": false,
                            "invoice_data": {
                              "footer": null,
                              "issuer": null,
                              "metadata": {},
                              "description": null,
                              "custom_fields": null,
                              "account_tax_ids": null,
                              "rendering_options": null
                            }
                          },
                          "shipping_options": [],
                          "customer_creation": "if_required",
                          "consent_collection": null,
                          "client_reference_id": null,
                          "currency_conversion": null,
                          "payment_method_types": [
                            "card",
                            "bancontact",
                            "eps",
                            "giropay",
                            "ideal",
                            "link",
                            "klarna"
                          ],
                          "allow_promotion_codes": false,
                          "payment_method_options": {
                            "card": {
                              "request_three_d_secure": "automatic"
                            }
                          },
                          "phone_number_collection": {
                            "enabled": false
                          },
                          "payment_method_collection": "always",
                          "billing_address_collection": "auto",
                          "shipping_address_collection": null,
                          "payment_method_configuration_details": {
                            "id": "pmc_1Om7TPBH8XCwzsfXBB30jrJh",
                            "parent": null
                          }
                        }
                      },
                      "type": "checkout.session.completed",
                      "object": "event",
                      "created": 1710370296,
                      "request": {
                        "id": null,
                        "idempotency_key": null
                      },
                      "livemode": false,
                      "api_version": "2020-08-27",
                      "pending_webhooks": 4
                    }
                  }
                ]
              },
              "settings": {
                "executionOrder": "v1"
              },
              "versionId": "9e350a8f-30e0-43ab-8dab-a7edbfd637d8",
              "connections": {
                "Config": {
                  "main": [
                    [
                      {
                        "node": "if is creation flow",
                        "type": "main",
                        "index": 0
                      }
                    ]
                  ]
                },
                "On payment": {
                  "main": [
                    [
                      {
                        "node": "Config",
                        "type": "main",
                        "index": 0
                      }
                    ]
                  ]
                },
                "Format event": {
                  "main": [
                    [
                      {
                        "node": "Store event",
                        "type": "main",
                        "index": 0
                      }
                    ]
                  ]
                },
                "Creation Form": {
                  "main": [
                    [
                      {
                        "node": "Config",
                        "type": "main",
                        "index": 0
                      }
                    ]
                  ]
                },
                "Notify teacher": {
                  "main": [
                    [
                      {
                        "node": "the end",
                        "type": "main",
                        "index": 0
                      }
                    ]
                  ]
                },
                "Format participant": {
                  "main": [
                    [
                      {
                        "node": "Add participant to list",
                        "type": "main",
                        "index": 0
                      }
                    ]
                  ]
                },
                "Create Zoom meeting": {
                  "main": [
                    [
                      {
                        "node": "Create Stripe Product",
                        "type": "main",
                        "index": 0
                      }
                    ]
                  ]
                },
                "Create payment link": {
                  "main": [
                    [
                      {
                        "node": "Create participant list",
                        "type": "main",
                        "index": 0
                      },
                      {
                        "node": "Format event",
                        "type": "main",
                        "index": 0
                      }
                    ]
                  ]
                },
                "if is creation flow": {
                  "main": [
                    [
                      {
                        "node": "Create Zoom meeting",
                        "type": "main",
                        "index": 0
                      }
                    ],
                    [
                      {
                        "node": "Format participant",
                        "type": "main",
                        "index": 0
                      }
                    ]
                  ]
                },
                "Create Stripe Product": {
                  "main": [
                    [
                      {
                        "node": "Create payment link",
                        "type": "main",
                        "index": 0
                      }
                    ]
                  ]
                },
                "Add participant to list": {
                  "main": [
                    [
                      {
                        "node": "Send confirmation to participant",
                        "type": "main",
                        "index": 0
                      }
                    ]
                  ]
                },
                "Create participant list": {
                  "main": [
                    [
                      {
                        "node": "Send email to teacher",
                        "type": "main",
                        "index": 0
                      }
                    ]
                  ]
                },
                "Send confirmation to participant": {
                  "main": [
                    [
                      {
                        "node": "Notify teacher",
                        "type": "main",
                        "index": 0
                      }
                    ]
                  ]
                }
              }
            }
          },
          "node_count": 20,
          "connection_count": 13,
          "extraction_time": 0.472052,
          "error": null
        },
        "layer3": {
          "success": true,
          "data": {
            "introduction": "\ud83c\udf89 Do you want to master AI automation, so you can save time and build cool stuff?I\u2019ve created a welcoming Skool community for non-technical yet resourceful learners.\ud83d\udc49\ud83c\udffbJoin the AI Atelier\ud83d\udc48\ud83c\udffbUnlockstreamlined Zoom Meeting organizationand exclusive access management with this n8n workflow. Designed for educators, event organizers, and businesses, this tool automates your event logistics, so you can focus on delivering valuable content.FeaturesZoom Meetings Creation:Instantly generate new Zoom meetings with the n8n built-in form.Collect Payments Using Stripe:Effortlessly monetize your events with secure, automatically created Stripe payment pages for each meeting.Exclusive Gated Access:Ensure your content remains exclusive by sending Zoom meeting passwords only to verified subscribers who have completed their payment through Stripe.Participants Email Notifications:Automate the distribution of Zoom meeting details post-payment, eliminating the need for manual email management and ensuring participants are promptly informed.Instant and Easy Participants Overview:Manage and track your event registrations with ease. All related data is stored in a Google Sheets document that you own. You're notified via email with each new subscription, simplifying participant management.Set Up StepsConnect your Zoom, Stripe, Gmail and Google Sheet credentials.Create an empty Google Sheet in your Google Drive.Fill the config node (Sheet URL, email and currency).Edit email text.This n8n workflow template is designed to minimize setup time and maximize efficiency, allowing you to focus on delivering value to your subscribers. With just a few clicks, you can automate the entire process of organizing and monetizing your Zoom meetings.Created by then8ninja.",
            "overview": "",
            "tutorial_text": "\ud83c\udf89 Do you want to master AI automation, so you can save time and build cool stuff?I\u2019ve created a welcoming Skool community for non-technical yet resourceful learners.\ud83d\udc49\ud83c\udffbJoin the AI Atelier\ud83d\udc48\ud83c\udffbUnlockstreamlined Zoom Meeting organizationand exclusive access management with this n8n workflow. Designed for educators, event organizers, and businesses, this tool automates your event logistics, so you can focus on delivering valuable content.FeaturesZoom Meetings Creation:Instantly generate new Zoom meetings with the n8n built-in form.Collect Payments Using Stripe:Effortlessly monetize your events with secure, automatically created Stripe payment pages for each meeting.Exclusive Gated Access:Ensure your content remains exclusive by sending Zoom meeting passwords only to verified subscribers who have completed their payment through Stripe.Participants Email Notifications:Automate the distribution of Zoom meeting details post-payment, eliminating the need for manual email management and ensuring participants are promptly informed.Instant and Easy Participants Overview:Manage and track your event registrations with ease. All related data is stored in a Google Sheets document that you own. You're notified via email with each new subscription, simplifying participant management.Set Up StepsConnect your Zoom, Stripe, Gmail and Google Sheet credentials.Create an empty Google Sheet in your Google Drive.Fill the config node (Sheet URL, email and currency).Edit email text.This n8n workflow template is designed to minimize setup time and maximize efficiency, allowing you to focus on delivering value to your subscribers. With just a few clicks, you can automate the entire process of organizing and monetizing your Zoom meetings.Created by then8ninja.",
            "tutorial_sections": [],
            "step_by_step": [],
            "best_practices": [],
            "common_pitfalls": [],
            "image_urls": [
              "https://n8n.io/nodes/google-sheets.svg",
              "https://n8n.io/nodes/http-request.svg",
              "https://gravatar.com/avatar/6c38a38d8002fa989515b5c11340ca14512f929dfd15a5a57422950f58441b12?r=pg&d=retro&size=200",
              "https://n8n.io/nodes/webhook.svg",
              "https://n8n.io/nodes/customer-datastore-n8n-training.svg",
              "https://gravatar.com/avatar/8ed14c592510a0627ebe55fdad3a42a3917a77a9e081b93209ce05ecf3c2ba8f?r=pg&d=retro&size=200",
              "https://gravatar.com/avatar/74234187cf4a650d53f6a86e7b03d1bcb8cfef4cbd0552eabd8d966cd808cc54?r=pg&d=retro&size=200",
              "https://n8n.io/nodes/code.svg",
              "https://n8n.io/images/stars-footer.svg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/avatar_igordisco_9243b86232_cd9a5c94ce.jpg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/neutral_avatar_purple_fee36bffe3.PNG",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/avatar_anderoav_589989fc39_ceb1c71a0c.jpg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/avatar_maxim_poulsen_48f450887b_852d0439bc.jpeg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/Felix_Leber_f7a5b3c776_130aeca79d.jpeg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/avatar_Ironben_0a4b3e7d12_e35805265c.jpg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/Francois_lassl_d5cfb504c7_710c87121d.jpeg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/twitter_x_62a44e965e.svg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/github_e1f217d7a3_b9a271324f.svg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/discord_253947c90b_191e8f60fa.svg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/linkedin_d710e84d63_6ed0dc28aa.svg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/youtube_de4bdef50a_4b3a8b8aac.svg"
            ],
            "video_urls": [],
            "code_snippets": [],
            "conclusion": "",
            "troubleshooting": {
              "common_issues": [],
              "error_messages": []
            },
            "related_workflows": []
          },
          "errors": [],
          "extraction_time": 5.604083,
          "metadata": {
            "workflow_id": "2192",
            "url": "https://n8n.io/workflows/2192",
            "extracted_at": "2025-10-11T08:50:56.628324",
            "extractor_version": "1.0.0"
          }
        }
      },
      "multimodal": null,
      "transcripts": null,
      "validation": {
        "layer1": {
          "score": 80,
          "issues": [
            "Difficulty level not set",
            "No engagement metrics available"
          ],
          "valid": true,
          "layer": "layer1"
        },
        "layer2": {
          "score": 100,
          "issues": [],
          "valid": true,
          "layer": "layer2"
        },
        "layer3": {
          "score": 35,
          "issues": [
            "No tutorial sections extracted",
            "No images extracted",
            "Missing required fields: title, description, steps",
            "No step-by-step content extracted"
          ],
          "valid": false,
          "layer": "layer3"
        }
      },
      "quality": {
        "overall_score": 70.0,
        "classification": "Fair",
        "layer1_score": 80,
        "layer2_score": 100,
        "layer3_score": 35,
        "consistency_score": 100.0,
        "total_issues": 6
      },
      "extraction_time": 18.434080123901367,
      "errors": [],
      "timestamp": "2025-10-11T08:50:43.835457"
    },
    {
      "success": true,
      "workflow_id": "1843",
      "url": "https://n8n.io/workflows/1843",
      "layers": {
        "layer1": {
          "success": true,
          "workflow_id": "1843",
          "data": {
            "title": "Unknown Title",
            "description": "",
            "author": "Unknown Author",
            "use_case": "General workflow automation",
            "primary_category": "Strictly necessary",
            "secondary_categories": [
              "Performance",
              "Targeting",
              "Functionality",
              "Strictly necessary cookies allow core website functionality such as user login and account management. The website cannot be used properly without strictly necessary cookies.",
              "Performance cookies are used to see how visitors use the website, eg. analytics cookies. Those cookies cannot be used to directly identify a certain visitor.",
              "Targeting cookies are used to identify visitors between different websites, eg. content partners, banner networks. Those cookies may be used by companies to build a profile of visitor interests or show relevant ads on other websites.",
              "Functionality cookies are used to remember visitor information on the website, eg. language, timezone, enhanced content."
            ],
            "node_tags": [],
            "general_tags": [
              "Targeting",
              "Performance",
              "Strictly necessary",
              "Functionality"
            ],
            "difficulty_level": "intermediate",
            "views": 0,
            "upvotes": 0,
            "created_date": "2025-10-11T08:50:49.305003",
            "updated_date": "2025-10-11T08:50:49.305003",
            "setup_instructions": "",
            "prerequisites": [
              "token_v2",
              "or website it relates to",
              "{\n\t\tcontent: attr(label);\n\t\tfont-weight: bold;\n\t\twidth: 120px;\n\t\tmin-width: 120px;\n\t}",
              "visiting the said website",
              "__Secure-ROLLOUT_TOKEN"
            ],
            "estimated_setup_time": "4 minutes 59 sec",
            "industry": [
              "Strictly necessary"
            ]
          },
          "extraction_time": 5.054869174957275,
          "error": null
        },
        "layer2": {
          "success": false,
          "workflow_id": "1843",
          "data": null,
          "node_count": 0,
          "connection_count": 0,
          "extraction_time": 0.454454,
          "error": "Workflow not found (404)"
        },
        "layer3": {
          "success": true,
          "data": {
            "introduction": "",
            "overview": "",
            "tutorial_text": "",
            "tutorial_sections": [],
            "step_by_step": [],
            "best_practices": [],
            "common_pitfalls": [],
            "image_urls": [],
            "video_urls": [],
            "code_snippets": [],
            "conclusion": "",
            "troubleshooting": {
              "common_issues": [],
              "error_messages": []
            },
            "related_workflows": []
          },
          "errors": [],
          "extraction_time": 5.665177,
          "metadata": {
            "workflow_id": "1843",
            "url": "https://n8n.io/workflows/1843",
            "extracted_at": "2025-10-11T08:50:50.731698",
            "extractor_version": "1.0.0"
          }
        }
      },
      "multimodal": null,
      "transcripts": null,
      "validation": {
        "layer1": {
          "score": 55,
          "issues": [
            "Description missing or too short (minimum 20 characters)",
            "Difficulty level not set",
            "Author not identified",
            "No engagement metrics available"
          ],
          "valid": false,
          "layer": "layer1"
        },
        "layer2": null,
        "layer3": {
          "score": 5,
          "issues": [
            "Tutorial text missing",
            "No tutorial sections extracted",
            "No images extracted",
            "Missing required fields: title, description, steps",
            "No step-by-step content extracted"
          ],
          "valid": false,
          "layer": "layer3"
        }
      },
      "quality": {
        "overall_score": 20.0,
        "classification": "Poor",
        "layer1_score": 55,
        "layer2_score": null,
        "layer3_score": 5,
        "consistency_score": 70.0,
        "total_issues": 9
      },
      "extraction_time": 11.805251121520996,
      "errors": [
        "Layer 2 extraction failed: Workflow not found (404)"
      ],
      "timestamp": "2025-10-11T08:50:44.626719"
    },
    {
      "success": true,
      "workflow_id": "2084",
      "url": "https://n8n.io/workflows/2084",
      "layers": {
        "layer1": {
          "success": true,
          "workflow_id": "2084",
          "data": {
            "title": "Creators Hub: Generate Dynamic SVG Stats with daily updates",
            "description": "Previewn8n Creators Template: Creator Profile Stats Updater This n8n workflow template is designed to automate the process of updating a creator's profile...",
            "author": "Igor Fediczko@igordisco",
            "use_case": "Previewn8n Creators Template: Creator Profile Stats Updater This n8n workflow template is designed to automate the process of updating a creator's profile.",
            "primary_category": "Strictly necessary",
            "secondary_categories": [
              "Performance",
              "Targeting",
              "Functionality",
              "Strictly necessary cookies allow core website functionality such as user login and account management. The website cannot be used properly without strictly necessary cookies.",
              "Performance cookies are used to see how visitors use the website, eg. analytics cookies. Those cookies cannot be used to directly identify a certain visitor.",
              "Targeting cookies are used to identify visitors between different websites, eg. content partners, banner networks. Those cookies may be used by companies to build a profile of visitor interests or show relevant ads on other websites.",
              "Functionality cookies are used to remember visitor information on the website, eg. language, timezone, enhanced content."
            ],
            "node_tags": [
              "github147,222",
              "hiring"
            ],
            "general_tags": [
              "Targeting",
              "Performance",
              "Strictly necessary",
              "Functionality"
            ],
            "difficulty_level": "intermediate",
            "views": 0,
            "upvotes": 0,
            "created_date": "2025-10-11T08:50:58.525143",
            "updated_date": "2025-10-11T08:50:58.525143",
            "setup_instructions": "Previewn8n Creators Template: Creator Profile Stats Updater This n8n workflow template is designed to automate the process of updating a creator's profile...",
            "prerequisites": [
              "token_v2",
              "or website it relates to",
              "{\n\t\tcontent: attr(label);\n\t\tfont-weight: bold;\n\t\twidth: 120px;\n\t\tmin-width: 120px;\n\t}",
              "visiting the said website",
              "__Secure-ROLLOUT_TOKEN"
            ],
            "estimated_setup_time": "4 minutes 59 sec",
            "industry": [
              "Strictly necessary"
            ]
          },
          "extraction_time": 8.267299175262451,
          "error": null
        },
        "layer2": {
          "success": true,
          "workflow_id": "2084",
          "data": {
            "id": 2084,
            "name": "Creators Hub: Generate Dynamic SVG Stats with daily updates",
            "workflow": {
              "id": "AIAXex9JGJnUQ8iO",
              "meta": {
                "instanceId": "c59a6b1daf09a846754bc2cf0a94db3299bd5a69fb14687c3a5e692704c548dd"
              },
              "name": "Creators Hub: N8N Creator Profile Stats",
              "tags": [
                {
                  "id": "L9i7D3rLv2ZaILWf",
                  "name": "Nskha",
                  "createdAt": "2024-02-06T21:54:49.000Z",
                  "updatedAt": "2024-02-06T21:54:49.000Z"
                }
              ],
              "nodes": [
                {
                  "id": "239a5088-b1ac-4485-9e8e-e84fe944d52c",
                  "name": "Sticky Note",
                  "type": "n8n-nodes-base.stickyNote",
                  "position": [
                    120,
                    100
                  ],
                  "parameters": {
                    "color": 7,
                    "width": 1206.7861614497526,
                    "height": 613.9713344316314,
                    "content": "[![N8N Creator Profile](https://raw.githubusercontent.com/Automations-Project/n8n-templates/main/n8n-team.svg)](https://n8n.io/creators/n8n-team)\n[![N8N Creator Profile](https://cdn.statically.io/gh/Automations-Project/n8n-templates/main/n8n-team.svg)](https://n8n.io/creators/n8n-team)\n## To-Do:\n- Set up GitHub Authentication.\n- Edit the `Config` Node based on your requirements (colors in HEX and include the `#`).\n- Finally, the result will provide two URLs:\n  - The first one is served via a CDN (statically) with cache enabled (Fast loading, slower update).\n  - The second one is served directly from GitHub without cache or CDN (Quick Updates, Slower load)."
                  },
                  "typeVersion": 1
                },
                {
                  "id": "2c2b9288-c324-4aa4-bfe1-c87ffaa7dc9f",
                  "name": "Workflows Data",
                  "type": "n8n-nodes-base.set",
                  "position": [
                    1180,
                    160
                  ],
                  "parameters": {
                    "fields": {
                      "values": [
                        {
                          "name": "Total Workflows:",
                          "stringValue": "={{ $json.meta.pagination.total }}"
                        },
                        {
                          "name": "Complex Workflows:",
                          "stringValue": "={{ $json['data'].reduce((acc, item) => acc + ((item.attributes.workflowInfo && item.attributes.workflowInfo.nodeCount >= 15) ? 1 : 0), 0) }}"
                        },
                        {
                          "name": "Approved Workflows:",
                          "stringValue": "={{ $json['data'].reduce((acc, item) => acc + (item.attributes.status === 'published' ? 1 : 0), 0) }}"
                        },
                        {
                          "name": "Pending Workflows:",
                          "stringValue": "={{ $json['data'].reduce((acc, item) => acc + (item.attributes.status === 'in_review' ? 1 : 0), 0) }}"
                        },
                        {
                          "name": "Total Nodes:",
                          "stringValue": "={{ $json['data'].reduce((acc, item) => item.attributes.workflowInfo && item.attributes.workflowInfo.nodeCount ? acc + item.attributes.workflowInfo.nodeCount : acc, 0) }}"
                        },
                        {
                          "name": "Total Views:",
                          "stringValue": "={{ $json['data'].reduce((acc, item) => acc + item.attributes.views, 0) + $json['data'].reduce((acc, item) => acc + item.attributes.recentViews, 0) }}"
                        }
                      ]
                    },
                    "include": "none",
                    "options": {}
                  },
                  "typeVersion": 3.2
                },
                {
                  "id": "d3f9b6cf-52a4-4e22-9816-1824085c747a",
                  "name": "Get Workflows",
                  "type": "n8n-nodes-base.httpRequest",
                  "position": [
                    1020,
                    160
                  ],
                  "parameters": {
                    "url": "=https://stats.nskha.com/{{ $item(\"0\").$node[\"Config\"].json[\"creator username\"] }}",
                    "options": {
                      "allowUnauthorizedCerts": true
                    },
                    "sendHeaders": true,
                    "headerParameters": {
                      "parameters": [
                        {
                          "name": "User-Agent",
                          "value": "+https://openai.com/bot"
                        }
                      ]
                    }
                  },
                  "typeVersion": 4.1
                },
                {
                  "id": "81698738-1c58-42e1-b866-7505e1bf5f71",
                  "name": "Get User",
                  "type": "n8n-nodes-base.httpRequest",
                  "position": [
                    700,
                    340
                  ],
                  "parameters": {
                    "url": "=https://n8n-s4.nskha.com/creators/{{ $item(\"0\").$node[\"Config\"].json[\"creator username\"] }}",
                    "options": {},
                    "sendHeaders": true,
                    "headerParameters": {
                      "parameters": [
                        {
                          "name": "user-agent",
                          "value": "+https://openai.com/bot"
                        }
                      ]
                    }
                  },
                  "typeVersion": 4.1
                },
                {
                  "id": "54271ee5-c6d9-4fa9-80df-ccddc904c116",
                  "name": "Extract From File",
                  "type": "n8n-nodes-base.extractFromFile",
                  "position": [
                    1020,
                    340
                  ],
                  "parameters": {
                    "options": {},
                    "operation": "binaryToPropery",
                    "destinationKey": "imgdata"
                  },
                  "typeVersion": 1
                },
                {
                  "id": "cd0c6e6a-f9dd-4d07-9212-86171a8d63d0",
                  "name": "Download Image",
                  "type": "n8n-nodes-base.httpRequest",
                  "position": [
                    860,
                    340
                  ],
                  "parameters": {
                    "url": "={{ $json.data.avatar.replace('size=200','size=100') }}",
                    "options": {}
                  },
                  "typeVersion": 4.1
                },
                {
                  "id": "53653d46-bd80-49e4-9865-36ffc7fc94aa",
                  "name": "Schedule Trigger",
                  "type": "n8n-nodes-base.scheduleTrigger",
                  "position": [
                    700,
                    160
                  ],
                  "parameters": {
                    "rule": {
                      "interval": [
                        {}
                      ]
                    }
                  },
                  "typeVersion": 1.1
                },
                {
                  "id": "f99d039e-74ec-4922-8b0e-b4263e28e40b",
                  "name": "Aggregate",
                  "type": "n8n-nodes-base.aggregate",
                  "position": [
                    1020,
                    500
                  ],
                  "parameters": {
                    "options": {},
                    "aggregate": "aggregateAllItemData"
                  },
                  "typeVersion": 1
                },
                {
                  "id": "2f1ddd8f-7e2d-4395-a3f3-eb920acd172f",
                  "name": "SVG",
                  "type": "n8n-nodes-base.set",
                  "position": [
                    1180,
                    340
                  ],
                  "parameters": {
                    "fields": {
                      "values": [
                        {
                          "stringValue": "=<svg width=\"495\" height=\"195\" viewBox=\"0 0 495 195\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<style>\n          <![CDATA[\n@font-face { \n  font-family: \"Virgil 3 YOFF\";\n  src: url(data:application/octet-stream;base64,);\n}\n      ]]>\n    .leftdiv{ animation: fadeH 0.7s ease-in-out forwards;}\n    .text{ font-family: 'Virgil 3 YOFF', Tahoma, Geneva, Verdana, sans-serif; fill: {{ $item(\"0\").$node[\"Config\"].json[\"Text Color (#Hex)\"] }}; font-size: 14px;}\n    .singleitem{ opacity: 0; animation: fade 0.3s ease-in-out forwards;}\n    .followers{ font-family: 'Virgil 3 YOFF', Tahoma, Geneva, Verdana, sans-serif; fill: {{ $item(\"0\").$node[\"Config\"].json[\"Text Color (#Hex)\"] }}; font-size: 12px;}\n    .namepl{ font-family: 'Virgil 3 YOFF', Helvetica, sans-serif; fill: {{ $item(\"0\").$node[\"Config\"].json[\"Text Color (#Hex)\"] }}; font-size: 17px; font-weight: 600; alignment-baseline: middle; text-anchor: middle;}\n    .icon{ fill: {{ $item(\"0\").$node[\"Config\"].json[\"Icons Color (#Hex)\"] }}; display: block;}\n    @keyframes fade{ from{ opacity: .5;} to{ opacity: 1;}}\n    @keyframes fadeH{ from{ opacity: 0; transform: translate(-90px, 10px);} to{ opacity: 1; transform: translate(10px, 10px);}}\n</style>\n<rect x=\"0.5\" y=\"0.5\" rx=\"4.5\" height=\"99%\" width=\"494\" fill=\"{{ $item(\"0\").$node[\"Config\"].json[\"Card Color (#Hex)\"] }}\" stroke=\"{{ $item(\"0\").$node[\"Config\"].json[\"Border Color (#Hex)\"] }}\" stroke-opacity=\"1\" />\n<g transform=\"translate(0, 25)\">\n    <g class=\"leftdiv\">\n        <defs>\n            <pattern id=\"image\" x=\"0%\" y=\"0%\" height=\"100%\" width=\"100%\" viewBox=\"0 0 512 512\">\n                <image x=\"0%\" y=\"0%\" width=\"512\" height=\"512\" xlink:href=\"data:image/png;base64,{{ $item(\"0\").$node[\"Extract From File\"].json[\"imgdata\"] }}\"></image>\n            </pattern>\n        </defs>\n        <circle cx=\"86\" cy=\"44\" r=\"40\" stroke=\"{{ $item(\"0\").$node[\"Config\"].json[\"Card Color (#Hex)\"] }}\" stroke-width=\"3\" fill=\"url(#image)\" />\n        <text x=\"86\" y=\"100\" class=\"namepl\">{{ $item(\"0\").$node[\"Get User\"].json[\"data\"][\"name\"] }}</text>\n        <svg x=\"25\" y=\"111.8\" class=\"icon\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"14\" height=\"14\">\n            <path fill-rule=\"evenodd\" d=\"M5.5 3.5a2 2 0 100 4 2 2 0 000-4zM2 5.5a3.5 3.5 0 115.898 2.549 5.507 5.507 0 013.034 4.084.75.75 0 11-1.482.235 4.001 4.001 0 00-7.9 0 .75.75 0 01-1.482-.236A5.507 5.507 0 013.102 8.05 3.49 3.49 0 012 5.5zM11 4a.75.75 0 100 1.5 1.5 1.5 0 01.666 2.844.75.75 0 00-.416.672v.352a.75.75 0 00.574.73c1.2.289 2.162 1.2 2.522 2.372a.75.75 0 101.434-.44 5.01 5.01 0 00-2.56-3.012A3 3 0 0011 4z\" />\n        </svg>\n        <text x=\"45\" y=\"123\" class=\"followers\">Total Views:</text>\n        <text x=\"120\" y=\"124\" style=\"font-weight: 700\" class=\"followers\">{{ $item(\"0\").$node[\"Workflows Data\"].json[\"Total Views:\"] }}\n</text>\n    </g>\n    <svg>\n        <g transform=\"translate(179, 0)\">\n            <g class=\"singleitem\" style=\"animation-delay: 210ms\" transform=\"translate(25, 0)\">\n                <svg class=\"icon\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\">\n                    <path fill-rule=\"evenodd\" d=\"M0 1.75A.75.75 0 01.75 1h4.253c1.227 0 2.317.59 3 1.501A3.744 3.744 0 0111.006 1h4.245a.75.75 0 01.75.75v10.5a.75.75 0 01-.75.75h-4.507a2.25 2.25 0 00-1.591.659l-.622.621a.75.75 0 01-1.06 0l-.622-.621A2.25 2.25 0 005.258 13H.75a.75.75 0 01-.75-.75V1.75zm8.755 3a2.25 2.25 0 012.25-2.25H14.5v9h-3.757c-.71 0-1.4.201-1.992.572l.004-7.322zm-1.504 7.324l.004-5.073-.002-2.253A2.25 2.25 0 005.003 2.5H1.5v9h3.757a3.75 3.75 0 011.994.574z\" />\n                </svg>\n                <text class=\"text\" x=\"25\" y=\"12.5\">Total Workflows:</text>\n                <text class=\"text\" style=\"font-weight: 700\" x=\"185\" y=\"12.5\">{{$item(\"0\").$node[\"Workflows Data\"].json[\"Total Workflows:\"]}}\n</text>\n            </g>\n        </g>\n        <g transform=\"translate(179, 25)\">\n            <g class=\"singleitem\" style=\"animation-delay: 350ms\" transform=\"translate(25, 0)\">\n                <svg class=\"icon\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\">\n                    <path fill-rule=\"evenodd\" d=\"M8 .25a.75.75 0 01.673.418l1.882 3.815 4.21.612a.75.75 0 01.416 1.279l-3.046 2.97.719 4.192a.75.75 0 01-1.088.791L8 12.347l-3.766 1.98a.75.75 0 01-1.088-.79l.72-4.194L.818 6.374a.75.75 0 01.416-1.28l4.21-.611L7.327.668A.75.75 0 018 .25zm0 2.445L6.615 5.5a.75.75 0 01-.564.41l-3.097.45 2.24 2.184a.75.75 0 01.216.664l-.528 3.084 2.769-1.456a.75.75 0 01.698 0l2.77 1.456-.53-3.084a.75.75 0 01.216-.664l2.24-2.183-3.096-.45a.75.75 0 01-.564-.41L8 2.694v.001z\" />\n                </svg>\n                <text class=\"text\" x=\"25\" y=\"12.5\">Complex Workflows:</text>\n                <text class=\"text\" style=\"font-weight: 700\" x=\"185\" y=\"12.5\">{{ $item(\"0\").$node[\"Workflows Data\"].json[\"Complex Workflows:\"] }}</text>\n            </g>\n        </g>\n        <g transform=\"translate(179, 50)\">\n            <g class=\"singleitem\" style=\"animation-delay: 460ms\" transform=\"translate(25, 0)\">\n                <svg class=\"icon\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\">\n                    <path fill-rule=\"evenodd\" d=\"M5 3.25a.75.75 0 11-1.5 0 .75.75 0 011.5 0zm0 2.122a2.25 2.25 0 10-1.5 0v.878A2.25 2.25 0 005.75 8.5h1.5v2.128a2.251 2.251 0 101.5 0V8.5h1.5a2.25 2.25 0 002.25-2.25v-.878a2.25 2.25 0 10-1.5 0v.878a.75.75 0 01-.75.75h-4.5A.75.75 0 015 6.25v-.878zm3.75 7.378a.75.75 0 11-1.5 0 .75.75 0 011.5 0zm3-8.75a.75.75 0 100-1.5.75.75 0 000 1.5z\" />\n                </svg>\n                <text class=\"text\" x=\"25\" y=\"12.5\">Approved Workflows:</text>\n                <text class=\"text\" style=\"font-weight: 700\" x=\"185\" y=\"12.5\">{{ $item(\"0\").$node[\"Workflows Data\"].json[\"Approved Workflows:\"] }}</text>\n            </g>\n        </g>\n        <g transform=\"translate(179, 75)\">\n            <g class=\"singleitem\" style=\"animation-delay: 560ms\" transform=\"translate(25, 0)\">\n                <svg class=\"icon\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\">\n                    <path fill-rule=\"evenodd\" d=\"M1.643 3.143L.427 1.927A.25.25 0 000 2.104V5.75c0 .138.112.25.25.25h3.646a.25.25 0 00.177-.427L2.715 4.215a6.5 6.5 0 11-1.18 4.458.75.75 0 10-1.493.154 8.001 8.001 0 101.6-5.684zM7.75 4a.75.75 0 01.75.75v2.992l2.028.812a.75.75 0 01-.557 1.392l-2.5-1A.75.75 0 017 8.25v-3.5A.75.75 0 017.75 4z\" />\n                </svg>\n                <text class=\"text\" x=\"25\" y=\"12.5\">Pending Workflows:</text>\n                <text class=\"text\" style=\"font-weight: 700\" x=\"185\" y=\"12.5\">{{ $item(\"0\").$node[\"Workflows Data\"].json[\"Pending Workflows:\"] }}</text>\n            </g>\n        </g>\n        <g transform=\"translate(179, 100)\">\n            <g class=\"singleitem\" style=\"animation-delay: 660ms\" transform=\"translate(25, 0)\">\n                <svg class=\"icon\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\">\n                    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm9 3a1 1 0 11-2 0 1 1 0 012 0zm-.25-6.25a.75.75 0 00-1.5 0v3.5a.75.75 0 001.5 0v-3.5z\" />\n                </svg>\n                <text class=\"text\" x=\"25\" y=\"12.5\">Total Used Nodes:</text>\n                <text class=\"text\" style=\"font-weight: 700\" x=\"185\" y=\"12.5\">{{ $item(\"0\").$node[\"Workflows Data\"].json[\"Total Nodes:\"] }}</text>\n            </g>\n        </g>\n        <g transform=\"translate(179, 125)\">\n            <g class=\"singleitem\" style=\"animation-delay: 760ms\" transform=\"translate(25, 0)\">\n                <svg class=\"icon\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\">\n                    <path fill-rule=\"evenodd\" d=\"M13.78 4.22a.75.75 0 010 1.06l-7.25 7.25a.75.75 0 01-1.06 0L2.22 9.28a.75.75 0 011.06-1.06L6 10.94l6.72-6.72a.75.75 0 011.06 0z\" />\n                </svg>\n                <text class=\"text\" x=\"25\" y=\"12.5\">Community Username:</text>\n                <text class=\"text\" style=\"font-weight: 700\" x=\"185\" y=\"12.5\">{{ $('Config').item.json[\"creator username\"] }}</text>\n            </g>\n        </g>\n    </svg>\n</g>\n</svg>\n"
                        }
                      ]
                    },
                    "include": "none",
                    "options": {}
                  },
                  "typeVersion": 3.2
                },
                {
                  "id": "ebc8defd-d24e-4653-bfc7-2bf84f913dba",
                  "name": "Final",
                  "type": "n8n-nodes-base.set",
                  "position": [
                    1180,
                    500
                  ],
                  "parameters": {
                    "fields": {
                      "values": [
                        {
                          "name": "svg served via CDN (Cache Enabled)",
                          "stringValue": "={{ $item(\"0\").$node[\"Aggregate\"].json[\"data\"][\"0\"][\"content\"][\"download_url\"].replace('raw.githubusercontent.com/','cdn.statically.io/gh/') }}"
                        },
                        {
                          "name": "svg original",
                          "stringValue": "={{ $json.data[0].content.download_url }}"
                        }
                      ]
                    },
                    "include": "none",
                    "options": {}
                  },
                  "typeVersion": 3.2
                },
                {
                  "id": "167e26ef-027d-4342-9147-7494ac3b3850",
                  "name": "Config",
                  "type": "n8n-nodes-base.set",
                  "position": [
                    860,
                    160
                  ],
                  "parameters": {
                    "fields": {
                      "values": [
                        {
                          "name": "creator username",
                          "stringValue": "n8n-team"
                        },
                        {
                          "name": "Text Color (#Hex)",
                          "stringValue": "#71747a"
                        },
                        {
                          "name": "Icons Color (#Hex)",
                          "stringValue": "#ea4b71"
                        },
                        {
                          "name": "Border Color (#Hex)",
                          "stringValue": "#F7ABB1"
                        },
                        {
                          "name": "Card Color (#Hex)",
                          "stringValue": "#fbfcfe"
                        },
                        {
                          "name": "github username",
                          "stringValue": "Automations-Project"
                        },
                        {
                          "name": "github repository",
                          "stringValue": "n8n-templates"
                        }
                      ]
                    },
                    "options": {}
                  },
                  "typeVersion": 3.2
                },
                {
                  "id": "b2d08768-6034-41fe-8c7a-e03e848e8077",
                  "name": "GitHub",
                  "type": "n8n-nodes-base.github",
                  "position": [
                    860,
                    500
                  ],
                  "parameters": {
                    "owner": {
                      "__rl": true,
                      "mode": "name",
                      "value": "={{ $item(\"0\").$node[\"Config\"].json[\"github username\"] }}"
                    },
                    "filePath": "stats.min.svg",
                    "resource": "file",
                    "repository": {
                      "__rl": true,
                      "mode": "name",
                      "value": "={{ $item(\"0\").$node[\"Config\"].json[\"github repository\"] }}"
                    },
                    "fileContent": "={{ $item(\"0\").$node[\"SVG\"].json[\"\"] }}",
                    "commitMessage": "=create stats data {{ $now }}"
                  },
                  "credentials": {
                    "githubApi": {
                      "id": "VgF1mdKQNg4WMPiJ",
                      "name": "ANS"
                    }
                  },
                  "typeVersion": 1
                },
                {
                  "id": "0c065f1b-de9f-4210-a421-0bb9930cedb2",
                  "name": "GitHub \u200c",
                  "type": "n8n-nodes-base.github",
                  "onError": "continueErrorOutput",
                  "position": [
                    700,
                    500
                  ],
                  "parameters": {
                    "owner": {
                      "__rl": true,
                      "mode": "name",
                      "value": "={{ $item(\"0\").$node[\"Config\"].json[\"github username\"] }}"
                    },
                    "filePath": "stats.min.svg",
                    "resource": "file",
                    "operation": "edit",
                    "repository": {
                      "__rl": true,
                      "mode": "name",
                      "value": "={{ $item(\"0\").$node[\"Config\"].json[\"github repository\"] }}"
                    },
                    "fileContent": "={{ $item(\"0\").$node[\"SVG\"].json[\"\"] }}",
                    "commitMessage": "=Update stats data {{ $now }}"
                  },
                  "credentials": {
                    "githubApi": {
                      "id": "VgF1mdKQNg4WMPiJ",
                      "name": "ANS"
                    }
                  },
                  "typeVersion": 1
                }
              ],
              "active": true,
              "pinData": {},
              "settings": {
                "timezone": "Europe/Istanbul",
                "callerPolicy": "workflowsFromSameOwner",
                "executionOrder": "v1",
                "saveManualExecutions": true
              },
              "versionId": "63105996-d109-4dad-b3ef-0381b89c8453",
              "connections": {
                "SVG": {
                  "main": [
                    [
                      {
                        "node": "GitHub \u200c",
                        "type": "main",
                        "index": 0
                      }
                    ]
                  ]
                },
                "Config": {
                  "main": [
                    [
                      {
                        "node": "Get Workflows",
                        "type": "main",
                        "index": 0
                      }
                    ]
                  ]
                },
                "GitHub": {
                  "main": [
                    [
                      {
                        "node": "Aggregate",
                        "type": "main",
                        "index": 0
                      }
                    ]
                  ]
                },
                "Get User": {
                  "main": [
                    [
                      {
                        "node": "Download Image",
                        "type": "main",
                        "index": 0
                      }
                    ]
                  ]
                },
                "Aggregate": {
                  "main": [
                    [
                      {
                        "node": "Final",
                        "type": "main",
                        "index": 0
                      }
                    ]
                  ]
                },
                "GitHub \u200c": {
                  "main": [
                    [
                      {
                        "node": "Aggregate",
                        "type": "main",
                        "index": 0
                      }
                    ],
                    [
                      {
                        "node": "GitHub",
                        "type": "main",
                        "index": 0
                      }
                    ]
                  ]
                },
                "Get Workflows": {
                  "main": [
                    [
                      {
                        "node": "Workflows Data",
                        "type": "main",
                        "index": 0
                      }
                    ]
                  ]
                },
                "Download Image": {
                  "main": [
                    [
                      {
                        "node": "Extract From File",
                        "type": "main",
                        "index": 0
                      }
                    ]
                  ]
                },
                "Workflows Data": {
                  "main": [
                    [
                      {
                        "node": "Get User",
                        "type": "main",
                        "index": 0
                      }
                    ]
                  ]
                },
                "Schedule Trigger": {
                  "main": [
                    [
                      {
                        "node": "Config",
                        "type": "main",
                        "index": 0
                      }
                    ]
                  ]
                },
                "Extract From File": {
                  "main": [
                    [
                      {
                        "node": "SVG",
                        "type": "main",
                        "index": 0
                      }
                    ]
                  ]
                }
              }
            }
          },
          "node_count": 13,
          "connection_count": 11,
          "extraction_time": 0.506964,
          "error": null
        },
        "layer3": {
          "success": true,
          "data": {
            "introduction": "n8n Creators Template: Creator Profile Stats UpdaterThis n8n workflow template is designed to automate the process of updating a creator's profile statistics, including total workflows, complex workflows, approved workflows, pending workflows, total nodes, and total views. It utilizes various nodes to fetch data, process it, and update a SVG file hosted on GitHub to reflect the latest stats.Workflow OverviewSchedule Trigger: Triggers the workflow execution at specified intervals.Config: Sets up configuration details like creator username, colors for text, icons, border, and card.Get Workflows: Fetches workflows associated with the creator from the n8n API.Workflows Data: Processes the fetched data to calculate various statistics.Get User: Fetches user details from the n8n API.Download Image: Downloads the creator's profile image.Extract From File: Extracts binary data from the downloaded image file.SVG: Generates an SVG file with updated stats and visual representation.GitHub: Commits the updated SVG file to the specified GitHub repository.Final: Prepares the final data set for further processing or output.Sticky Note: Provides a visual note or reminder within the workflow editor.Embed & Live PreviewSince it's a .SVG format you can host it anywhere. treat it like normal image so you can embed it with any site, forum, page that support posting images. here's example code for markdown:[![n8n Creator Profile](https://raw.githubusercontent.com/Automations-Project/n8n-templates/main/n8n-team.svg)](https://n8n.io/creators/n8n-team)Here's the resultOr served through CDN & CacheSetup InstructionsGitHub Credentials: Ensure you have GitHub credentials set up in your n8n instance to allow the workflow to commit changes to your repository.Configure Trigger: Adjust theSchedule Triggernode to set the desired execution intervals for the workflow.Set Configuration: Customize theConfignode with your GitHub username and preferred aesthetic options for the SVG.Deploy Workflow: Import the workflow into your n8n instance and deploy it.Customization OptionsText and Icon Colors: Customize the colors used in the SVG by modifying the respective fields in theConfignode.Profile Image Size: Adjust the image size in theDownload Imagenode URL if needed.Commit Messages: Modify the commit messages in the GitHub nodes to suit your version control conventions [I've used $now funaction to include current time in message which will gives allways a diffrent commit value].Requirementsn8n (Self-hosted or Cloud version compatible with 2024 releases and up)GitHub account and repositoryBasic understanding of n8n workflow configurationSupport and ContributionsFor support, please refer to then8n community forumor theofficial n8n documentation. Contributions to the template can be made you're allowed to reuse this workflow and reshare with edit (like new design/colors etc..) under your name.",
            "overview": "",
            "tutorial_text": "n8n Creators Template: Creator Profile Stats UpdaterThis n8n workflow template is designed to automate the process of updating a creator's profile statistics, including total workflows, complex workflows, approved workflows, pending workflows, total nodes, and total views. It utilizes various nodes to fetch data, process it, and update a SVG file hosted on GitHub to reflect the latest stats.Workflow OverviewSchedule Trigger: Triggers the workflow execution at specified intervals.Config: Sets up configuration details like creator username, colors for text, icons, border, and card.Get Workflows: Fetches workflows associated with the creator from the n8n API.Workflows Data: Processes the fetched data to calculate various statistics.Get User: Fetches user details from the n8n API.Download Image: Downloads the creator's profile image.Extract From File: Extracts binary data from the downloaded image file.SVG: Generates an SVG file with updated stats and visual representation.GitHub: Commits the updated SVG file to the specified GitHub repository.Final: Prepares the final data set for further processing or output.Sticky Note: Provides a visual note or reminder within the workflow editor.Embed & Live PreviewSince it's a .SVG format you can host it anywhere. treat it like normal image so you can embed it with any site, forum, page that support posting images. here's example code for markdown:[![n8n Creator Profile](https://raw.githubusercontent.com/Automations-Project/n8n-templates/main/n8n-team.svg)](https://n8n.io/creators/n8n-team)Here's the resultOr served through CDN & CacheSetup InstructionsGitHub Credentials: Ensure you have GitHub credentials set up in your n8n instance to allow the workflow to commit changes to your repository.Configure Trigger: Adjust theSchedule Triggernode to set the desired execution intervals for the workflow.Set Configuration: Customize theConfignode with your GitHub username and preferred aesthetic options for the SVG.Deploy Workflow: Import the workflow into your n8n instance and deploy it.Customization OptionsText and Icon Colors: Customize the colors used in the SVG by modifying the respective fields in theConfignode.Profile Image Size: Adjust the image size in theDownload Imagenode URL if needed.Commit Messages: Modify the commit messages in the GitHub nodes to suit your version control conventions [I've used $now funaction to include current time in message which will gives allways a diffrent commit value].Requirementsn8n (Self-hosted or Cloud version compatible with 2024 releases and up)GitHub account and repositoryBasic understanding of n8n workflow configurationSupport and ContributionsFor support, please refer to then8n community forumor theofficial n8n documentation. Contributions to the template can be made you're allowed to reuse this workflow and reshare with edit (like new design/colors etc..) under your name.",
            "tutorial_sections": [],
            "step_by_step": [],
            "best_practices": [],
            "common_pitfalls": [],
            "image_urls": [
              "https://n8n.io/nodes/github.svg",
              "https://n8n.io/nodes/http-request.svg",
              "https://gravatar.com/avatar/6f99957ae9e5a66cf0bb95f4584cf321b0644a0ceea6a633bc968b6ec55e8410?r=pg&d=retro&size=200",
              "https://live.staticflickr.com/65535/53513730214_d47a8002cf_o.png",
              "https://raw.githubusercontent.com/Automations-Project/n8n-templates/main/n8n-team.svg",
              "https://cdn.statically.io/gh/Automations-Project/n8n-templates/main/n8n-team.svg",
              "https://n8n.io/nodes/google-sheets.svg",
              "https://n8n.io/nodes/merge.svg",
              "https://gravatar.com/avatar/988a46579257f9e8c522aeb7b906f1ee96e47c4298faa548e41b04957f455ae3?r=pg&d=retro&size=200",
              "https://gravatar.com/avatar/d41b8a0aa81139243509c58870f5b4be292824a507ab57d10ed066d8628ed8da?r=pg&d=retro&size=200",
              "https://gravatar.com/avatar/e1fc0901703aede75c35d38ff26caf8e44b424893e1330efb483d68f5f67e059?r=pg&d=retro&size=200",
              "https://n8n.io/images/stars-footer.svg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/avatar_igordisco_9243b86232_cd9a5c94ce.jpg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/neutral_avatar_purple_fee36bffe3.PNG",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/avatar_anderoav_589989fc39_ceb1c71a0c.jpg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/avatar_maxim_poulsen_48f450887b_852d0439bc.jpeg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/Felix_Leber_f7a5b3c776_130aeca79d.jpeg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/avatar_Ironben_0a4b3e7d12_e35805265c.jpg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/Francois_lassl_d5cfb504c7_710c87121d.jpeg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/twitter_x_62a44e965e.svg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/github_e1f217d7a3_b9a271324f.svg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/discord_253947c90b_191e8f60fa.svg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/linkedin_d710e84d63_6ed0dc28aa.svg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/youtube_de4bdef50a_4b3a8b8aac.svg"
            ],
            "video_urls": [],
            "code_snippets": [
              {
                "id": "snippet-1",
                "language": "unknown",
                "code": "[![n8n Creator Profile](https://raw.githubusercontent.com/Automations-Project/n8n-templates/main/n8n-team.svg)](https://n8n.io/creators/n8n-team)\n",
                "description": ""
              }
            ],
            "conclusion": "",
            "troubleshooting": {
              "common_issues": [],
              "error_messages": []
            },
            "related_workflows": []
          },
          "errors": [],
          "extraction_time": 5.746764,
          "metadata": {
            "workflow_id": "2084",
            "url": "https://n8n.io/workflows/2084",
            "extracted_at": "2025-10-11T08:51:00.353668",
            "extractor_version": "1.0.0"
          }
        }
      },
      "multimodal": null,
      "transcripts": null,
      "validation": {
        "layer1": {
          "score": 80,
          "issues": [
            "Difficulty level not set",
            "No engagement metrics available"
          ],
          "valid": true,
          "layer": "layer1"
        },
        "layer2": {
          "score": 100,
          "issues": [],
          "valid": true,
          "layer": "layer2"
        },
        "layer3": {
          "score": 35,
          "issues": [
            "No tutorial sections extracted",
            "No images extracted",
            "Missing required fields: title, description, steps",
            "No step-by-step content extracted"
          ],
          "valid": false,
          "layer": "layer3"
        }
      },
      "quality": {
        "overall_score": 70.0,
        "classification": "Fair",
        "layer1_score": 80,
        "layer2_score": 100,
        "layer3_score": 35,
        "consistency_score": 100.0,
        "total_issues": 6
      },
      "extraction_time": 15.212891817092896,
      "errors": [],
      "timestamp": "2025-10-11T08:50:50.928342"
    },
    {
      "success": true,
      "workflow_id": "1965",
      "url": "https://n8n.io/workflows/1965",
      "layers": {
        "layer1": {
          "success": true,
          "workflow_id": "1965",
          "data": {
            "title": "Unknown Title",
            "description": "",
            "author": "Unknown Author",
            "use_case": "General workflow automation",
            "primary_category": "Strictly necessary",
            "secondary_categories": [
              "Performance",
              "Targeting",
              "Functionality",
              "Strictly necessary cookies allow core website functionality such as user login and account management. The website cannot be used properly without strictly necessary cookies.",
              "Performance cookies are used to see how visitors use the website, eg. analytics cookies. Those cookies cannot be used to directly identify a certain visitor.",
              "Targeting cookies are used to identify visitors between different websites, eg. content partners, banner networks. Those cookies may be used by companies to build a profile of visitor interests or show relevant ads on other websites.",
              "Functionality cookies are used to remember visitor information on the website, eg. language, timezone, enhanced content."
            ],
            "node_tags": [],
            "general_tags": [
              "Targeting",
              "Performance",
              "Strictly necessary",
              "Functionality"
            ],
            "difficulty_level": "intermediate",
            "views": 0,
            "upvotes": 0,
            "created_date": "2025-10-11T08:51:01.387433",
            "updated_date": "2025-10-11T08:51:01.387433",
            "setup_instructions": "",
            "prerequisites": [
              "token_v2",
              "or website it relates to",
              "{\n\t\tcontent: attr(label);\n\t\tfont-weight: bold;\n\t\twidth: 120px;\n\t\tmin-width: 120px;\n\t}",
              "visiting the said website",
              "__Secure-ROLLOUT_TOKEN"
            ],
            "estimated_setup_time": "4 minutes 59 sec",
            "industry": [
              "Strictly necessary"
            ]
          },
          "extraction_time": 5.337086200714111,
          "error": null
        },
        "layer2": {
          "success": false,
          "workflow_id": "1965",
          "data": null,
          "node_count": 0,
          "connection_count": 0,
          "extraction_time": 0.137566,
          "error": "Workflow not found (404)"
        },
        "layer3": {
          "success": true,
          "data": {
            "introduction": "",
            "overview": "",
            "tutorial_text": "",
            "tutorial_sections": [],
            "step_by_step": [],
            "best_practices": [],
            "common_pitfalls": [],
            "image_urls": [],
            "video_urls": [],
            "code_snippets": [],
            "conclusion": "",
            "troubleshooting": {
              "common_issues": [],
              "error_messages": []
            },
            "related_workflows": []
          },
          "errors": [],
          "extraction_time": 5.537904,
          "metadata": {
            "workflow_id": "1965",
            "url": "https://n8n.io/workflows/1965",
            "extracted_at": "2025-10-11T08:51:02.489969",
            "extractor_version": "1.0.0"
          }
        }
      },
      "multimodal": null,
      "transcripts": null,
      "validation": {
        "layer1": {
          "score": 55,
          "issues": [
            "Description missing or too short (minimum 20 characters)",
            "Difficulty level not set",
            "Author not identified",
            "No engagement metrics available"
          ],
          "valid": false,
          "layer": "layer1"
        },
        "layer2": null,
        "layer3": {
          "score": 5,
          "issues": [
            "Tutorial text missing",
            "No tutorial sections extracted",
            "No images extracted",
            "Missing required fields: title, description, steps",
            "No step-by-step content extracted"
          ],
          "valid": false,
          "layer": "layer3"
        }
      },
      "quality": {
        "overall_score": 20.0,
        "classification": "Poor",
        "layer1_score": 55,
        "layer2_score": null,
        "layer3_score": 5,
        "consistency_score": 70.0,
        "total_issues": 9
      },
      "extraction_time": 11.632703065872192,
      "errors": [
        "Layer 2 extraction failed: Workflow not found (404)"
      ],
      "timestamp": "2025-10-11T08:50:56.432521"
    },
    {
      "success": true,
      "workflow_id": "2275",
      "url": "https://n8n.io/workflows/2275",
      "layers": {
        "layer1": {
          "success": true,
          "workflow_id": "2275",
          "data": {
            "title": "Automated Web Scraping: email a CSV, save to Google Sheets & Microsoft Excel",
            "description": "How it works:The workflow starts by sending a request to a website to retrieve its HTML content.It then parses the HTML extracting the relevant...",
            "author": "Igor Fediczko@igordisco",
            "use_case": "How it works:The workflow starts by sending a request to a website to retrieve its HTML content.",
            "primary_category": "Strictly necessary",
            "secondary_categories": [
              "Performance",
              "Targeting",
              "Functionality",
              "Strictly necessary cookies allow core website functionality such as user login and account management. The website cannot be used properly without strictly necessary cookies.",
              "Performance cookies are used to see how visitors use the website, eg. analytics cookies. Those cookies cannot be used to directly identify a certain visitor.",
              "Targeting cookies are used to identify visitors between different websites, eg. content partners, banner networks. Those cookies may be used by companies to build a profile of visitor interests or show relevant ads on other websites.",
              "Functionality cookies are used to remember visitor information on the website, eg. language, timezone, enhanced content."
            ],
            "node_tags": [
              "github147,222",
              "hiring"
            ],
            "general_tags": [
              "Targeting",
              "Performance",
              "Strictly necessary",
              "Functionality"
            ],
            "difficulty_level": "intermediate",
            "views": 0,
            "upvotes": 0,
            "created_date": "2025-10-11T08:51:08.192596",
            "updated_date": "2025-10-11T08:51:08.192596",
            "setup_instructions": "How it works:The workflow starts by sending a request to a website to retrieve its HTML content.It then parses the HTML extracting the relevant...",
            "prerequisites": [
              "token_v2",
              "or website it relates to",
              "Configure Google Cloud credentials with access to Google Drive, Google Sheets and Gm",
              "{\n\t\tcontent: attr(label);\n\t\tfont-weight: bold;\n\t\twidth: 120px;\n\t\tmin-width: 120px;\n\t}",
              "visiting the said website"
            ],
            "estimated_setup_time": "4 minutes 59 sec",
            "industry": [
              "Strictly necessary"
            ]
          },
          "extraction_time": 6.4503490924835205,
          "error": null
        },
        "layer2": {
          "success": true,
          "workflow_id": "2275",
          "data": {
            "id": 2275,
            "name": "Automated Web Scraping: email a CSV, save to Google Sheets & Microsoft Excel",
            "workflow": {
              "id": "swaWgPkq0xW1Jk0o",
              "meta": {
                "instanceId": "615d41e094941c09198b8ce125ed214047535a66e1c0b3e0cb2d688b4f5c9651"
              },
              "name": "Automated Web Scraping: email a CSV, save to Google Sheets & Microsoft Excel",
              "tags": [],
              "nodes": [
                {
                  "id": "c3ef40df-084e-435c-9a11-3aa0a2f94f36",
                  "name": "When clicking \"Test workflow\"",
                  "type": "n8n-nodes-base.manualTrigger",
                  "position": [
                    380,
                    540
                  ],
                  "parameters": {},
                  "typeVersion": 1
                },
                {
                  "id": "e0583472-a450-4582-83bc-84a014bea543",
                  "name": "Split Out",
                  "type": "n8n-nodes-base.splitOut",
                  "position": [
                    1040,
                    540
                  ],
                  "parameters": {
                    "options": {},
                    "fieldToSplitOut": "books"
                  },
                  "typeVersion": 1
                },
                {
                  "id": "f9cbdb05-c249-4ccb-b3c5-f2eb8861f811",
                  "name": "Convert to CSV File",
                  "type": "n8n-nodes-base.convertToFile",
                  "position": [
                    1820,
                    540
                  ],
                  "parameters": {
                    "options": {}
                  },
                  "typeVersion": 1.1
                },
                {
                  "id": "1ecb45ee-659e-42a9-919d-6a3ebed0b836",
                  "name": "Sticky Note",
                  "type": "n8n-nodes-base.stickyNote",
                  "position": [
                    1620,
                    100
                  ],
                  "parameters": {
                    "height": 184.90255200662574,
                    "content": "### You need to setup Microsoft Azure credentials with Microsoft Graph permissions."
                  },
                  "typeVersion": 1
                },
                {
                  "id": "1d4bcfad-feae-4317-9012-7e03a6203d91",
                  "name": "Sticky Note1",
                  "type": "n8n-nodes-base.stickyNote",
                  "position": [
                    1900,
                    100
                  ],
                  "parameters": {
                    "height": 183.1237982918667,
                    "content": "### Unlike Google Sheets where we did not need to have a certain format, here we need to create the column headers, otherwise the appending to the sheet won't work."
                  },
                  "typeVersion": 1
                },
                {
                  "id": "4248ddb3-11c0-41e3-be81-ce4ec92923ee",
                  "name": "Sticky Note2",
                  "type": "n8n-nodes-base.stickyNote",
                  "position": [
                    2020,
                    740
                  ],
                  "parameters": {
                    "height": 135.09744799337426,
                    "content": "### For these steps to work you will need to have Drive, Sheets and Gmail APIs enabled in your Google Cloud Account"
                  },
                  "typeVersion": 1
                },
                {
                  "id": "d17174fe-8015-453a-b439-43eb3245d7cb",
                  "name": "Extract all books from the page",
                  "type": "n8n-nodes-base.html",
                  "position": [
                    820,
                    540
                  ],
                  "parameters": {
                    "options": {},
                    "operation": "extractHtmlContent",
                    "extractionValues": {
                      "values": [
                        {
                          "key": "books",
                          "cssSelector": ".row > li",
                          "returnArray": true,
                          "returnValue": "html"
                        }
                      ]
                    }
                  },
                  "typeVersion": 1.2
                },
                {
                  "id": "5de66b0a-9138-42e3-857a-3060c71776a9",
                  "name": "Sort by price",
                  "type": "n8n-nodes-base.sort",
                  "position": [
                    1480,
                    540
                  ],
                  "parameters": {
                    "options": {},
                    "sortFieldsUi": {
                      "sortField": [
                        {
                          "order": "descending",
                          "fieldName": "price"
                        }
                      ]
                    }
                  },
                  "typeVersion": 1
                },
                {
                  "id": "b8c539ce-292c-4b67-83b2-b397cfc5bb97",
                  "name": "Extract individual book price",
                  "type": "n8n-nodes-base.html",
                  "position": [
                    1260,
                    540
                  ],
                  "parameters": {
                    "options": {},
                    "operation": "extractHtmlContent",
                    "dataPropertyName": "books",
                    "extractionValues": {
                      "values": [
                        {
                          "key": "title",
                          "attribute": "title",
                          "cssSelector": "h3 > a",
                          "returnValue": "attribute"
                        },
                        {
                          "key": "price",
                          "cssSelector": ".price_color"
                        }
                      ]
                    }
                  },
                  "typeVersion": 1.2
                },
                {
                  "id": "b8aa573d-5b63-4669-900f-bcc915b6ad41",
                  "name": "Save to Google Sheets",
                  "type": "n8n-nodes-base.googleSheets",
                  "position": [
                    1820,
                    760
                  ],
                  "parameters": {
                    "columns": {
                      "value": {},
                      "schema": [
                        {
                          "id": "title",
                          "type": "string",
                          "display": true,
                          "removed": false,
                          "required": false,
                          "displayName": "title",
                          "defaultMatch": false,
                          "canBeUsedToMatch": true
                        },
                        {
                          "id": "price",
                          "type": "string",
                          "display": true,
                          "removed": false,
                          "required": false,
                          "displayName": "price",
                          "defaultMatch": false,
                          "canBeUsedToMatch": true
                        }
                      ],
                      "mappingMode": "autoMapInputData",
                      "matchingColumns": []
                    },
                    "options": {},
                    "operation": "append",
                    "sheetName": {
                      "__rl": true,
                      "mode": "list",
                      "value": "gid=0",
                      "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1zyiRT7iIlfzZiskC9vDVoAFnW_UNMVXX0-ESVU1yYxY/edit#gid=0",
                      "cachedResultName": "Sheet1"
                    },
                    "documentId": {
                      "__rl": true,
                      "mode": "list",
                      "value": "1zyiRT7iIlfzZiskC9vDVoAFnW_UNMVXX0-ESVU1yYxY",
                      "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1zyiRT7iIlfzZiskC9vDVoAFnW_UNMVXX0-ESVU1yYxY/edit?usp=drivesdk",
                      "cachedResultName": "Scraped Data"
                    }
                  },
                  "credentials": {
                    "googleSheetsOAuth2Api": {
                      "id": "MMrGJCEKCWIb8jPE",
                      "name": "Google Sheets account"
                    }
                  },
                  "typeVersion": 4.2
                },
                {
                  "id": "97bdbc85-84b3-4463-9b98-5d40b80a3a1a",
                  "name": "Save to Microsoft Excel 365",
                  "type": "n8n-nodes-base.microsoftExcel",
                  "position": [
                    1820,
                    320
                  ],
                  "parameters": {
                    "options": {},
                    "dataMode": "autoMap",
                    "resource": "worksheet",
                    "workbook": {
                      "__rl": true,
                      "mode": "id",
                      "value": "=EA8A73F11507ECE9!24392"
                    },
                    "operation": "append",
                    "worksheet": {
                      "__rl": true,
                      "mode": "list",
                      "value": "{00000000-0001-0000-0000-000000000000}",
                      "cachedResultName": "Sheet1"
                    }
                  },
                  "credentials": {
                    "microsoftExcelOAuth2Api": {
                      "id": "oSGTo5qjZHVXYiuB",
                      "name": "Microsoft Excel account"
                    }
                  },
                  "typeVersion": 2.1
                },
                {
                  "id": "4078dc06-0497-4579-a6f4-8c314307aab8",
                  "name": "Send CSV via e-mail",
                  "type": "n8n-nodes-base.gmail",
                  "position": [
                    2040,
                    540
                  ],
                  "parameters": {
                    "sendTo": "constact@mihai.ltd",
                    "message": "Hey, here's the scraped data from the online bookstore!",
                    "options": {
                      "attachmentsUi": {
                        "attachmentsBinary": [
                          {}
                        ]
                      }
                    },
                    "subject": "bookstore csv"
                  },
                  "credentials": {
                    "gmailOAuth2": {
                      "id": "18u7JrVfJgM0fhOv",
                      "name": "Gmail account"
                    }
                  },
                  "typeVersion": 2.1
                },
                {
                  "id": "8ddca560-8da7-4090-b865-0523f95ca463",
                  "name": "Fetch website content",
                  "type": "n8n-nodes-base.httpRequest",
                  "position": [
                    600,
                    540
                  ],
                  "parameters": {
                    "url": "http://books.toscrape.com",
                    "options": {
                      "allowUnauthorizedCerts": true
                    }
                  },
                  "typeVersion": 4.1
                },
                {
                  "id": "450020e6-9f43-4652-be13-25cb5eb3584c",
                  "name": "Sticky Note3",
                  "type": "n8n-nodes-base.stickyNote",
                  "position": [
                    360,
                    60
                  ],
                  "parameters": {
                    "width": 579,
                    "height": 297,
                    "content": "## Automated Web Scraping: email a CSV, save to Google Sheets & Microsoft Excel\n\nSet-up steps:\n1. Change the website to scrape in the \"Fetch website content\" node\n2. Configure Microsoft Azure credentials with Microsoft Graph permissions (required for the Save to Microsoft Excel 365 node)\n3. Configure Google Cloud credentials with access to Google Drive, Google Sheets and Gmail APIs (the latter is required for the Send CSV via e-mail node)."
                  },
                  "typeVersion": 1
                }
              ],
              "active": false,
              "pinData": {},
              "settings": {
                "executionOrder": "v1"
              },
              "versionId": "27818544-3070-4201-917d-83739ce75339",
              "connections": {
                "Split Out": {
                  "main": [
                    [
                      {
                        "node": "Extract individual book price",
                        "type": "main",
                        "index": 0
                      }
                    ]
                  ]
                },
                "Sort by price": {
                  "main": [
                    [
                      {
                        "node": "Save to Microsoft Excel 365",
                        "type": "main",
                        "index": 0
                      },
                      {
                        "node": "Convert to CSV File",
                        "type": "main",
                        "index": 0
                      },
                      {
                        "node": "Save to Google Sheets",
                        "type": "main",
                        "index": 0
                      }
                    ]
                  ]
                },
                "Convert to CSV File": {
                  "main": [
                    [
                      {
                        "node": "Send CSV via e-mail",
                        "type": "main",
                        "index": 0
                      }
                    ]
                  ]
                },
                "Fetch website content": {
                  "main": [
                    [
                      {
                        "node": "Extract all books from the page",
                        "type": "main",
                        "index": 0
                      }
                    ]
                  ]
                },
                "Extract individual book price": {
                  "main": [
                    [
                      {
                        "node": "Sort by price",
                        "type": "main",
                        "index": 0
                      }
                    ]
                  ]
                },
                "When clicking \"Test workflow\"": {
                  "main": [
                    [
                      {
                        "node": "Fetch website content",
                        "type": "main",
                        "index": 0
                      }
                    ]
                  ]
                },
                "Extract all books from the page": {
                  "main": [
                    [
                      {
                        "node": "Split Out",
                        "type": "main",
                        "index": 0
                      }
                    ]
                  ]
                }
              }
            }
          },
          "node_count": 14,
          "connection_count": 7,
          "extraction_time": 0.751416,
          "error": null
        },
        "layer3": {
          "success": true,
          "data": {
            "introduction": "How it works:The workflow starts by sending a request to a website to retrieve its HTML content.It then parses the HTML extracting the relevant informationThe extracted data is storted and converted into a CSV file.The CSV file is attached to an email and sent to your specified address.The data is simultaneously saved to both Google Sheets and Microsoft Excel for further analysis or use.Set-up steps:Change the website to scrape in the \"Fetch website content\" nodeConfigure Microsoft Azure credentials with Microsoft Graph permissions (required for the Save to Microsoft Excel 365 node)Configure Google Cloud credentials with access to Google Drive, Google Sheets and Gmail APIs (the latter is required for the Send CSV via e-mail node).",
            "overview": "",
            "tutorial_text": "How it works:The workflow starts by sending a request to a website to retrieve its HTML content.It then parses the HTML extracting the relevant informationThe extracted data is storted and converted into a CSV file.The CSV file is attached to an email and sent to your specified address.The data is simultaneously saved to both Google Sheets and Microsoft Excel for further analysis or use.Set-up steps:Change the website to scrape in the \"Fetch website content\" nodeConfigure Microsoft Azure credentials with Microsoft Graph permissions (required for the Save to Microsoft Excel 365 node)Configure Google Cloud credentials with access to Google Drive, Google Sheets and Gmail APIs (the latter is required for the Send CSV via e-mail node).",
            "tutorial_sections": [],
            "step_by_step": [],
            "best_practices": [],
            "common_pitfalls": [],
            "image_urls": [
              "https://n8n.io/nodes/google-sheets.svg",
              "https://n8n.io/nodes/http-request.svg",
              "https://n8n.io/nodes/microsoft-excel.svg",
              "https://gravatar.com/avatar/a73ca84b07b557e95322815bc04859245e9243c7cfd5bf9a14568fd0ce3e72c5?r=pg&d=retro&size=200",
              "https://n8n.io/nodes/odoo.svg",
              "https://n8n.io/nodes/gmail-trigger.svg",
              "https://n8n.io/nodes/merge.svg",
              "https://gravatar.com/avatar/b3d1a47322f05a8be3d2e7bad6a80c29161bd58b91e4762cbb3ac25e5d0db5a8?r=pg&d=retro&size=200",
              "https://n8n.io/nodes/openai-chat-model.svg",
              "https://gravatar.com/avatar/d6c9cb4d0092909e227e9de518409cdf679228a7df550714ce808d77976221af?r=pg&d=retro&size=200",
              "https://n8n.io/images/stars-footer.svg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/avatar_igordisco_9243b86232_cd9a5c94ce.jpg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/neutral_avatar_purple_fee36bffe3.PNG",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/avatar_anderoav_589989fc39_ceb1c71a0c.jpg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/avatar_maxim_poulsen_48f450887b_852d0439bc.jpeg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/Felix_Leber_f7a5b3c776_130aeca79d.jpeg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/avatar_Ironben_0a4b3e7d12_e35805265c.jpg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/Francois_lassl_d5cfb504c7_710c87121d.jpeg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/twitter_x_62a44e965e.svg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/github_e1f217d7a3_b9a271324f.svg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/discord_253947c90b_191e8f60fa.svg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/linkedin_d710e84d63_6ed0dc28aa.svg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/youtube_de4bdef50a_4b3a8b8aac.svg"
            ],
            "video_urls": [],
            "code_snippets": [],
            "conclusion": "",
            "troubleshooting": {
              "common_issues": [],
              "error_messages": []
            },
            "related_workflows": []
          },
          "errors": [],
          "extraction_time": 5.626327,
          "metadata": {
            "workflow_id": "2275",
            "url": "https://n8n.io/workflows/2275",
            "extracted_at": "2025-10-11T08:51:10.074621",
            "extractor_version": "1.0.0"
          }
        }
      },
      "multimodal": null,
      "transcripts": null,
      "validation": {
        "layer1": {
          "score": 80,
          "issues": [
            "Difficulty level not set",
            "No engagement metrics available"
          ],
          "valid": true,
          "layer": "layer1"
        },
        "layer2": {
          "score": 100,
          "issues": [],
          "valid": true,
          "layer": "layer2"
        },
        "layer3": {
          "score": 35,
          "issues": [
            "No tutorial sections extracted",
            "No images extracted",
            "Missing required fields: title, description, steps",
            "No step-by-step content extracted"
          ],
          "valid": false,
          "layer": "layer3"
        }
      },
      "quality": {
        "overall_score": 70.0,
        "classification": "Fair",
        "layer1_score": 80,
        "layer2_score": 100,
        "layer3_score": 35,
        "consistency_score": 100.0,
        "total_issues": 6
      },
      "extraction_time": 13.46838903427124,
      "errors": [],
      "timestamp": "2025-10-11T08:51:02.269821"
    },
    {
      "success": true,
      "workflow_id": "1887",
      "url": "https://n8n.io/workflows/1887",
      "layers": {
        "layer1": {
          "success": true,
          "workflow_id": "1887",
          "data": {
            "title": "Unknown Title",
            "description": "",
            "author": "Unknown Author",
            "use_case": "General workflow automation",
            "primary_category": "Strictly necessary",
            "secondary_categories": [
              "Performance",
              "Targeting",
              "Functionality",
              "Strictly necessary cookies allow core website functionality such as user login and account management. The website cannot be used properly without strictly necessary cookies.",
              "Performance cookies are used to see how visitors use the website, eg. analytics cookies. Those cookies cannot be used to directly identify a certain visitor.",
              "Targeting cookies are used to identify visitors between different websites, eg. content partners, banner networks. Those cookies may be used by companies to build a profile of visitor interests or show relevant ads on other websites.",
              "Functionality cookies are used to remember visitor information on the website, eg. language, timezone, enhanced content."
            ],
            "node_tags": [],
            "general_tags": [
              "Targeting",
              "Performance",
              "Strictly necessary",
              "Functionality"
            ],
            "difficulty_level": "intermediate",
            "views": 0,
            "upvotes": 0,
            "created_date": "2025-10-11T08:51:11.004690",
            "updated_date": "2025-10-11T08:51:11.004690",
            "setup_instructions": "",
            "prerequisites": [
              "token_v2",
              "or website it relates to",
              "{\n\t\tcontent: attr(label);\n\t\tfont-weight: bold;\n\t\twidth: 120px;\n\t\tmin-width: 120px;\n\t}",
              "visiting the said website",
              "__Secure-ROLLOUT_TOKEN"
            ],
            "estimated_setup_time": "4 minutes 59 sec",
            "industry": [
              "Strictly necessary"
            ]
          },
          "extraction_time": 5.267449140548706,
          "error": null
        },
        "layer2": {
          "success": false,
          "workflow_id": "1887",
          "data": null,
          "node_count": 0,
          "connection_count": 0,
          "extraction_time": 0.24869,
          "error": "Workflow not found (404)"
        },
        "layer3": {
          "success": true,
          "data": {
            "introduction": "",
            "overview": "",
            "tutorial_text": "",
            "tutorial_sections": [],
            "step_by_step": [],
            "best_practices": [],
            "common_pitfalls": [],
            "image_urls": [],
            "video_urls": [],
            "code_snippets": [],
            "conclusion": "",
            "troubleshooting": {
              "common_issues": [],
              "error_messages": []
            },
            "related_workflows": []
          },
          "errors": [],
          "extraction_time": 5.577451,
          "metadata": {
            "workflow_id": "1887",
            "url": "https://n8n.io/workflows/1887",
            "extracted_at": "2025-10-11T08:51:12.877859",
            "extractor_version": "1.0.0"
          }
        }
      },
      "multimodal": null,
      "transcripts": null,
      "validation": {
        "layer1": {
          "score": 55,
          "issues": [
            "Description missing or too short (minimum 20 characters)",
            "Difficulty level not set",
            "Author not identified",
            "No engagement metrics available"
          ],
          "valid": false,
          "layer": "layer1"
        },
        "layer2": null,
        "layer3": {
          "score": 5,
          "issues": [
            "Tutorial text missing",
            "No tutorial sections extracted",
            "No images extracted",
            "Missing required fields: title, description, steps",
            "No step-by-step content extracted"
          ],
          "valid": false,
          "layer": "layer3"
        }
      },
      "quality": {
        "overall_score": 20.0,
        "classification": "Poor",
        "layer1_score": 55,
        "layer2_score": null,
        "layer3_score": 5,
        "consistency_score": 70.0,
        "total_issues": 9
      },
      "extraction_time": 12.34912395477295,
      "errors": [
        "Layer 2 extraction failed: Workflow not found (404)"
      ],
      "timestamp": "2025-10-11T08:51:06.141716"
    },
    {
      "success": true,
      "workflow_id": "2157",
      "url": "https://n8n.io/workflows/2157",
      "layers": {
        "layer1": {
          "success": true,
          "workflow_id": "2157",
          "data": {
            "title": "\ud83e\udd16 Advanced Slackbot with n8n",
            "description": "Use caseSlackbots are super powerful. At n8n, we have been using them to get a lot done.. But it can become hard to manage and maintain many different...",
            "author": "Igor Fediczko@igordisco",
            "use_case": "Use caseSlackbots are super powerful.",
            "primary_category": "Strictly necessary",
            "secondary_categories": [
              "Performance",
              "Targeting",
              "Functionality",
              "Strictly necessary cookies allow core website functionality such as user login and account management. The website cannot be used properly without strictly necessary cookies.",
              "Performance cookies are used to see how visitors use the website, eg. analytics cookies. Those cookies cannot be used to directly identify a certain visitor.",
              "Targeting cookies are used to identify visitors between different websites, eg. content partners, banner networks. Those cookies may be used by companies to build a profile of visitor interests or show relevant ads on other websites.",
              "Functionality cookies are used to remember visitor information on the website, eg. language, timezone, enhanced content."
            ],
            "node_tags": [
              "github147,222",
              "hiring"
            ],
            "general_tags": [
              "Targeting",
              "Performance",
              "Strictly necessary",
              "Functionality"
            ],
            "difficulty_level": "intermediate",
            "views": 0,
            "upvotes": 0,
            "created_date": "2025-10-11T08:51:15.963751",
            "updated_date": "2025-10-11T08:51:15.963751",
            "setup_instructions": "Use caseSlackbots are super powerful. At n8n, we have been using them to get a lot done.. But it can become hard to manage and maintain many different...",
            "prerequisites": [
              "token_v2",
              "or website it relates to",
              "{\n\t\tcontent: attr(label);\n\t\tfont-weight: bold;\n\t\twidth: 120px;\n\t\tmin-width: 120px;\n\t}",
              "visiting the said website",
              "your own Slackbot (and I made it simple, there's only one node to configure \ud83d\ude09)"
            ],
            "estimated_setup_time": "4 minutes 59 sec",
            "industry": [
              "Strictly necessary"
            ]
          },
          "extraction_time": 8.55115008354187,
          "error": null
        },
        "layer2": {
          "success": true,
          "workflow_id": "2157",
          "data": {
            "id": 2157,
            "name": "\ud83e\udd16 Advanced Slackbot with n8n",
            "workflow": {
              "nodes": [
                {
                  "id": "8e0a3745-348b-42db-82cc-55676c897ad7",
                  "name": "Start thread",
                  "type": "n8n-nodes-base.slack",
                  "position": [
                    1260,
                    180
                  ],
                  "parameters": {
                    "text": "=\ud83e\uddf5 Got request to `{{ $json.command }}` from @{{$json.user}}",
                    "select": "channel",
                    "channelId": {
                      "__rl": true,
                      "mode": "name",
                      "value": "={{ $json.alerts_channel }}"
                    },
                    "otherOptions": {
                      "link_names": true
                    }
                  },
                  "credentials": {
                    "slackApi": {
                      "id": "26",
                      "name": "Cloudbot bot token"
                    }
                  },
                  "typeVersion": 2
                },
                {
                  "id": "ee413d6c-dad3-4e57-b08d-ffd0f84c682e",
                  "name": "send help",
                  "type": "n8n-nodes-base.httpRequest",
                  "position": [
                    880,
                    560
                  ],
                  "parameters": {
                    "url": "={{ $json.response_url }}",
                    "options": {},
                    "requestMethod": "POST",
                    "jsonParameters": true,
                    "responseFormat": "string",
                    "bodyParametersJson": "={\n\"attachments\": [\n{\n\"text\": \"\u2139\ufe0f <{{ $json.help_docs_url }}|You can find help page here>\"\n}\n]\n}"
                  },
                  "typeVersion": 1
                },
                {
                  "id": "47c146f9-1223-46a7-bfd6-0fa6ff701efe",
                  "name": "Validate Slack token",
                  "type": "n8n-nodes-base.if",
                  "position": [
                    320,
                    280
                  ],
                  "parameters": {
                    "conditions": {
                      "string": [
                        {
                          "value1": "={{ $json.slack_token }}",
                          "value2": "={{ $json.request_token }}"
                        }
                      ]
                    }
                  },
                  "typeVersion": 1
                },
                {
                  "id": "7733505c-d02c-4cb2-be78-f2272e5b7d6e",
                  "name": "Sticky Note3",
                  "type": "n8n-nodes-base.stickyNote",
                  "position": [
                    -440,
                    -140
                  ],
                  "parameters": {
                    "color": 5,
                    "width": 549.1826144791862,
                    "height": 326.46772464213774,
                    "content": "## \ud83d\udc68\u200d\ud83c\udfa4 Setup\n1. Add Slack command and point it up to the webhook\n2. Add the following to the **Set config** node\n- `alerts_channel` with alerts channel to start threads on\n- `instance_url` with this instance url to make it easy to debug\n- `slack_token` with slack bot token to validate request\n- `slack_secret_signature` with slack secret signature to validate request\n- `help_docs_url` with help url to help users understand the commands \n3. Build other workflows to call and add them to `commands` in **Set Config**. Each command must be mapped to a workflow id with an `Execute Workflow Trigger` node\n4. Activate workflow \ud83d\ude80"
                  },
                  "typeVersion": 1
                },
                {
                  "id": "30355072-5d75-4deb-af67-909ba59e6eb3",
                  "name": "Reply to user that command was received",
                  "type": "n8n-nodes-base.httpRequest",
                  "onError": "continueRegularOutput",
                  "position": [
                    500,
                    40
                  ],
                  "parameters": {
                    "url": "={{ $json.response_url }}",
                    "options": {},
                    "requestMethod": "POST",
                    "jsonParameters": true,
                    "responseFormat": "string",
                    "bodyParametersJson": "={\n\"attachments\": [\n{\n\"text\": \"\u2139\ufe0f Got command `{{ $json.command_name }} {{ $json.command_text }}`\"\n}\n]\n}"
                  },
                  "typeVersion": 1
                },
                {
                  "id": "a2217c45-700e-4923-96e4-455a733bc1e4",
                  "name": "if has workflow",
                  "type": "n8n-nodes-base.if",
                  "position": [
                    740,
                    280
                  ],
                  "parameters": {
                    "options": {},
                    "conditions": {
                      "options": {
                        "leftValue": "",
                        "caseSensitive": true,
                        "typeValidation": "strict"
                      },
                      "combinator": "and",
                      "conditions": [
                        {
                          "id": "d0a35e4f-3141-4e94-bb1a-fe7747a58dfc",
                          "operator": {
                            "type": "object",
                            "operation": "notEmpty",
                            "singleValue": true
                          },
                          "leftValue": "={{ $json.workflow }}",
                          "rightValue": ""
                        }
                      ]
                    }
                  },
                  "typeVersion": 2
                },
                {
                  "id": "7ff12aa4-680f-42af-aa2f-c9dd6a733976",
                  "name": "Set config",
                  "type": "n8n-nodes-base.set",
                  "position": [
                    -100,
                    280
                  ],
                  "parameters": {
                    "options": {},
                    "assignments": {
                      "assignments": [
                        {
                          "id": "ba8fd958-188a-4e27-bdf1-928de8ae7d4f",
                          "name": "commands",
                          "type": "object",
                          "value": "={{\n{\n  \"info\": { workflowId: 142, startThread: false },\n  \"delete-user\": { workflowId: \"pTh9HMZVYcQNXypJ\" }\n}\n}}"
                        },
                        {
                          "id": "105d2881-72b7-4547-a076-83ddb0966256",
                          "name": "alerts_channel",
                          "type": "string",
                          "value": "#adore_bot_test"
                        },
                        {
                          "id": "9672bea2-3a6a-4162-9966-107bf2ddbee5",
                          "name": "instance_url",
                          "type": "string",
                          "value": "https://x.app.n8n.cloud/"
                        },
                        {
                          "id": "52b53b37-5f69-4fb8-9569-f62788d91af1",
                          "name": "slack_token",
                          "type": "string",
                          "value": "FILL_TOKEN_HERE"
                        },
                        {
                          "id": "4d8d06f2-f1a5-4eb2-a559-42d98ceddffb",
                          "name": "slack_secret_signature",
                          "type": "string",
                          "value": "FILL_SECRET_HERE"
                        },
                        {
                          "id": "c2c7de20-a264-495e-934e-dda1a0bc64b9",
                          "name": "help_docs_url",
                          "type": "string",
                          "value": "ADD_LINK_HERE"
                        }
                      ]
                    },
                    "includeOtherFields": true
                  },
                  "typeVersion": 3.3
                },
                {
                  "id": "4c730be9-d3f5-45ee-8f2b-b6bfd685ea78",
                  "name": "Send debug url",
                  "type": "n8n-nodes-base.httpRequest",
                  "onError": "continueRegularOutput",
                  "position": [
                    1260,
                    440
                  ],
                  "parameters": {
                    "url": "={{ $json.response_url }}",
                    "options": {},
                    "requestMethod": "POST",
                    "jsonParameters": true,
                    "responseFormat": "string",
                    "bodyParametersJson": "={\n\"attachments\": [\n{\n\"text\": \"<{{ $json.instance_url }}/workflow/{{ $workflow.id }}/executions/{{ $execution.id }}|To debug entry point execution>\"\n}\n]\n}"
                  },
                  "retryOnFail": false,
                  "typeVersion": 2
                },
                {
                  "id": "f4ccc237-d703-4963-8112-cc38ae9d6b2a",
                  "name": "if create thread",
                  "type": "n8n-nodes-base.if",
                  "position": [
                    980,
                    280
                  ],
                  "parameters": {
                    "options": {},
                    "conditions": {
                      "options": {
                        "leftValue": "",
                        "caseSensitive": true,
                        "typeValidation": "strict"
                      },
                      "combinator": "or",
                      "conditions": [
                        {
                          "id": "7eadbf0d-f8ec-45cf-abf3-aafb8d7e16b4",
                          "operator": {
                            "type": "boolean",
                            "operation": "true",
                            "singleValue": true
                          },
                          "leftValue": "={{ $json.workflow.startThread }}",
                          "rightValue": ""
                        },
                        {
                          "id": "2f28e7dd-6473-4f85-a449-674e00b29b4d",
                          "operator": {
                            "type": "boolean",
                            "operation": "notExists",
                            "singleValue": true
                          },
                          "leftValue": "={{ $json.workflow.startThread }}",
                          "rightValue": ""
                        }
                      ]
                    }
                  },
                  "typeVersion": 2
                },
                {
                  "id": "ed9f2ed8-5266-42a3-9d47-621050e5bf97",
                  "name": "Alert user that thread was created",
                  "type": "n8n-nodes-base.httpRequest",
                  "onError": "continueRegularOutput",
                  "position": [
                    1260,
                    0
                  ],
                  "parameters": {
                    "url": "={{ $json.response_url }}",
                    "options": {},
                    "requestMethod": "POST",
                    "jsonParameters": true,
                    "responseFormat": "string",
                    "bodyParametersJson": "={\n\"attachments\": [\n{\n\"text\": \"\ud83e\uddf5 Thread created on {{ $json.alerts_channel }}\"\n}\n]\n}"
                  },
                  "retryOnFail": false,
                  "typeVersion": 2
                },
                {
                  "id": "9904180a-e937-43fd-9b04-627e860d693a",
                  "name": "Add debug info",
                  "type": "n8n-nodes-base.slack",
                  "position": [
                    1540,
                    60
                  ],
                  "parameters": {
                    "text": "=<{{ $vars.instance_url }}/workflow/{{ $workflow.id }}/executions/{{ $execution.id }}|To debug entry point execution>",
                    "select": "channel",
                    "channelId": {
                      "__rl": true,
                      "mode": "id",
                      "value": "={{ $json.channel }}"
                    },
                    "otherOptions": {
                      "thread_ts": {
                        "replyValues": {
                          "thread_ts": "={{ $json.message.ts }}"
                        }
                      }
                    }
                  },
                  "credentials": {
                    "slackApi": {
                      "id": "26",
                      "name": "Cloudbot bot token"
                    }
                  },
                  "typeVersion": 2
                },
                {
                  "id": "6b385f75-4ebf-46c8-a799-babdb6231f4e",
                  "name": "Execute target workflow",
                  "type": "n8n-nodes-base.executeWorkflow",
                  "position": [
                    1940,
                    500
                  ],
                  "parameters": {
                    "options": {},
                    "workflowId": "={{ $json.commands.info.workflowId }}"
                  },
                  "typeVersion": 1
                },
                {
                  "id": "5fde8d57-6ef3-4b01-9422-16fd2f176c5d",
                  "name": "Add thread info",
                  "type": "n8n-nodes-base.merge",
                  "position": [
                    1760,
                    320
                  ],
                  "parameters": {
                    "mode": "combine",
                    "options": {},
                    "combinationMode": "multiplex"
                  },
                  "typeVersion": 2
                },
                {
                  "id": "c4892e34-53af-4d95-a3b6-ca16fdef1aa7",
                  "name": "Handle other commands",
                  "type": "n8n-nodes-base.switch",
                  "position": [
                    640,
                    620
                  ],
                  "parameters": {
                    "rules": {
                      "values": [
                        {
                          "outputKey": "help",
                          "conditions": {
                            "options": {
                              "leftValue": "",
                              "caseSensitive": true,
                              "typeValidation": "strict"
                            },
                            "combinator": "and",
                            "conditions": [
                              {
                                "operator": {
                                  "type": "string",
                                  "operation": "equals"
                                },
                                "leftValue": "={{ $json.command }}",
                                "rightValue": "help"
                              }
                            ]
                          },
                          "renameOutput": true
                        }
                      ]
                    },
                    "options": {
                      "fallbackOutput": "extra"
                    }
                  },
                  "typeVersion": 3
                },
                {
                  "id": "7dabe06a-8d87-4e68-b8d9-53bf7f29a9ab",
                  "name": "Set thread info",
                  "type": "n8n-nodes-base.set",
                  "position": [
                    1540,
                    240
                  ],
                  "parameters": {
                    "values": {
                      "string": [
                        {
                          "name": "channel_id",
                          "value": "={{ $json.channel }}"
                        },
                        {
                          "name": "thread_ts",
                          "value": "={{ $json.message.ts }}"
                        }
                      ]
                    },
                    "options": {},
                    "keepOnlySet": true
                  },
                  "typeVersion": 1
                },
                {
                  "id": "e56875c4-ce2b-4639-aabc-21f1562a3858",
                  "name": "Unknown command",
                  "type": "n8n-nodes-base.httpRequest",
                  "position": [
                    880,
                    740
                  ],
                  "parameters": {
                    "url": "={{ $json.response_url }}",
                    "options": {},
                    "requestMethod": "POST",
                    "jsonParameters": true,
                    "responseFormat": "string",
                    "bodyParametersJson": "={\n\"attachments\": [\n{\n\"text\": \"\ud83e\udd37\ud83c\udffd\u200d\u2642\ufe0f Sorry, unknown command `{{ $json.command }}`\"\n}\n]\n}"
                  },
                  "typeVersion": 1
                },
                {
                  "id": "3fab88ce-4a80-483b-b558-12e111f16c98",
                  "name": "Set vars",
                  "type": "n8n-nodes-base.set",
                  "position": [
                    -280,
                    280
                  ],
                  "parameters": {
                    "options": {},
                    "assignments": {
                      "assignments": [
                        {
                          "id": "8fa0d712-1076-49b7-82da-e98390182ac6",
                          "name": "command_text",
                          "type": "string",
                          "value": "={{ $json.body.text }}"
                        },
                        {
                          "id": "ef82aa1f-2882-4970-b10a-86e7faef6562",
                          "name": "user",
                          "type": "string",
                          "value": "={{ $json.body.user_name }}"
                        },
                        {
                          "id": "633fe37e-850c-4e95-8728-f19ceb4afe76",
                          "name": "response_url",
                          "type": "string",
                          "value": "={{ $json.body.response_url }}"
                        },
                        {
                          "id": "bbab2bb9-3e90-41c4-b5be-8c7873c61707",
                          "name": "request_token",
                          "type": "string",
                          "value": "={{ $json.body.token }}"
                        },
                        {
                          "id": "3e6dd0e2-fec4-48cb-a44c-1342a8eb619c",
                          "name": "command_name",
                          "type": "string",
                          "value": "={{ $json.body.command }}"
                        }
                      ]
                    }
                  },
                  "typeVersion": 3.3
                },
                {
                  "id": "99cab485-4099-4505-9c9e-33ea389818e5",
                  "name": "Webhook to call for Slack command",
                  "type": "n8n-nodes-base.webhook",
                  "position": [
                    -480,
                    280
                  ],
                  "webhookId": "a14585bb-b757-410e-a5b2-5f05a087b388",
                  "parameters": {
                    "path": "a14585bb-b757-410e-a5b2-5f05a087b388",
                    "options": {
                      "rawBody": true,
                      "responseData": "Wait for it...",
                      "binaryPropertyName": "data"
                    },
                    "httpMethod": "POST"
                  },
                  "typeVersion": 1.1
                },
                {
                  "id": "09dc7ecf-a577-427e-a193-ed29d260c5fe",
                  "name": "Reply to user directly",
                  "type": "n8n-nodes-base.httpRequest",
                  "position": [
                    1460,
                    900
                  ],
                  "parameters": {
                    "url": "={{ $json.response_url }}",
                    "options": {},
                    "requestMethod": "POST",
                    "jsonParameters": true,
                    "responseFormat": "string",
                    "bodyParametersJson": "={\n\"attachments\": [\n{\n\"text\": \"<{{ $json.instance_url }}workflow/{{ $workflow.id }}/executions/{{ $execution.id }}|To debug subworkflow execution>\"\n}\n]\n}"
                  },
                  "typeVersion": 2,
                  "continueOnFail": true
                },
                {
                  "id": "a38b3343-8e8e-4d6c-95ef-66efafdfa913",
                  "name": "Sticky Note",
                  "type": "n8n-nodes-base.stickyNote",
                  "position": [
                    1160,
                    660
                  ],
                  "parameters": {
                    "width": 1255.4495374151727,
                    "height": 655.2393233866135,
                    "content": "## Example subworkflow for command WITHOUT Slack thread..\n\n### Build this in a separate workflow\n### and add the id to `commands` in **Set Config**"
                  },
                  "typeVersion": 1
                },
                {
                  "id": "87f764b3-135c-4dc3-8633-b58e2c3a4e2d",
                  "name": "Command workflow trigger",
                  "type": "n8n-nodes-base.executeWorkflowTrigger",
                  "disabled": true,
                  "position": [
                    1220,
                    1020
                  ],
                  "parameters": {},
                  "typeVersion": 1
                },
                {
                  "id": "3a52d7e3-ef56-47db-844a-1efb6c20ad35",
                  "name": "if has flag",
                  "type": "n8n-nodes-base.if",
                  "position": [
                    1400,
                    1120
                  ],
                  "parameters": {
                    "options": {},
                    "conditions": {
                      "options": {
                        "leftValue": "",
                        "caseSensitive": true,
                        "typeValidation": "strict"
                      },
                      "combinator": "and",
                      "conditions": [
                        {
                          "id": "d8478e87-6e7c-40ea-a28d-099a3896001b",
                          "operator": {
                            "type": "array",
                            "operation": "contains",
                            "rightType": "any"
                          },
                          "leftValue": "={{ $json.flags }}",
                          "rightValue": "--full-info"
                        }
                      ]
                    }
                  },
                  "typeVersion": 2
                },
                {
                  "id": "78718555-e266-4f58-ab9d-6e78f50afac2",
                  "name": "If matches env variable",
                  "type": "n8n-nodes-base.if",
                  "position": [
                    1620,
                    1120
                  ],
                  "parameters": {
                    "options": {},
                    "conditions": {
                      "options": {
                        "leftValue": "",
                        "caseSensitive": true,
                        "typeValidation": "strict"
                      },
                      "combinator": "and",
                      "conditions": [
                        {
                          "id": "1ccb9f5d-0e7d-44f9-86e3-d5c0e15cb648",
                          "operator": {
                            "name": "filter.operator.equals",
                            "type": "string",
                            "operation": "equals"
                          },
                          "leftValue": "={{ $json.env.env }}",
                          "rightValue": "prod"
                        }
                      ]
                    }
                  },
                  "typeVersion": 2
                },
                {
                  "id": "0ca15a51-2e56-4ef4-8be6-96f45ed17867",
                  "name": "Found user",
                  "type": "n8n-nodes-base.httpRequest",
                  "position": [
                    2220,
                    1120
                  ],
                  "parameters": {
                    "url": "={{ $('Command workflow trigger').item.json.response_url }}",
                    "options": {},
                    "requestMethod": "POST",
                    "jsonParameters": true,
                    "responseFormat": "string",
                    "bodyParametersJson": "={{ $json.slack_message }}"
                  },
                  "typeVersion": 2,
                  "continueOnFail": true
                },
                {
                  "id": "ad83305f-9ca5-428f-a731-9afe3a82258a",
                  "name": "Format data into nice structure",
                  "type": "n8n-nodes-base.code",
                  "position": [
                    2040,
                    1120
                  ],
                  "parameters": {
                    "jsCode": "const user = {\n  id: '1',\n  email: 'mutasem@n8n.io',\n  name: 'Mutasem Aldmour',\n  username: 'mutasem',\n  profile_url: 'https://n8n.io/creators/mutasem/',\n}\n\nconst fields = [\n    `*id:*\\n${user.id}`,\n    `*email:*\\n${user.email}`,\n    `*name:*\\n${user.name}`,\n    `*urls:*\\n<${user.profile_url}|creator profile>`\n];\n\n// remember no more than 10 fields per section\nconst output = {\n    \"blocks\":\n    [\n        {\n            \"type\": \"section\",\n            \"text\":\n            {\n                \"type\": \"mrkdwn\",\n                \"text\": `User: *${user.username}*`\n            }\n        },\n        {\n            \"type\": \"section\",\n            \"fields\": fields.map((text) => {\n                    return {\n                        \"type\": \"mrkdwn\",\n                        text,\n                    };\n                })\n        }\n    ]\n}\n\nreturn { slack_message: output };"
                  },
                  "typeVersion": 1
                },
                {
                  "id": "6bdbd120-68ac-46ad-bd34-c43d7a447be4",
                  "name": "REPLACE ME WITH TRIGGER",
                  "type": "n8n-nodes-base.set",
                  "position": [
                    1240,
                    1680
                  ],
                  "parameters": {
                    "options": {}
                  },
                  "typeVersion": 3.3
                },
                {
                  "id": "e2b0b88d-be4a-4b66-be15-3e8c6052d0f7",
                  "name": "Delete user here for example",
                  "type": "n8n-nodes-base.postgres",
                  "disabled": true,
                  "position": [
                    1500,
                    1800
                  ],
                  "parameters": {
                    "table": {
                      "__rl": true,
                      "mode": "name",
                      "value": "=user"
                    },
                    "where": {
                      "values": [
                        {
                          "value": "={{ $json.params[0] }}",
                          "column": "username"
                        }
                      ]
                    },
                    "schema": {
                      "__rl": true,
                      "mode": "list",
                      "value": "public"
                    },
                    "options": {},
                    "operation": "deleteTable",
                    "deleteCommand": "delete"
                  },
                  "typeVersion": 2.3
                },
                {
                  "id": "b0dc9a07-4957-4643-972b-49952d6fc001",
                  "name": "Get user here for example",
                  "type": "n8n-nodes-base.postgres",
                  "disabled": true,
                  "position": [
                    1840,
                    1120
                  ],
                  "parameters": {
                    "table": {
                      "__rl": true,
                      "mode": "name",
                      "value": "test"
                    },
                    "where": {
                      "values": [
                        {
                          "value": "={{ $json.params[0] }}",
                          "column": "username"
                        }
                      ]
                    },
                    "schema": {
                      "__rl": true,
                      "mode": "list",
                      "value": "public"
                    },
                    "options": {},
                    "operation": "select"
                  },
                  "typeVersion": 2.3
                },
                {
                  "id": "1f2eff56-a89b-4d6d-af8b-477c81c8bab3",
                  "name": "Confirm user was deleted",
                  "type": "n8n-nodes-base.slack",
                  "position": [
                    1720,
                    1800
                  ],
                  "parameters": {
                    "text": "Deleted user  \u2705",
                    "select": "channel",
                    "channelId": {
                      "__rl": true,
                      "mode": "id",
                      "value": "={{ $('Command workflow trigger').item.json.channel_id }}"
                    },
                    "otherOptions": {
                      "thread_ts": {
                        "replyValues": {
                          "thread_ts": "={{ $('Command workflow trigger').item.json.thread_ts }}"
                        }
                      }
                    }
                  },
                  "credentials": {
                    "slackApi": {
                      "id": "26",
                      "name": "Cloudbot bot token"
                    }
                  },
                  "typeVersion": 2
                },
                {
                  "id": "0c0d0487-a594-4e88-b777-21b4816115cd",
                  "name": "Replying to thread",
                  "type": "n8n-nodes-base.slack",
                  "position": [
                    1500,
                    1580
                  ],
                  "parameters": {
                    "text": "=<{{ $json.instance_url }}workflow/{{ $workflow.id }}/executions/{{ $execution.id }}|To debug subworkflow execution>",
                    "select": "channel",
                    "channelId": {
                      "__rl": true,
                      "mode": "id",
                      "value": "={{ $json.channel_id }}"
                    },
                    "otherOptions": {
                      "thread_ts": {
                        "replyValues": {
                          "thread_ts": "={{ $json.thread_ts }}"
                        }
                      }
                    }
                  },
                  "credentials": {
                    "slackApi": {
                      "id": "26",
                      "name": "Cloudbot bot token"
                    }
                  },
                  "typeVersion": 2
                },
                {
                  "id": "2c055ef4-4c0a-475d-b521-30002a45950b",
                  "name": "Sticky Note2",
                  "type": "n8n-nodes-base.stickyNote",
                  "position": [
                    1160,
                    1380
                  ],
                  "parameters": {
                    "width": 961.7738517807816,
                    "height": 589.0078772779973,
                    "content": "## Example subworkflow for command WITH Slack thread..\n\n### Build this in a second separate workflow\n### and add the id to `commands` in **Set Config**\n\nUsed Edit Fields node here as trigger because you can only have one\nExecute Workflow Trigger per workflow"
                  },
                  "typeVersion": 1
                },
                {
                  "id": "aec1b842-1219-4367-9238-3c7a118ce68f",
                  "name": "Sticky Note1",
                  "type": "n8n-nodes-base.stickyNote",
                  "position": [
                    -80,
                    460
                  ],
                  "parameters": {
                    "color": 7,
                    "width": 150,
                    "height": 83.26656725254155,
                    "content": "### \ud83d\udc46\ud83c\udffd Set all custom config here "
                  },
                  "typeVersion": 1
                },
                {
                  "id": "dd8f1a00-dfd4-4966-a76c-3c8e2a243bab",
                  "name": "parse command",
                  "type": "n8n-nodes-base.code",
                  "position": [
                    560,
                    280
                  ],
                  "parameters": {
                    "jsCode": "const text = $input.first().json.command_text;\nconst parts = text.split(' ');\n\n\n// GET COMMAND\n// for example /cloudbot info mutasem\n// should return \"info\"\nconst command = parts[0];\n\n\n// GET FLAGS \n// for example /cloudbot info mutasem --test --flag\n// should return ['--test', '--flag']\nconst flags = parts.filter((part) => part.startsWith('--'));\n\n\n// GET PARAMS\n// for example /cloudbot info mutasem test\n// should return [\"mutasem\", \"test\"]\nlet params = parts\n  .filter((part, i) => i > 0 && !part.startsWith('--'));\nparams = params.filter((param, i) => {\n  if (param === '-e') {\n    return false;\n  }\n  if (params[i - 1] === '-e') {\n    return false;\n  }\n\n  return true;\n});\n\n\n// GET ENV VARS\n// for example /cloudbot info mutasem -e env=prod\n// should return {env: \"prod\"}\nconst env = parts.filter((val, i) => {\n  return i > 0 && parts[i - 1] === '-e';\n})\n  .reduce((accu, opt) => {\n  if (!opt.includes('=')) {\n    return accu;\n  }\n\n  const key = opt.split('=')[0];\n  const val = opt.split('=')[1];\n  \n  accu[key] = clean(val);\n  return accu;\n}, {});\n\n// Add workflow to run\nconst commands = $input.first().json.commands;\nlet workflow;\nif (commands[command]) {\n  workflow = commands[command];\n}\n\nreturn {\n  ...$input.first().json,\n  command,\n  flags,\n  env,\n  params,\n  workflow,\n}\n\nfunction clean(str) {\n  return str.replaceAll(`\u2018`, '\\'').replaceAll('\u201c', '\"').replaceAll('\u201d', '\"').replaceAll('\u2019', '\\'');\n}"
                  },
                  "typeVersion": 1
                },
                {
                  "id": "22b8502c-dec3-4456-9947-639761517881",
                  "name": "Validate webhook signature",
                  "type": "n8n-nodes-base.code",
                  "position": [
                    100,
                    280
                  ],
                  "parameters": {
                    "jsCode": "const SIGNING_SECRET = $input.first().json.slack_secret_signature;\nconst item = $('Webhook to call for Slack command').first();\n\nif (!item.binary) {\n  throw new Error('Missing binary data');\n}\n\nconst crypto = require('crypto');\nconst { binary: { data } } = item;\n\nif (\n  !item.json.headers['x-slack-request-timestamp'] ||\n  Math.abs(\n    Math.floor(new Date().getTime() / 1000) -\n      +item.json.headers['x-slack-request-timestamp']\n  ) > 300\n) {\n  throw new Error('Unauthorized, request not fresh');\n}\n\nconst rawBody = Buffer.from(data.data, 'base64').toString()\n\n// compute the basestring\nconst baseStr = `v0:${item.json.headers['x-slack-request-timestamp']}:${rawBody}`;\n\n// extract the received signature from the request headers\nconst receivedSignature = item.json.headers['x-slack-signature'];\n\nconst expectedSignature = `v0=${crypto.createHmac('sha256', SIGNING_SECRET)\n.update(baseStr, 'utf8')\n.digest('hex')}`;\n\n// match the two signatures\nif (expectedSignature !== receivedSignature) {\nthrow new Error('Unauthorized, umatched signatures');\n}\n\nreturn $input.all();"
                  },
                  "typeVersion": 2
                }
              ],
              "pinData": {},
              "connections": {
                "Set vars": {
                  "main": [
                    [
                      {
                        "node": "Set config",
                        "type": "main",
                        "index": 0
                      }
                    ]
                  ]
                },
                "Set config": {
                  "main": [
                    [
                      {
                        "node": "Validate webhook signature",
                        "type": "main",
                        "index": 0
                      }
                    ]
                  ]
                },
                "if has flag": {
                  "main": [
                    [
                      {
                        "node": "If matches env variable",
                        "type": "main",
                        "index": 0
                      }
                    ]
                  ]
                },
                "Start thread": {
                  "main": [
                    [
                      {
                        "node": "Add debug info",
                        "type": "main",
                        "index": 0
                      },
                      {
                        "node": "Set thread info",
                        "type": "main",
                        "index": 0
                      }
                    ]
                  ]
                },
                "parse command": {
                  "main": [
                    [
                      {
                        "node": "if has workflow",
                        "type": "main",
                        "index": 0
                      }
                    ]
                  ]
                },
                "Add thread info": {
                  "main": [
                    [
                      {
                        "node": "Execute target workflow",
                        "type": "main",
                        "index": 0
                      }
                    ]
                  ]
                },
                "Set thread info": {
                  "main": [
                    [
                      {
                        "node": "Add thread info",
                        "type": "main",
                        "index": 0
                      }
                    ]
                  ]
                },
                "if has workflow": {
                  "main": [
                    [
                      {
                        "node": "if create thread",
                        "type": "main",
                        "index": 0
                      }
                    ],
                    [
                      {
                        "node": "Handle other commands",
                        "type": "main",
                        "index": 0
                      }
                    ]
                  ]
                },
                "if create thread": {
                  "main": [
                    [
                      {
                        "node": "Start thread",
                        "type": "main",
                        "index": 0
                      },
                      {
                        "node": "Alert user that thread was created",
                        "type": "main",
                        "index": 0
                      },
                      {
                        "node": "Add thread info",
                        "type": "main",
                        "index": 1
                      }
                    ],
                    [
                      {
                        "node": "Send debug url",
                        "type": "main",
                        "index": 0
                      },
                      {
                        "node": "Execute target workflow",
                        "type": "main",
                        "index": 0
                      }
                    ]
                  ]
                },
                "Validate Slack token": {
                  "main": [
                    [
                      {
                        "node": "Reply to user that command was received",
                        "type": "main",
                        "index": 0
                      },
                      {
                        "node": "parse command",
                        "type": "main",
                        "index": 0
                      }
                    ]
                  ]
                },
                "Handle other commands": {
                  "main": [
                    [
                      {
                        "node": "send help",
                        "type": "main",
                        "index": 0
                      }
                    ],
                    [
                      {
                        "node": "Unknown command",
                        "type": "main",
                        "index": 0
                      }
                    ]
                  ]
                },
                "If matches env variable": {
                  "main": [
                    [
                      {
                        "node": "Get user here for example",
                        "type": "main",
                        "index": 0
                      }
                    ]
                  ]
                },
                "REPLACE ME WITH TRIGGER": {
                  "main": [
                    [
                      {
                        "node": "Replying to thread",
                        "type": "main",
                        "index": 0
                      },
                      {
                        "node": "Delete user here for example",
                        "type": "main",
                        "index": 0
                      }
                    ]
                  ]
                },
                "Command workflow trigger": {
                  "main": [
                    [
                      {
                        "node": "Reply to user directly",
                        "type": "main",
                        "index": 0
                      },
                      {
                        "node": "if has flag",
                        "type": "main",
                        "index": 0
                      }
                    ]
                  ]
                },
                "Get user here for example": {
                  "main": [
                    [
                      {
                        "node": "Format data into nice structure",
                        "type": "main",
                        "index": 0
                      }
                    ]
                  ]
                },
                "Validate webhook signature": {
                  "main": [
                    [
                      {
                        "node": "Validate Slack token",
                        "type": "main",
                        "index": 0
                      }
                    ]
                  ]
                },
                "Delete user here for example": {
                  "main": [
                    [
                      {
                        "node": "Confirm user was deleted",
                        "type": "main",
                        "index": 0
                      }
                    ]
                  ]
                },
                "Format data into nice structure": {
                  "main": [
                    [
                      {
                        "node": "Found user",
                        "type": "main",
                        "index": 0
                      }
                    ]
                  ]
                },
                "Webhook to call for Slack command": {
                  "main": [
                    [
                      {
                        "node": "Set vars",
                        "type": "main",
                        "index": 0
                      }
                    ]
                  ]
                }
              }
            }
          },
          "node_count": 34,
          "connection_count": 19,
          "extraction_time": 0.45227,
          "error": null
        },
        "layer3": {
          "success": true,
          "data": {
            "introduction": "Use caseSlackbots are super powerful. At n8n, we have been using them to get a lot done.. But it can become hard to manage and maintain many different operations that a workflow can do.This is the base workflow we use for our most powerful internal Slackbots. They handle a lot from running e2e tests for Github branch to deleting a user. By splitting the workflow into many subworkflows, we are able to handle each command seperately, making it easier to debug as well as support new usecases.In this template, you can find eveything to setup your own Slackbot (and I made it simple, there's only one node to configure \ud83d\ude09). After that, you need to build your commands directly.This bot can create a new thread on an alerts channel and respond there.Or reply directly to the user.It responds for help request to return a help page.It automatically handles unknown commands.It also supports flags and environment variables. For example/cloudbot-test info mutasem --full-info -e env=prodwould give you the following info, when calling subworkflow.How to setupAdd Slack command and point it up to the webhook. For example.Add the following to theSet confignodealerts_channelwith alerts channel to start threads oninstance_urlwith this instance url to make it easy to debugslack_tokenwith slack bot token to validate requestslack_secret_signaturewith slack secret signature to validate requesthelp_docs_urlwith help url to help users understand the commandsBuild other workflows to call and add them tocommandsinSet Config. Each command must be mapped to a workflow id with anExecute Workflow TriggernodeActivate workflow \ud83d\ude80How to adjustAdd your own commands.Depending on your need, you might need to lock down who can call this.",
            "overview": "",
            "tutorial_text": "Use caseSlackbots are super powerful. At n8n, we have been using them to get a lot done.. But it can become hard to manage and maintain many different operations that a workflow can do.This is the base workflow we use for our most powerful internal Slackbots. They handle a lot from running e2e tests for Github branch to deleting a user. By splitting the workflow into many subworkflows, we are able to handle each command seperately, making it easier to debug as well as support new usecases.In this template, you can find eveything to setup your own Slackbot (and I made it simple, there's only one node to configure \ud83d\ude09). After that, you need to build your commands directly.This bot can create a new thread on an alerts channel and respond there.Or reply directly to the user.It responds for help request to return a help page.It automatically handles unknown commands.It also supports flags and environment variables. For example/cloudbot-test info mutasem --full-info -e env=prodwould give you the following info, when calling subworkflow.How to setupAdd Slack command and point it up to the webhook. For example.Add the following to theSet confignodealerts_channelwith alerts channel to start threads oninstance_urlwith this instance url to make it easy to debugslack_tokenwith slack bot token to validate requestslack_secret_signaturewith slack secret signature to validate requesthelp_docs_urlwith help url to help users understand the commandsBuild other workflows to call and add them tocommandsinSet Config. Each command must be mapped to a workflow id with anExecute Workflow TriggernodeActivate workflow \ud83d\ude80How to adjustAdd your own commands.Depending on your need, you might need to lock down who can call this.",
            "tutorial_sections": [],
            "step_by_step": [],
            "best_practices": [],
            "common_pitfalls": [],
            "image_urls": [
              "https://n8n.io/nodes/http-request.svg",
              "https://n8n.io/nodes/merge.svg",
              "https://gravatar.com/avatar/16d9c92db78317b6af7d0935bee34a47c522cb81d35c234ff76ea580ff1f6c29?r=pg&d=retro&size=200",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/Screenshot_2024_03_01_at_07_54_07_f662495e33.png",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/Screenshot_2024_03_01_at_08_03_33_a479113dbe.png",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/Screenshot_2024_03_01_at_07_53_41_6efd9f7ccf.png",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/Screenshot_2024_03_01_at_08_16_40_6ede8f7bb7.png",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/Screenshot_2024_03_01_at_08_16_54_29e80d395d.png",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/Screenshot_2024_03_01_at_08_34_31_32223e8495.png",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/Screenshot_2024_02_29_at_22_09_40_6bd557f60a.png",
              "https://n8n.io/nodes/github.svg",
              "https://gravatar.com/avatar/5240094f838126182ceefb50ca4a3cf75cc7dc0808efd4b9920d792e41bfc45e?r=pg&d=retro&size=200",
              "https://gravatar.com/avatar/8760ed64a38ed65da42983737659c7e295e4a7f14b59ed5ce1b0b1077435f573?r=pg&d=retro&size=200",
              "https://n8n.io/nodes/google-sheets.svg",
              "https://gravatar.com/avatar/4ab99e51473df76838beeaac908747f7928c625f869794815cabe34016967d51?r=pg&d=retro&size=200",
              "https://n8n.io/images/stars-footer.svg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/avatar_igordisco_9243b86232_cd9a5c94ce.jpg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/neutral_avatar_purple_fee36bffe3.PNG",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/avatar_anderoav_589989fc39_ceb1c71a0c.jpg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/avatar_maxim_poulsen_48f450887b_852d0439bc.jpeg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/Felix_Leber_f7a5b3c776_130aeca79d.jpeg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/avatar_Ironben_0a4b3e7d12_e35805265c.jpg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/Francois_lassl_d5cfb504c7_710c87121d.jpeg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/twitter_x_62a44e965e.svg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/github_e1f217d7a3_b9a271324f.svg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/discord_253947c90b_191e8f60fa.svg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/linkedin_d710e84d63_6ed0dc28aa.svg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/youtube_de4bdef50a_4b3a8b8aac.svg"
            ],
            "video_urls": [],
            "code_snippets": [],
            "conclusion": "",
            "troubleshooting": {
              "common_issues": [],
              "error_messages": []
            },
            "related_workflows": []
          },
          "errors": [],
          "extraction_time": 5.602557,
          "metadata": {
            "workflow_id": "2157",
            "url": "https://n8n.io/workflows/2157",
            "extracted_at": "2025-10-11T08:51:17.684213",
            "extractor_version": "1.0.0"
          }
        }
      },
      "multimodal": null,
      "transcripts": null,
      "validation": {
        "layer1": {
          "score": 80,
          "issues": [
            "Difficulty level not set",
            "No engagement metrics available"
          ],
          "valid": true,
          "layer": "layer1"
        },
        "layer2": {
          "score": 90,
          "issues": [
            "Missing or invalid workflow metadata"
          ],
          "valid": true,
          "layer": "layer2"
        },
        "layer3": {
          "score": 35,
          "issues": [
            "No tutorial sections extracted",
            "No images extracted",
            "Missing required fields: title, description, steps",
            "No step-by-step content extracted"
          ],
          "valid": false,
          "layer": "layer3"
        }
      },
      "quality": {
        "overall_score": 67.0,
        "classification": "Fair",
        "layer1_score": 80,
        "layer2_score": 90,
        "layer3_score": 35,
        "consistency_score": 100.0,
        "total_issues": 7
      },
      "extraction_time": 15.268671035766602,
      "errors": [],
      "timestamp": "2025-10-11T08:51:08.065416"
    },
    {
      "success": true,
      "workflow_id": "1812",
      "url": "https://n8n.io/workflows/1812",
      "layers": {
        "layer1": {
          "success": true,
          "workflow_id": "1812",
          "data": {
            "title": "Unknown Title",
            "description": "",
            "author": "Unknown Author",
            "use_case": "General workflow automation",
            "primary_category": "Strictly necessary",
            "secondary_categories": [
              "Performance",
              "Targeting",
              "Functionality",
              "Strictly necessary cookies allow core website functionality such as user login and account management. The website cannot be used properly without strictly necessary cookies.",
              "Performance cookies are used to see how visitors use the website, eg. analytics cookies. Those cookies cannot be used to directly identify a certain visitor.",
              "Targeting cookies are used to identify visitors between different websites, eg. content partners, banner networks. Those cookies may be used by companies to build a profile of visitor interests or show relevant ads on other websites.",
              "Functionality cookies are used to remember visitor information on the website, eg. language, timezone, enhanced content."
            ],
            "node_tags": [],
            "general_tags": [
              "Targeting",
              "Performance",
              "Strictly necessary",
              "Functionality"
            ],
            "difficulty_level": "intermediate",
            "views": 0,
            "upvotes": 0,
            "created_date": "2025-10-11T08:51:20.754972",
            "updated_date": "2025-10-11T08:51:20.754972",
            "setup_instructions": "",
            "prerequisites": [
              "token_v2",
              "or website it relates to",
              "{\n\t\tcontent: attr(label);\n\t\tfont-weight: bold;\n\t\twidth: 120px;\n\t\tmin-width: 120px;\n\t}",
              "visiting the said website",
              "__Secure-ROLLOUT_TOKEN"
            ],
            "estimated_setup_time": "4 minutes 59 sec",
            "industry": [
              "Strictly necessary"
            ]
          },
          "extraction_time": 5.40453314781189,
          "error": null
        },
        "layer2": {
          "success": false,
          "workflow_id": "1812",
          "data": null,
          "node_count": 0,
          "connection_count": 0,
          "extraction_time": 0.248727,
          "error": "Workflow not found (404)"
        },
        "layer3": {
          "success": true,
          "data": {
            "introduction": "",
            "overview": "",
            "tutorial_text": "",
            "tutorial_sections": [],
            "step_by_step": [],
            "best_practices": [],
            "common_pitfalls": [],
            "image_urls": [],
            "video_urls": [],
            "code_snippets": [],
            "conclusion": "",
            "troubleshooting": {
              "common_issues": [],
              "error_messages": []
            },
            "related_workflows": []
          },
          "errors": [],
          "extraction_time": 5.547907,
          "metadata": {
            "workflow_id": "1812",
            "url": "https://n8n.io/workflows/1812",
            "extracted_at": "2025-10-11T08:51:22.136091",
            "extractor_version": "1.0.0"
          }
        }
      },
      "multimodal": null,
      "transcripts": null,
      "validation": {
        "layer1": {
          "score": 55,
          "issues": [
            "Description missing or too short (minimum 20 characters)",
            "Difficulty level not set",
            "Author not identified",
            "No engagement metrics available"
          ],
          "valid": false,
          "layer": "layer1"
        },
        "layer2": null,
        "layer3": {
          "score": 5,
          "issues": [
            "Tutorial text missing",
            "No tutorial sections extracted",
            "No images extracted",
            "Missing required fields: title, description, steps",
            "No step-by-step content extracted"
          ],
          "valid": false,
          "layer": "layer3"
        }
      },
      "quality": {
        "overall_score": 20.0,
        "classification": "Poor",
        "layer1_score": 55,
        "layer2_score": null,
        "layer3_score": 5,
        "consistency_score": 70.0,
        "total_issues": 9
      },
      "extraction_time": 11.982109069824219,
      "errors": [
        "Layer 2 extraction failed: Workflow not found (404)"
      ],
      "timestamp": "2025-10-11T08:51:15.738385"
    },
    {
      "success": true,
      "workflow_id": "2045",
      "url": "https://n8n.io/workflows/2045",
      "layers": {
        "layer1": {
          "success": true,
          "workflow_id": "2045",
          "data": {
            "title": "Advanced Telegram Bot, Ticketing System, LiveChat, User Management, Broadcasting",
            "description": "A robust n8n workflow designed to enhance Telegram bot functionality for user management and broadcasting. It facilitates automatic support ticket creation,...",
            "author": "Igor Fediczko@igordisco",
            "use_case": "A robust n8n workflow designed to enhance Telegram bot functionality for user management and broadcasting.",
            "primary_category": "Strictly necessary",
            "secondary_categories": [
              "Performance",
              "Targeting",
              "Functionality",
              "Strictly necessary cookies allow core website functionality such as user login and account management. The website cannot be used properly without strictly necessary cookies.",
              "Performance cookies are used to see how visitors use the website, eg. analytics cookies. Those cookies cannot be used to directly identify a certain visitor.",
              "Targeting cookies are used to identify visitors between different websites, eg. content partners, banner networks. Those cookies may be used by companies to build a profile of visitor interests or show relevant ads on other websites.",
              "Functionality cookies are used to remember visitor information on the website, eg. language, timezone, enhanced content."
            ],
            "node_tags": [
              "github147,222",
              "hiring"
            ],
            "general_tags": [
              "Targeting",
              "Performance",
              "Strictly necessary",
              "Functionality"
            ],
            "difficulty_level": "intermediate",
            "views": 0,
            "upvotes": 0,
            "created_date": "2025-10-11T08:51:25.981834",
            "updated_date": "2025-10-11T08:51:25.981834",
            "setup_instructions": "A robust n8n workflow designed to enhance Telegram bot functionality for user management and broadcasting. It facilitates automatic support ticket creation,...",
            "prerequisites": [
              "token_v2",
              "or website it relates to",
              "Configuration: Input the Telegram bot token and relevant group/channel IDs. Configu",
              "Keywords: n8n workflow, Telegram bot, chat ticket system, Redis database, message",
              "{\n\t\tcontent: attr(label);\n\t\tfont-weight: bold;\n\t\twidth: 120px;\n\t\tmin-width: 120px;\n\t}"
            ],
            "estimated_setup_time": "4 minutes 59 sec",
            "industry": [
              "Strictly necessary"
            ]
          },
          "extraction_time": 8.141918182373047,
          "error": null
        },
        "layer2": {
          "success": true,
          "workflow_id": "2045",
          "data": {
            "id": 2045,
            "name": "Advanced Telegram Bot, Ticketing System, LiveChat, User Management, Broadcasting",
            "workflow": {
              "meta": {
                "instanceId": "56d2f4e489ee5971b498fdc86622af934b4f6de5339e9825a61dbe25e604dccd"
              },
              "nodes": [
                {
                  "id": "d2a02884-a082-4d77-8558-b819fdfd8e09",
                  "name": "Sticky Note",
                  "type": "n8n-nodes-base.stickyNote",
                  "position": [
                    -1305,
                    -337
                  ],
                  "parameters": {
                    "color": 7,
                    "width": 629.040241216464,
                    "height": 1416.261500302191,
                    "content": "## Use **Config Bot** to setup your telegram details, like:\n1- Telegram Group ID (Don't forget add bot as admin)\n2- Telegram Channel ID (Don't forget add bot as admin)\n3- Your telegram Bot Token. (Generate through @BotFather)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n## Setup data & filter & route to the correct Side.\n0- None of them - Soon - Wait V2\n1- Chat Type (`Private`)\n2- Chat Type (`Supergroup`)\n3- Chat Type (`Channel`)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n## Remember:\n* Do not make your support group public. Every message sent in the group on various topics will be forwarded to the user's ticket.\n* There is no need to promote your broadcasting channel; the main reason for the channel is to organize and broadcast messages.\n* You can host a Redis database without any coding/server management skills through Coolify.io.\n* In the next version, I will add the **edit messages** feature, where the forwarded messages will be updated with the new edited one.\n\n## Why use this method?\n* If you deal with Telegram P2P, anyone can delete messages from both sides. If you run a business, then one of your clients may delete all messages, causing you to lose the history. This solution prevents people from deleting messages; every message forwarded into the support group will not be possible to delete by the sender.\n* Team collaboration: Why share one account when you can convert the whole group into a ticketing system? With this project, you can invite all your coworkers to reply and provide support to your clients through Telegram.\n* Integrate with third-party services? Using N8N will pave the way for integrating your Telegram users' data into a CRM. In V2, we will enable the option to force new users to share their leads before receiving support."
                  },
                  "typeVersion": 1
                },
                {
                  "id": "c45c5efc-9c4d-4373-b267-bb13a01cb1de",
                  "name": "New User ?",
                  "type": "n8n-nodes-base.if",
                  "position": [
                    -400,
                    -140
                  ],
                  "parameters": {
                    "conditions": {
                      "string": [
                        {
                          "value1": "={{ $json.isEmpty() }}",
                          "value2": "true",
                          "operation": "regex"
                        }
                      ]
                    }
                  },
                  "typeVersion": 1
                },
                {
                  "id": "ab015a1f-9ee3-48f6-88c2-02d43fa739bc",
                  "name": "Format",
                  "type": "n8n-nodes-base.code",
                  "position": [
                    -1260,
                    260
                  ],
                  "parameters": {
                    "jsCode": "function escapeRedisJsonSyntax(value) {\n  if (typeof value === 'string') {\n    return value.replace(/[\"\\\\/]/g, '\\\\$&');\n  }\n  return value;\n}\n\nconst outputItems = [];\n\nfor (let i = 0; i < items.length; i++) {\n  const item = items[i];\n  const escapedItem = { TG_USER_: {} };\n\n  for (const key in item) {\n    const value = item[key];\n    if (Array.isArray(value)) {\n      escapedItem.TG_USER_[key] = [escapeRedisJsonSyntax(value[0])];\n    } else if (typeof value === 'object') {\n      flattenObject(value, escapedItem.TG_USER_, key);\n    } else {\n      escapedItem.TG_USER_[key] = escapeRedisJsonSyntax(value);\n    }\n  }\n\n  outputItems.push(escapedItem);\n}\n\nfunction flattenObject(obj, result, prefix) {\n  for (const key in obj) {\n    const newKey = prefix ? `${prefix}_${key}` : key;\n    const value = obj[key];\n    if (typeof value === 'object') {\n      if (Array.isArray(value)) {\n        result[newKey] = [escapeRedisJsonSyntax(value[0])];\n      } else {\n        flattenObject(value, result, newKey);\n      }\n    } else {\n      result[newKey.replace('json_message_', '').replace('json_', '')] = escapeRedisJsonSyntax(value);\n    }\n  }\n}\n\nreturn outputItems;\n"
                  },
                  "typeVersion": 2
                },
                {
                  "id": "18c5126d-6c3e-4b5f-989e-d6830cb73a90",
                  "name": "Bot-Fields",
                  "type": "n8n-nodes-base.set",
                  "position": [
                    -1120,
                    260
                  ],
                  "parameters": {
                    "mode": "raw",
                    "include": "selected",
                    "options": {},
                    "jsonOutput": "={{ $json.TG_USER_.removeField('BotToken').removeField('pairedItem_item').removeField('Support_Group_ID') }}"
                  },
                  "typeVersion": 3.2
                },
                {
                  "id": "0cc142e7-4fbc-4104-9529-1087a7bac68a",
                  "name": "Create Topic (Chat Ticket)",
                  "type": "n8n-nodes-base.httpRequest",
                  "position": [
                    80,
                    -260
                  ],
                  "parameters": {
                    "url": "=https://api.telegram.org/bot{{ $('Bot-Config').item.json.BotToken }}/createForumTopic?chat_id={{ $('Bot-Config').item.json[\"Support_Group_ID\"]}}&name={{ encodeURIComponent(('['+$('Bot-Fields').item.json.from_first_name +'] - [id:'+ $('Bot-Fields').item.json.chat_id +']'))}}&icon_color=9367192&icon_custom_emoji_id=5417915203100613993",
                    "options": {}
                  },
                  "typeVersion": 4.1
                },
                {
                  "id": "e983994f-7922-49c2-8c4e-73100a030898",
                  "name": "Save Topic ID",
                  "type": "n8n-nodes-base.redis",
                  "position": [
                    260,
                    -260
                  ],
                  "parameters": {
                    "key": "=TG-USER-{{ $('Bot-Fields').item.json.chat_id }}",
                    "value": "={\"message_thread_id\":{{ $json.result.message_thread_id }}}",
                    "keyType": "hash",
                    "operation": "set"
                  },
                  "credentials": {
                    "redis": {
                      "id": "LNn51V8Wv8nlnOrK",
                      "name": "Livegram Bot"
                    }
                  },
                  "typeVersion": 1
                },
                {
                  "id": "1f3afe0c-3ec4-431f-92b7-f06df5e1b39d",
                  "name": "Get User Chat Topic",
                  "type": "n8n-nodes-base.redis",
                  "position": [
                    200,
                    -80
                  ],
                  "parameters": {
                    "key": "=TG-USER-{{ $('Bot-Fields').item.json.chat_id }}",
                    "keyType": "hash",
                    "options": {},
                    "operation": "get",
                    "propertyName": "result"
                  },
                  "credentials": {
                    "redis": {
                      "id": "LNn51V8Wv8nlnOrK",
                      "name": "Livegram Bot"
                    }
                  },
                  "typeVersion": 1
                },
                {
                  "id": "591e1768-58c9-428e-8a0d-69ba4cce7ccc",
                  "name": "Forward New Message",
                  "type": "n8n-nodes-base.httpRequest",
                  "onError": "continueErrorOutput",
                  "position": [
                    560,
                    -80
                  ],
                  "parameters": {
                    "url": "=https://api.telegram.org/bot{{ $('Bot-Config').item.json.BotToken }}/forwardMessage?chat_id={{ $('Bot-Config').item.json[\"Support_Group_ID\"] }}&message_thread_id={{ $json[\"result\"][\"message_thread_id\"] }}&from_chat_id={{ $('Bot-Fields').item.json[\"chat_id\"] }}&message_id={{ $('Bot-Fields').item.json[\"message_id\"] }}",
                    "method": "POST",
                    "options": {}
                  },
                  "typeVersion": 4.1
                },
                {
                  "id": "fd063a6d-0caa-4f81-921d-f8fa952d7b9b",
                  "name": "IF No Topic Created",
                  "type": "n8n-nodes-base.if",
                  "position": [
                    40,
                    320
                  ],
                  "parameters": {
                    "conditions": {
                      "string": [
                        {
                          "value1": "={{ $json.error.message }}",
                          "value2": "thread not found",
                          "operation": "contains"
                        }
                      ]
                    }
                  },
                  "typeVersion": 1
                },
                {
                  "id": "ef044803-5e2e-4e54-a10b-21ad5feadb26",
                  "name": "ReCreate Topic (Chat Ticket)",
                  "type": "n8n-nodes-base.httpRequest",
                  "position": [
                    220,
                    220
                  ],
                  "parameters": {
                    "url": "=https://api.telegram.org/bot{{ $('Bot-Config').item.json.BotToken }}/createForumTopic?chat_id={{ $('Bot-Config').item.json[\"Support_Group_ID\"]}}&name={{ encodeURIComponent(('['+$('Bot-Fields').item.json.from_first_name +'] - [id:'+ $('Bot-Fields').item.json.chat_id +']'))}}&icon_color=9367192&icon_custom_emoji_id=5417915203100613993",
                    "options": {}
                  },
                  "typeVersion": 4.1
                },
                {
                  "id": "691398ab-b434-46d0-b3fe-046235d7cdf8",
                  "name": "ReSave Topic ID",
                  "type": "n8n-nodes-base.redis",
                  "position": [
                    380,
                    220
                  ],
                  "parameters": {
                    "key": "=TG-USER-{{ $('Bot-Fields').item.json.chat_id }}",
                    "value": "={\"message_thread_id\":{{ $json.result.message_thread_id }}}",
                    "keyType": "hash",
                    "operation": "set"
                  },
                  "credentials": {
                    "redis": {
                      "id": "LNn51V8Wv8nlnOrK",
                      "name": "Livegram Bot"
                    }
                  },
                  "typeVersion": 1
                },
                {
                  "id": "69fc3fe2-a339-4c99-a85b-6facf41526bf",
                  "name": "Sticky Note1",
                  "type": "n8n-nodes-base.stickyNote",
                  "position": [
                    20,
                    120.47661481708235
                  ],
                  "parameters": {
                    "color": 3,
                    "width": 734.3067601294108,
                    "height": 466.5190319644644,
                    "content": "## Re Create New Topic\n**Sometimes** in support group may the team delete or close a ticket (topic) in case of that this steps will create topic again for the user, and store the new ticket id (topic/thread ID)."
                  },
                  "typeVersion": 1
                },
                {
                  "id": "4cb855d4-a306-4bd4-b24d-ee5f6db518d4",
                  "name": "Update User Data",
                  "type": "n8n-nodes-base.redis",
                  "position": [
                    -140,
                    -80
                  ],
                  "parameters": {
                    "key": "=TG-USER-{{ $('Bot-Fields').item.json.chat_id }}",
                    "value": "={{ $item(\"0\").$node[\"Bot-Fields\"].json }}",
                    "keyType": "hash",
                    "operation": "set"
                  },
                  "credentials": {
                    "redis": {
                      "id": "LNn51V8Wv8nlnOrK",
                      "name": "Livegram Bot"
                    }
                  },
                  "typeVersion": 1
                },
                {
                  "id": "878f0dec-ad7b-4584-b20a-dd3db634d6dd",
                  "name": "Save User Data",
                  "type": "n8n-nodes-base.redis",
                  "position": [
                    -140,
                    -260
                  ],
                  "parameters": {
                    "key": "=TG-USER-{{ $('Bot-Fields').item.json.chat_id }}",
                    "value": "={{ $item(\"0\").$node[\"Bot-Fields\"].json }}",
                    "keyType": "hash",
                    "operation": "set"
                  },
                  "credentials": {
                    "redis": {
                      "id": "LNn51V8Wv8nlnOrK",
                      "name": "Livegram Bot"
                    }
                  },
                  "typeVersion": 1
                },
                {
                  "id": "e411b235-74bf-4f1b-9070-da1d0dc15815",
                  "name": "Support Forum",
                  "type": "n8n-nodes-base.if",
                  "position": [
                    -620,
                    240
                  ],
                  "parameters": {
                    "conditions": {
                      "string": [
                        {
                          "value1": "={{ $('Bot-Config').item.json.message.chat.id }}",
                          "value2": "={{ $('Bot-Config').item.json.Support_Group_ID }}",
                          "operation": "regex"
                        }
                      ]
                    }
                  },
                  "typeVersion": 1
                },
                {
                  "id": "05c04455-1406-47aa-8a81-aa2ec914c502",
                  "name": "From Ticket",
                  "type": "n8n-nodes-base.if",
                  "position": [
                    -420,
                    220
                  ],
                  "parameters": {
                    "conditions": {
                      "string": [
                        {
                          "value1": "={{ $('Bot-Fields').item.json.message_thread_id }}",
                          "operation": "isNotEmpty"
                        },
                        {
                          "value1": "={{ $('Bot-Fields').item.json.reply_to_message_is_topic_message }}",
                          "value2": "true",
                          "operation": "regex"
                        },
                        {
                          "value1": "={{ $('Bot-Fields').item.json.is_topic_message }}",
                          "value2": "true",
                          "operation": "regex"
                        }
                      ]
                    }
                  },
                  "typeVersion": 1
                },
                {
                  "id": "71b55beb-7c93-40a1-a94b-f411d11eb713",
                  "name": "Forward Support Reply To User",
                  "type": "n8n-nodes-base.httpRequest",
                  "position": [
                    -200,
                    200
                  ],
                  "parameters": {
                    "url": "=https://api.telegram.org/bot{{ $('Bot-Config').item.json.BotToken }}/forwardMessage?chat_id={{ $json[\"reply_to_message_forward_from_id\"] || $('Bot-Fields').item.json.reply_to_message_forum_topic_created_name.match(/\\[id:(\\d+)\\]/)[1] }}&from_chat_id={{ $('Bot-Config').item.json[\"Support_Group_ID\"] }}&message_id={{ $('Bot-Fields').item.json[\"message_id\"] }}",
                    "method": "POST",
                    "options": {}
                  },
                  "typeVersion": 4.1
                },
                {
                  "id": "aa70a9f6-ac3c-4ac4-a829-ef3e35720f2f",
                  "name": "IF Topic Created",
                  "type": "n8n-nodes-base.if",
                  "position": [
                    -420,
                    440
                  ],
                  "parameters": {
                    "conditions": {
                      "string": [
                        {
                          "value1": "={{ $json.forum_topic_created_name.isNotEmpty() }}",
                          "value2": "true",
                          "operation": "regex"
                        }
                      ]
                    }
                  },
                  "typeVersion": 1
                },
                {
                  "id": "4b1ba81a-6986-48a9-b439-cd79cfe278b7",
                  "name": "Forward New Message to the recrated topic",
                  "type": "n8n-nodes-base.httpRequest",
                  "position": [
                    540,
                    220
                  ],
                  "parameters": {
                    "url": "=https://api.telegram.org/bot{{ $('Bot-Config').item.json.BotToken }}/forwardMessage?chat_id={{ $('Bot-Config').item.json[\"Support_Group_ID\"] }}&message_thread_id={{ $json[\"result\"][\"message_thread_id\"] }}&from_chat_id={{ $('Bot-Fields').item.json[\"chat_id\"] }}&message_id={{ $('Bot-Fields').item.json[\"message_id\"] }}",
                    "method": "POST",
                    "options": {}
                  },
                  "typeVersion": 4.1
                },
                {
                  "id": "7eef7a26-8c59-4020-90f8-45f28e36c43f",
                  "name": "No Operation, do nothing",
                  "type": "n8n-nodes-base.noOp",
                  "position": [
                    540,
                    420
                  ],
                  "parameters": {},
                  "typeVersion": 1
                },
                {
                  "id": "db77035a-1256-4210-a13d-8333778fb579",
                  "name": "Check User in Database",
                  "type": "n8n-nodes-base.redis",
                  "notes": "Search Key",
                  "position": [
                    -580,
                    -140
                  ],
                  "parameters": {
                    "operation": "keys",
                    "keyPattern": "=TG-USER-{{ $json.chat_id }}"
                  },
                  "credentials": {
                    "redis": {
                      "id": "LNn51V8Wv8nlnOrK",
                      "name": "Livegram Bot"
                    }
                  },
                  "notesInFlow": true,
                  "typeVersion": 1
                },
                {
                  "id": "c01200b7-8aa4-4d44-a9a9-a802179f3afc",
                  "name": "Sticky Note2",
                  "type": "n8n-nodes-base.stickyNote",
                  "position": [
                    -660,
                    120
                  ],
                  "parameters": {
                    "color": 5,
                    "width": 656,
                    "height": 473,
                    "content": "## Support Side\n**This Part** is meant to forward replies that sent by support (members in the group)"
                  },
                  "typeVersion": 1
                },
                {
                  "id": "a443f847-248a-4287-8aad-737c4891b344",
                  "name": "Send User Ticket Created Notification",
                  "type": "n8n-nodes-base.telegram",
                  "position": [
                    -220,
                    420
                  ],
                  "parameters": {
                    "text": "A new ticket has been created for you. Please wait while one of our support team members becomes available to reply.",
                    "chatId": "={{ $json.forum_topic_created_name.match(/\\[id:(\\d+)\\]/)[1] }}",
                    "additionalFields": {
                      "appendAttribution": false
                    }
                  },
                  "credentials": {
                    "telegramApi": {
                      "id": "dZzfZH7baUnF4hiH",
                      "name": "The Live Chat Bot"
                    }
                  },
                  "typeVersion": 1.1
                },
                {
                  "id": "2746b480-91ed-4968-809d-9eca523d290a",
                  "name": "Sticky Note3",
                  "type": "n8n-nodes-base.stickyNote",
                  "position": [
                    -656.2527877074685,
                    -340
                  ],
                  "parameters": {
                    "color": 3,
                    "width": 1409.9137494026593,
                    "height": 422,
                    "content": "## User Side\n**This Part** is meant to save user data on a RAM database which is fast, and in same time forward the message to support after creating a new ticket (Topic) dedciated for the user id in the support group."
                  },
                  "typeVersion": 1
                },
                {
                  "id": "545d768f-a0b2-465a-a084-c43a6231d31a",
                  "name": "Bot-Config",
                  "type": "n8n-nodes-base.set",
                  "position": [
                    -880,
                    -200
                  ],
                  "parameters": {
                    "fields": {
                      "values": [
                        {
                          "name": "BotToken",
                          "stringValue": "Your Bot Token here (Also add credntinals in Telegram Node)"
                        },
                        {
                          "name": "Support_Group_ID",
                          "stringValue": "Your Telegram Group here (Don't forget to give BOT admin privileges)"
                        },
                        {
                          "name": "Boradcast_Channel_ID",
                          "stringValue": "Your Telegram Channel here (Don't forget to give BOT admin privileges)"
                        }
                      ]
                    },
                    "options": {}
                  },
                  "typeVersion": 3.2
                },
                {
                  "id": "59145dcd-51e3-4392-ad79-85601c872931",
                  "name": "Telegram-Bot",
                  "type": "n8n-nodes-base.telegramTrigger",
                  "position": [
                    -1240,
                    -200
                  ],
                  "webhookId": "d8b773ab-aee9-494b-8749-f0aa80032871",
                  "parameters": {
                    "updates": [
                      "message",
                      "channel_post"
                    ],
                    "additionalFields": {}
                  },
                  "credentials": {
                    "telegramApi": {
                      "id": "dZzfZH7baUnF4hiH",
                      "name": "The Live Chat Bot"
                    }
                  },
                  "typeVersion": 1
                },
                {
                  "id": "14b0ac28-5be5-4878-ab57-f7361291cc8e",
                  "name": "1st",
                  "type": "n8n-nodes-base.switch",
                  "position": [
                    -980,
                    260
                  ],
                  "parameters": {
                    "rules": {
                      "rules": [
                        {
                          "output": 1,
                          "value2": "private",
                          "operation": "regex"
                        },
                        {
                          "output": 2,
                          "value2": "supergroup",
                          "operation": "regex"
                        },
                        {
                          "output": 3,
                          "value2": "channel",
                          "operation": "regex"
                        }
                      ]
                    },
                    "value1": "={{ $json.chat_type || $json.channel_post_sender_chat_type }}",
                    "dataType": "string",
                    "fallbackOutput": 0
                  },
                  "typeVersion": 1
                },
                {
                  "id": "d91e0fdf-7344-4968-beac-49c2331b5170",
                  "name": "Split In Batches1",
                  "type": "n8n-nodes-base.splitInBatches",
                  "notes": "Telegram Limitation 29/sec",
                  "position": [
                    160,
                    780
                  ],
                  "parameters": {
                    "options": {},
                    "batchSize": 29
                  },
                  "notesInFlow": true,
                  "typeVersion": 2
                },
                {
                  "id": "f6ce5dbb-8707-4243-9814-5bd57397e652",
                  "name": "Wait1",
                  "type": "n8n-nodes-base.wait",
                  "position": [
                    560,
                    740
                  ],
                  "webhookId": "9f87deed-d502-46d3-8c85-ce99552a0441",
                  "parameters": {
                    "unit": "seconds",
                    "amount": 3
                  },
                  "typeVersion": 1
                },
                {
                  "id": "640e9ca9-de7d-4dae-a15a-d0232864c877",
                  "name": "Format Users",
                  "type": "n8n-nodes-base.code",
                  "position": [
                    -200,
                    780
                  ],
                  "parameters": {
                    "jsCode": "let response = items[0].json; // get the Redis response\nlet newItems = []; // to store the new items\n\nfor(let key in response) {\n    if(response.hasOwnProperty(key)) {\n        newItems.push({\n            json: {\n                user: response[key]\n            }\n        });\n    }\n}\n\nreturn newItems;\n"
                  },
                  "typeVersion": 1
                },
                {
                  "id": "8c330aca-3720-439e-87c6-47d914f828c3",
                  "name": "Broadcast Channel Post into Users",
                  "type": "n8n-nodes-base.httpRequest",
                  "onError": "continueErrorOutput",
                  "position": [
                    380,
                    760
                  ],
                  "parameters": {
                    "url": "=https://api.telegram.org/bot{{ $('Bot-Config').item.json.BotToken }}/copyMessage?chat_id={{ $('Split In Batches1').item.json[\"user\"][\"chat_id\"] }}&from_chat_id={{ $('Bot-Config').item.json[\"Boradcast_Channel_ID\"] }}&message_id={{ $('Bot-Config').item.json[\"channel_post\"][\"message_id\"] }}",
                    "method": "POST",
                    "options": {}
                  },
                  "typeVersion": 4.1
                },
                {
                  "id": "3beb15dd-6e76-4350-97c3-22f39d768497",
                  "name": "Set Blocked Member",
                  "type": "n8n-nodes-base.redis",
                  "position": [
                    560,
                    900
                  ],
                  "parameters": {
                    "key": "=TG-USER-{{ $('Bot-Fields').item.json.chat_id || $('Split In Batches1').item.json.user.chat_id }}",
                    "value": "={\"Blocked\":{{ '1' }}}",
                    "keyType": "hash",
                    "operation": "set"
                  },
                  "credentials": {
                    "redis": {
                      "id": "LNn51V8Wv8nlnOrK",
                      "name": "Livegram Bot"
                    }
                  },
                  "typeVersion": 1
                },
                {
                  "id": "03d457f1-ca11-4134-b0f9-d4d029ce141a",
                  "name": "IF Verified Channel",
                  "type": "n8n-nodes-base.if",
                  "position": [
                    -558,
                    800
                  ],
                  "parameters": {
                    "conditions": {
                      "string": [
                        {
                          "value1": "={{ $('Bot-Config').item.json.channel_post.sender_chat.id }}",
                          "value2": "={{ $('Bot-Config').item.json.Boradcast_Channel_ID }}",
                          "operation": "regex"
                        }
                      ]
                    }
                  },
                  "typeVersion": 1
                },
                {
                  "id": "6f38d2d0-5734-4829-ab97-8aca57827646",
                  "name": "Filter Blocked Users",
                  "type": "n8n-nodes-base.filter",
                  "position": [
                    -20,
                    780
                  ],
                  "parameters": {
                    "conditions": {
                      "string": [
                        {
                          "value1": "={{ $json.user.Blocked }}",
                          "value2": "1",
                          "operation": "notRegex"
                        }
                      ]
                    }
                  },
                  "typeVersion": 1
                },
                {
                  "id": "37ffb301-0284-493e-abed-aaff293b4a92",
                  "name": "Sticky Note4",
                  "type": "n8n-nodes-base.stickyNote",
                  "position": [
                    -660,
                    620
                  ],
                  "parameters": {
                    "color": 6,
                    "width": 1413.320293398532,
                    "height": 460.58353708231465,
                    "content": "## Channel Side (Broadcasting)\n**This Part** where the support of brand broadcasting message to all previous users who used this bot before."
                  },
                  "typeVersion": 1
                },
                {
                  "id": "d34a0080-6db8-4d29-b6ff-b0b0bf3be8af",
                  "name": "Retrieve all users in DB",
                  "type": "n8n-nodes-base.redis",
                  "notes": "Search Key",
                  "position": [
                    -378,
                    780
                  ],
                  "parameters": {
                    "operation": "keys",
                    "keyPattern": "=TG-USER-*"
                  },
                  "credentials": {
                    "redis": {
                      "id": "LNn51V8Wv8nlnOrK",
                      "name": "Livegram Bot"
                    }
                  },
                  "notesInFlow": true,
                  "typeVersion": 1
                }
              ],
              "pinData": {},
              "connections": {
                "1st": {
                  "main": [
                    null,
                    [
                      {
                        "node": "Check User in Database",
                        "type": "main",
                        "index": 0
                      }
                    ],
                    [
                      {
                        "node": "Support Forum",
                        "type": "main",
                        "index": 0
                      }
                    ],
                    [
                      {
                        "node": "IF Verified Channel",
                        "type": "main",
                        "index": 0
                      }
                    ]
                  ]
                },
                "Wait1": {
                  "main": [
                    [
                      {
                        "node": "Split In Batches1",
                        "type": "main",
                        "index": 0
                      }
                    ]
                  ]
                },
                "Format": {
                  "main": [
                    [
                      {
                        "node": "Bot-Fields",
                        "type": "main",
                        "index": 0
                      }
                    ]
                  ]
                },
                "Bot-Config": {
                  "main": [
                    [
                      {
                        "node": "Format",
                        "type": "main",
                        "index": 0
                      }
                    ]
                  ]
                },
                "Bot-Fields": {
                  "main": [
                    [
                      {
                        "node": "1st",
                        "type": "main",
                        "index": 0
                      }
                    ]
                  ]
                },
                "New User ?": {
                  "main": [
                    [
                      {
                        "node": "Save User Data",
                        "type": "main",
                        "index": 0
                      }
                    ],
                    [
                      {
                        "node": "Update User Data",
                        "type": "main",
                        "index": 0
                      }
                    ]
                  ]
                },
                "From Ticket": {
                  "main": [
                    [
                      {
                        "node": "Forward Support Reply To User",
                        "type": "main",
                        "index": 0
                      }
                    ],
                    [
                      {
                        "node": "IF Topic Created",
                        "type": "main",
                        "index": 0
                      }
                    ]
                  ]
                },
                "Format Users": {
                  "main": [
                    [
                      {
                        "node": "Filter Blocked Users",
                        "type": "main",
                        "index": 0
                      }
                    ]
                  ]
                },
                "Telegram-Bot": {
                  "main": [
                    [
                      {
                        "node": "Bot-Config",
                        "type": "main",
                        "index": 0
                      }
                    ]
                  ]
                },
                "Save Topic ID": {
                  "main": [
                    [
                      {
                        "node": "Forward New Message",
                        "type": "main",
                        "index": 0
                      }
                    ]
                  ]
                },
                "Support Forum": {
                  "main": [
                    [
                      {
                        "node": "From Ticket",
                        "type": "main",
                        "index": 0
                      }
                    ]
                  ]
                },
                "Save User Data": {
                  "main": [
                    [
                      {
                        "node": "Create Topic (Chat Ticket)",
                        "type": "main",
                        "index": 0
                      }
                    ]
                  ]
                },
                "ReSave Topic ID": {
                  "main": [
                    [
                      {
                        "node": "Forward New Message to the recrated topic",
                        "type": "main",
                        "index": 0
                      }
                    ]
                  ]
                },
                "IF Topic Created": {
                  "main": [
                    [
                      {
                        "node": "Send User Ticket Created Notification",
                        "type": "main",
                        "index": 0
                      }
                    ]
                  ]
                },
                "Update User Data": {
                  "main": [
                    [
                      {
                        "node": "Get User Chat Topic",
                        "type": "main",
                        "index": 0
                      }
                    ]
                  ]
                },
                "Split In Batches1": {
                  "main": [
                    [
                      {
                        "node": "Broadcast Channel Post into Users",
                        "type": "main",
                        "index": 0
                      }
                    ]
                  ]
                },
                "Set Blocked Member": {
                  "main": [
                    [
                      {
                        "node": "Split In Batches1",
                        "type": "main",
                        "index": 0
                      }
                    ]
                  ]
                },
                "Forward New Message": {
                  "main": [
                    [
                      {
                        "node": "No Operation, do nothing",
                        "type": "main",
                        "index": 0
                      }
                    ],
                    [
                      {
                        "node": "IF No Topic Created",
                        "type": "main",
                        "index": 0
                      }
                    ]
                  ]
                },
                "Get User Chat Topic": {
                  "main": [
                    [
                      {
                        "node": "Forward New Message",
                        "type": "main",
                        "index": 0
                      }
                    ]
                  ]
                },
                "IF No Topic Created": {
                  "main": [
                    [
                      {
                        "node": "ReCreate Topic (Chat Ticket)",
                        "type": "main",
                        "index": 0
                      }
                    ],
                    [
                      {
                        "node": "No Operation, do nothing",
                        "type": "main",
                        "index": 0
                      }
                    ]
                  ]
                },
                "IF Verified Channel": {
                  "main": [
                    [
                      {
                        "node": "Retrieve all users in DB",
                        "type": "main",
                        "index": 0
                      }
                    ],
                    [
                      {
                        "node": "No Operation, do nothing",
                        "type": "main",
                        "index": 0
                      }
                    ]
                  ]
                },
                "Filter Blocked Users": {
                  "main": [
                    [
                      {
                        "node": "Split In Batches1",
                        "type": "main",
                        "index": 0
                      }
                    ]
                  ]
                },
                "Check User in Database": {
                  "main": [
                    [
                      {
                        "node": "New User ?",
                        "type": "main",
                        "index": 0
                      }
                    ]
                  ]
                },
                "Retrieve all users in DB": {
                  "main": [
                    [
                      {
                        "node": "Format Users",
                        "type": "main",
                        "index": 0
                      }
                    ]
                  ]
                },
                "Create Topic (Chat Ticket)": {
                  "main": [
                    [
                      {
                        "node": "Save Topic ID",
                        "type": "main",
                        "index": 0
                      }
                    ]
                  ]
                },
                "ReCreate Topic (Chat Ticket)": {
                  "main": [
                    [
                      {
                        "node": "ReSave Topic ID",
                        "type": "main",
                        "index": 0
                      }
                    ]
                  ]
                },
                "Forward Support Reply To User": {
                  "main": [
                    [
                      {
                        "node": "No Operation, do nothing",
                        "type": "main",
                        "index": 0
                      }
                    ]
                  ]
                },
                "Broadcast Channel Post into Users": {
                  "main": [
                    [
                      {
                        "node": "Wait1",
                        "type": "main",
                        "index": 0
                      }
                    ],
                    [
                      {
                        "node": "Set Blocked Member",
                        "type": "main",
                        "index": 0
                      }
                    ]
                  ]
                },
                "Send User Ticket Created Notification": {
                  "main": [
                    [
                      {
                        "node": "No Operation, do nothing",
                        "type": "main",
                        "index": 0
                      }
                    ]
                  ]
                },
                "Forward New Message to the recrated topic": {
                  "main": [
                    [
                      {
                        "node": "No Operation, do nothing",
                        "type": "main",
                        "index": 0
                      }
                    ]
                  ]
                }
              }
            }
          },
          "node_count": 36,
          "connection_count": 30,
          "extraction_time": 0.296136,
          "error": null
        },
        "layer3": {
          "success": true,
          "data": {
            "introduction": "A robust n8n workflow designed to enhance Telegram bot functionality for user management and broadcasting. It facilitates automatic support ticket creation, efficient user data storage in Redis, and a sophisticated system for message forwarding and broadcasting.How It WorksTelegram Bot Setup: Initiate the workflow with a Telegram bot configured for handling different chat types (private, supergroup, channel).User Data Management: Formats and updates user data, storing it in a Redis database for efficient retrieval and management.Support Ticket Creation: Automatically generates chat tickets for user messages and saves the corresponding topic IDs in Redis.Message Forwarding: Forwards new messages to the appropriate chat thread, or creates a new thread if none exists.Support Forum Management: Handles messages within a support forum, differentiating between various chat types and user statuses.Broadcasting System: Implements a broadcasting mechanism that sends channel posts to all previous bot users, with a system to filter out blocked users.Blocked User Management: Identifies and manages blocked users, preventing them from receiving broadcasted messages.Versatile Channel Handling: Ensures that messages from verified channels are properly managed and broadcasted to relevant users.Set Up StepsEstimated Time: Around 30 minutes.Requirements: A Telegram bot, a Redis database, and Telegram group/channel IDs are necessary.Configuration: Input the Telegram bot token and relevant group/channel IDs. Configure message handling and user data processing according to your needs.Detailed Instructions: Sticky notes within the workflow provide extensive setup information and guidance.Live Demo WorkflowBot:Telegram Bot Link (Click here)Support Group:Telegram Group Link (Click here)Broadcasting Channel:Telegram Channel Link (Click here)Keywords: n8n workflow, Telegram bot, chat ticket system, Redis database, message broadcasting, user data management, support forum automation",
            "overview": "",
            "tutorial_text": "A robust n8n workflow designed to enhance Telegram bot functionality for user management and broadcasting. It facilitates automatic support ticket creation, efficient user data storage in Redis, and a sophisticated system for message forwarding and broadcasting.How It WorksTelegram Bot Setup: Initiate the workflow with a Telegram bot configured for handling different chat types (private, supergroup, channel).User Data Management: Formats and updates user data, storing it in a Redis database for efficient retrieval and management.Support Ticket Creation: Automatically generates chat tickets for user messages and saves the corresponding topic IDs in Redis.Message Forwarding: Forwards new messages to the appropriate chat thread, or creates a new thread if none exists.Support Forum Management: Handles messages within a support forum, differentiating between various chat types and user statuses.Broadcasting System: Implements a broadcasting mechanism that sends channel posts to all previous bot users, with a system to filter out blocked users.Blocked User Management: Identifies and manages blocked users, preventing them from receiving broadcasted messages.Versatile Channel Handling: Ensures that messages from verified channels are properly managed and broadcasted to relevant users.Set Up StepsEstimated Time: Around 30 minutes.Requirements: A Telegram bot, a Redis database, and Telegram group/channel IDs are necessary.Configuration: Input the Telegram bot token and relevant group/channel IDs. Configure message handling and user data processing according to your needs.Detailed Instructions: Sticky notes within the workflow provide extensive setup information and guidance.Live Demo WorkflowBot:Telegram Bot Link (Click here)Support Group:Telegram Group Link (Click here)Broadcasting Channel:Telegram Channel Link (Click here)Keywords: n8n workflow, Telegram bot, chat ticket system, Redis database, message broadcasting, user data management, support forum automation",
            "tutorial_sections": [],
            "step_by_step": [],
            "best_practices": [],
            "common_pitfalls": [],
            "image_urls": [
              "https://n8n.io/nodes/http-request.svg",
              "https://gravatar.com/avatar/6f99957ae9e5a66cf0bb95f4584cf321b0644a0ceea6a633bc968b6ec55e8410?r=pg&d=retro&size=200",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/7_Yscd9l4g_N_c0d57c4d0f.png",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/kes0xx_Jd_Tb_1af77e6e5f.png",
              "https://n8n.io/nodes/github.svg",
              "https://n8n.io/nodes/merge.svg",
              "https://n8n.io/nodes/telegram.svg",
              "https://gravatar.com/avatar/a551e67c6fe7affd5f882a527dee154bb6c3ac90cf878326accb3fb3ec77c8a6?r=pg&d=retro&size=200",
              "https://gravatar.com/avatar/4411649cc7663c2b65bc85988745080d5a677931114ea9e85f02b66a74d2e323?r=pg&d=retro&size=200",
              "https://gravatar.com/avatar/4ab99e51473df76838beeaac908747f7928c625f869794815cabe34016967d51?r=pg&d=retro&size=200",
              "https://n8n.io/images/stars-footer.svg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/avatar_igordisco_9243b86232_cd9a5c94ce.jpg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/neutral_avatar_purple_fee36bffe3.PNG",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/avatar_anderoav_589989fc39_ceb1c71a0c.jpg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/avatar_maxim_poulsen_48f450887b_852d0439bc.jpeg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/Felix_Leber_f7a5b3c776_130aeca79d.jpeg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/avatar_Ironben_0a4b3e7d12_e35805265c.jpg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/Francois_lassl_d5cfb504c7_710c87121d.jpeg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/twitter_x_62a44e965e.svg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/github_e1f217d7a3_b9a271324f.svg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/discord_253947c90b_191e8f60fa.svg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/linkedin_d710e84d63_6ed0dc28aa.svg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/youtube_de4bdef50a_4b3a8b8aac.svg"
            ],
            "video_urls": [],
            "code_snippets": [],
            "conclusion": "",
            "troubleshooting": {
              "common_issues": [],
              "error_messages": []
            },
            "related_workflows": []
          },
          "errors": [],
          "extraction_time": 5.905477,
          "metadata": {
            "workflow_id": "2045",
            "url": "https://n8n.io/workflows/2045",
            "extracted_at": "2025-10-11T08:51:27.539503",
            "extractor_version": "1.0.0"
          }
        }
      },
      "multimodal": null,
      "transcripts": null,
      "validation": {
        "layer1": {
          "score": 80,
          "issues": [
            "Difficulty level not set",
            "No engagement metrics available"
          ],
          "valid": true,
          "layer": "layer1"
        },
        "layer2": {
          "score": 100,
          "issues": [],
          "valid": true,
          "layer": "layer2"
        },
        "layer3": {
          "score": 35,
          "issues": [
            "No tutorial sections extracted",
            "No images extracted",
            "Missing required fields: title, description, steps",
            "No step-by-step content extracted"
          ],
          "valid": false,
          "layer": "layer3"
        }
      },
      "quality": {
        "overall_score": 70.0,
        "classification": "Fair",
        "layer1_score": 80,
        "layer2_score": 100,
        "layer3_score": 35,
        "consistency_score": 100.0,
        "total_issues": 6
      },
      "extraction_time": 15.000959157943726,
      "errors": [],
      "timestamp": "2025-10-11T08:51:18.491323"
    },
    {
      "success": true,
      "workflow_id": "1916",
      "url": "https://n8n.io/workflows/1916",
      "layers": {
        "layer1": {
          "success": true,
          "workflow_id": "1916",
          "data": {
            "title": "Merge binary objects on multiple items into a single item",
            "description": "This workflow is the opposite of this one. It transforms multiple different items with one binary object named data into a single item with multiple binary...",
            "author": "Igor Fediczko@igordisco",
            "use_case": "This workflow is the opposite of this one.",
            "primary_category": "Strictly necessary",
            "secondary_categories": [
              "Performance",
              "Targeting",
              "Functionality",
              "Strictly necessary cookies allow core website functionality such as user login and account management. The website cannot be used properly without strictly necessary cookies.",
              "Performance cookies are used to see how visitors use the website, eg. analytics cookies. Those cookies cannot be used to directly identify a certain visitor.",
              "Targeting cookies are used to identify visitors between different websites, eg. content partners, banner networks. Those cookies may be used by companies to build a profile of visitor interests or show relevant ads on other websites.",
              "Functionality cookies are used to remember visitor information on the website, eg. language, timezone, enhanced content."
            ],
            "node_tags": [
              "github147,222",
              "hiring"
            ],
            "general_tags": [
              "Targeting",
              "Performance",
              "Strictly necessary",
              "Functionality"
            ],
            "difficulty_level": "intermediate",
            "views": 0,
            "upvotes": 0,
            "created_date": "2025-10-11T08:51:30.118222",
            "updated_date": "2025-10-11T08:51:30.118222",
            "setup_instructions": "This workflow is the opposite of this one. It transforms multiple different items with one binary object named data into a single item with multiple binary...",
            "prerequisites": [
              "token_v2",
              "or website it relates to",
              "{\n\t\tcontent: attr(label);\n\t\tfont-weight: bold;\n\t\twidth: 120px;\n\t\tmin-width: 120px;\n\t}",
              "visiting the said website",
              "__Secure-ROLLOUT_TOKEN"
            ],
            "estimated_setup_time": "4 minutes 59 sec",
            "industry": [
              "Strictly necessary"
            ]
          },
          "extraction_time": 7.320520877838135,
          "error": null
        },
        "layer2": {
          "success": true,
          "workflow_id": "1916",
          "data": {
            "id": 1916,
            "name": "Merge binary objects on multiple items into a single item",
            "workflow": {
              "nodes": [
                {
                  "id": "9d09405e-64a3-47ef-9d46-4942de51444b",
                  "name": "When clicking \"Execute Workflow\"",
                  "type": "n8n-nodes-base.manualTrigger",
                  "position": [
                    400,
                    460
                  ],
                  "parameters": {},
                  "typeVersion": 1
                },
                {
                  "id": "4fdc396b-07bd-471e-9e62-136300804809",
                  "name": "Set URLs",
                  "type": "n8n-nodes-base.code",
                  "position": [
                    620,
                    460
                  ],
                  "parameters": {
                    "jsCode": "return [{\n  json: {\n    url: \"https://static.thomasmartens.eu/n8n/file01.jpg\"\n  }\n}, {\n  json: {\n    url: \"https://static.thomasmartens.eu/n8n/file02.jpg\"\n  }\n}, {\n  json: {\n    url: \"https://static.thomasmartens.eu/n8n/file03.jpg\"\n  }\n}]"
                  },
                  "typeVersion": 1
                },
                {
                  "id": "17482568-2117-4a8c-a307-ebf30dc9c560",
                  "name": "HTTP Request",
                  "type": "n8n-nodes-base.httpRequest",
                  "position": [
                    840,
                    460
                  ],
                  "parameters": {
                    "url": "={{ $json.url }}",
                    "options": {
                      "response": {
                        "response": {
                          "responseFormat": "file"
                        }
                      }
                    }
                  },
                  "typeVersion": 4
                },
                {
                  "id": "de27f52b-8f7e-4b9c-a097-987db4cef5aa",
                  "name": "Merge items",
                  "type": "n8n-nodes-base.code",
                  "position": [
                    1060,
                    460
                  ],
                  "parameters": {
                    "jsCode": "let binaries = {}, binary_keys = [];\n\nfor (const [index, inputItem] of Object.entries($input.all())) {\n  binaries[`data_${index}`] = inputItem.binary.data;\n  binary_keys.push(`data_${index}`);\n}\n\nreturn [{\n    json: {\n        binary_keys: binary_keys.join(',')\n    },\n    binary: binaries\n}];\n"
                  },
                  "typeVersion": 1
                },
                {
                  "id": "539fe99d-c557-4e51-bc88-011fb604e1f3",
                  "name": "Sticky Note",
                  "type": "n8n-nodes-base.stickyNote",
                  "position": [
                    580,
                    320
                  ],
                  "parameters": {
                    "width": 394,
                    "height": 304,
                    "content": "## Example data\nThese nodes simply download some example files to work with."
                  },
                  "typeVersion": 1
                },
                {
                  "id": "710fd054-2360-447a-b503-049507c0a3b2",
                  "name": "Sticky Note1",
                  "type": "n8n-nodes-base.stickyNote",
                  "position": [
                    1000,
                    320
                  ],
                  "parameters": {
                    "width": 304,
                    "height": 307,
                    "content": "## Transformation\nThis is where the magic happens. Multiple items with one binary object each are being transformed into one item with multiple binary objects."
                  },
                  "typeVersion": 1
                }
              ],
              "connections": {
                "Set URLs": {
                  "main": [
                    [
                      {
                        "node": "HTTP Request",
                        "type": "main",
                        "index": 0
                      }
                    ]
                  ]
                },
                "HTTP Request": {
                  "main": [
                    [
                      {
                        "node": "Merge items",
                        "type": "main",
                        "index": 0
                      }
                    ]
                  ]
                },
                "When clicking \"Execute Workflow\"": {
                  "main": [
                    [
                      {
                        "node": "Set URLs",
                        "type": "main",
                        "index": 0
                      }
                    ]
                  ]
                }
              }
            }
          },
          "node_count": 6,
          "connection_count": 3,
          "extraction_time": 0.264921,
          "error": null
        },
        "layer3": {
          "success": true,
          "data": {
            "introduction": "This workflow is the opposite ofthis one. It transforms multiple different items with one binary object nameddatainto a single item with multiple binary objects:This can be useful when creating a single .zip archive for example. It uses the updated Code node instead of the older Function node.",
            "overview": "",
            "tutorial_text": "This workflow is the opposite ofthis one. It transforms multiple different items with one binary object nameddatainto a single item with multiple binary objects:This can be useful when creating a single .zip archive for example. It uses the updated Code node instead of the older Function node.",
            "tutorial_sections": [],
            "step_by_step": [],
            "best_practices": [],
            "common_pitfalls": [],
            "image_urls": [
              "https://n8n.io/nodes/http-request.svg",
              "https://n8n.io/nodes/code.svg",
              "https://gravatar.com/avatar/7a3710173e907baffaf7ed7ebffc37955c9cdeadb8612200225a34a2e056aa17?r=pg&d=retro&size=200",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/image_2831934bd2.png",
              "https://n8n.io/nodes/airtable.svg",
              "https://n8n.io/nodes/webhook.svg",
              "https://n8n.io/nodes/item-lists.svg",
              "https://gravatar.com/avatar/50a86be376ddf464aadcb15d2755c34741e2050270c2269112ad15a955acaa91?r=pg&d=retro&size=200",
              "https://gravatar.com/avatar/b3d1a47322f05a8be3d2e7bad6a80c29161bd58b91e4762cbb3ac25e5d0db5a8?r=pg&d=retro&size=200",
              "https://n8n.io/nodes/merge.svg",
              "https://n8n.io/images/stars-footer.svg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/avatar_igordisco_9243b86232_cd9a5c94ce.jpg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/neutral_avatar_purple_fee36bffe3.PNG",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/avatar_anderoav_589989fc39_ceb1c71a0c.jpg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/avatar_maxim_poulsen_48f450887b_852d0439bc.jpeg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/Felix_Leber_f7a5b3c776_130aeca79d.jpeg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/avatar_Ironben_0a4b3e7d12_e35805265c.jpg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/Francois_lassl_d5cfb504c7_710c87121d.jpeg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/twitter_x_62a44e965e.svg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/github_e1f217d7a3_b9a271324f.svg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/discord_253947c90b_191e8f60fa.svg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/linkedin_d710e84d63_6ed0dc28aa.svg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/youtube_de4bdef50a_4b3a8b8aac.svg"
            ],
            "video_urls": [],
            "code_snippets": [],
            "conclusion": "",
            "troubleshooting": {
              "common_issues": [],
              "error_messages": []
            },
            "related_workflows": []
          },
          "errors": [],
          "extraction_time": 5.724517,
          "metadata": {
            "workflow_id": "1916",
            "url": "https://n8n.io/workflows/1916",
            "extracted_at": "2025-10-11T08:51:31.539031",
            "extractor_version": "1.0.0"
          }
        }
      },
      "multimodal": null,
      "transcripts": null,
      "validation": {
        "layer1": {
          "score": 80,
          "issues": [
            "Difficulty level not set",
            "No engagement metrics available"
          ],
          "valid": true,
          "layer": "layer1"
        },
        "layer2": {
          "score": 90,
          "issues": [
            "Missing or invalid workflow metadata"
          ],
          "valid": true,
          "layer": "layer2"
        },
        "layer3": {
          "score": 35,
          "issues": [
            "No tutorial sections extracted",
            "No images extracted",
            "Missing required fields: title, description, steps",
            "No step-by-step content extracted"
          ],
          "valid": false,
          "layer": "layer3"
        }
      },
      "quality": {
        "overall_score": 67.0,
        "classification": "Fair",
        "layer1_score": 80,
        "layer2_score": 90,
        "layer3_score": 35,
        "consistency_score": 100.0,
        "total_issues": 7
      },
      "extraction_time": 13.975466012954712,
      "errors": [],
      "timestamp": "2025-10-11T08:51:23.334282"
    },
    {
      "success": true,
      "workflow_id": "2229",
      "url": "https://n8n.io/workflows/2229",
      "layers": {
        "layer1": {
          "success": true,
          "workflow_id": "2229",
          "data": {
            "title": "Unknown Title",
            "description": "",
            "author": "Unknown Author",
            "use_case": "General workflow automation",
            "primary_category": "Strictly necessary",
            "secondary_categories": [
              "Performance",
              "Targeting",
              "Functionality",
              "Strictly necessary cookies allow core website functionality such as user login and account management. The website cannot be used properly without strictly necessary cookies.",
              "Performance cookies are used to see how visitors use the website, eg. analytics cookies. Those cookies cannot be used to directly identify a certain visitor.",
              "Targeting cookies are used to identify visitors between different websites, eg. content partners, banner networks. Those cookies may be used by companies to build a profile of visitor interests or show relevant ads on other websites.",
              "Functionality cookies are used to remember visitor information on the website, eg. language, timezone, enhanced content."
            ],
            "node_tags": [],
            "general_tags": [
              "Targeting",
              "Performance",
              "Strictly necessary",
              "Functionality"
            ],
            "difficulty_level": "intermediate",
            "views": 0,
            "upvotes": 0,
            "created_date": "2025-10-11T08:51:32.874817",
            "updated_date": "2025-10-11T08:51:32.874817",
            "setup_instructions": "",
            "prerequisites": [
              "token_v2",
              "or website it relates to",
              "{\n\t\tcontent: attr(label);\n\t\tfont-weight: bold;\n\t\twidth: 120px;\n\t\tmin-width: 120px;\n\t}",
              "visiting the said website",
              "__Secure-ROLLOUT_TOKEN"
            ],
            "estimated_setup_time": "4 minutes 59 sec",
            "industry": [
              "Strictly necessary"
            ]
          },
          "extraction_time": 5.729095935821533,
          "error": null
        },
        "layer2": {
          "success": false,
          "workflow_id": "2229",
          "data": null,
          "node_count": 0,
          "connection_count": 0,
          "extraction_time": 0.179055,
          "error": "Workflow not found (404)"
        },
        "layer3": {
          "success": true,
          "data": {
            "introduction": "",
            "overview": "",
            "tutorial_text": "",
            "tutorial_sections": [],
            "step_by_step": [],
            "best_practices": [],
            "common_pitfalls": [],
            "image_urls": [],
            "video_urls": [],
            "code_snippets": [],
            "conclusion": "",
            "troubleshooting": {
              "common_issues": [],
              "error_messages": []
            },
            "related_workflows": []
          },
          "errors": [],
          "extraction_time": 6.266637,
          "metadata": {
            "workflow_id": "2229",
            "url": "https://n8n.io/workflows/2229",
            "extracted_at": "2025-10-11T08:51:34.247300",
            "extractor_version": "1.0.0"
          }
        }
      },
      "multimodal": null,
      "transcripts": null,
      "validation": {
        "layer1": {
          "score": 55,
          "issues": [
            "Description missing or too short (minimum 20 characters)",
            "Difficulty level not set",
            "Author not identified",
            "No engagement metrics available"
          ],
          "valid": false,
          "layer": "layer1"
        },
        "layer2": null,
        "layer3": {
          "score": 5,
          "issues": [
            "Tutorial text missing",
            "No tutorial sections extracted",
            "No images extracted",
            "Missing required fields: title, description, steps",
            "No step-by-step content extracted"
          ],
          "valid": false,
          "layer": "layer3"
        }
      },
      "quality": {
        "overall_score": 20.0,
        "classification": "Poor",
        "layer1_score": 55,
        "layer2_score": null,
        "layer3_score": 5,
        "consistency_score": 70.0,
        "total_issues": 9
      },
      "extraction_time": 12.849027872085571,
      "errors": [
        "Layer 2 extraction failed: Workflow not found (404)"
      ],
      "timestamp": "2025-10-11T08:51:27.721348"
    },
    {
      "success": true,
      "workflow_id": "1872",
      "url": "https://n8n.io/workflows/1872",
      "layers": {
        "layer1": {
          "success": true,
          "workflow_id": "1872",
          "data": {
            "title": "Convert SQL table into Excel spreadsheet",
            "description": "This workflow demonstrates how easy it is to export SQL query to Excel automatically! Before running the workflow please make sure you have access to a...",
            "author": "Igor Fediczko@igordisco",
            "use_case": "This workflow demonstrates how easy it is to export SQL query to Excel automatically! Before running the workflow please make sure you have access to a.",
            "primary_category": "Strictly necessary",
            "secondary_categories": [
              "Performance",
              "Targeting",
              "Functionality",
              "Strictly necessary cookies allow core website functionality such as user login and account management. The website cannot be used properly without strictly necessary cookies.",
              "Performance cookies are used to see how visitors use the website, eg. analytics cookies. Those cookies cannot be used to directly identify a certain visitor.",
              "Targeting cookies are used to identify visitors between different websites, eg. content partners, banner networks. Those cookies may be used by companies to build a profile of visitor interests or show relevant ads on other websites.",
              "Functionality cookies are used to remember visitor information on the website, eg. language, timezone, enhanced content."
            ],
            "node_tags": [
              "github147,222",
              "hiring"
            ],
            "general_tags": [
              "Targeting",
              "Performance",
              "Strictly necessary",
              "Functionality"
            ],
            "difficulty_level": "intermediate",
            "views": 0,
            "upvotes": 0,
            "created_date": "2025-10-11T08:51:39.796807",
            "updated_date": "2025-10-11T08:51:39.796807",
            "setup_instructions": "This workflow demonstrates how easy it is to export SQL query to Excel automatically! Before running the workflow please make sure you have access to a...",
            "prerequisites": [
              "token_v2",
              "or website it relates to",
              "{\n\t\tcontent: attr(label);\n\t\tfont-weight: bold;\n\t\twidth: 120px;\n\t\tmin-width: 120px;\n\t}",
              "visiting the said website",
              "__Secure-ROLLOUT_TOKEN"
            ],
            "estimated_setup_time": "4 minutes 59 sec",
            "industry": [
              "Strictly necessary"
            ]
          },
          "extraction_time": 7.041435956954956,
          "error": null
        },
        "layer2": {
          "success": true,
          "workflow_id": "1872",
          "data": {
            "id": 1872,
            "name": "Convert SQL table into Excel spreadsheet",
            "workflow": {
              "meta": {
                "instanceId": "dfdeafd1c3ed2ee08eeab8c2fa0c3f522066931ed8138ccd35dc20a1e69decd3"
              },
              "nodes": [
                {
                  "id": "f60e3d5f-4da5-4201-8c78-00f4f410b397",
                  "name": "When clicking \"Execute Workflow\"",
                  "type": "n8n-nodes-base.manualTrigger",
                  "position": [
                    600,
                    300
                  ],
                  "parameters": {},
                  "typeVersion": 1
                },
                {
                  "id": "724f285b-723e-4452-81a6-c066c6b6a0e4",
                  "name": "TableName",
                  "type": "n8n-nodes-base.set",
                  "position": [
                    780,
                    300
                  ],
                  "parameters": {
                    "values": {
                      "string": [
                        {
                          "name": "TableName",
                          "value": "concerts2"
                        }
                      ]
                    },
                    "options": {}
                  },
                  "typeVersion": 1
                },
                {
                  "id": "637356f0-fcde-4555-982c-a28159ce6885",
                  "name": "LoadMySQLData",
                  "type": "n8n-nodes-base.mySql",
                  "position": [
                    960,
                    300
                  ],
                  "parameters": {
                    "query": "=SELECT * FROM {{ $json[\"TableName\"] }}",
                    "operation": "executeQuery"
                  },
                  "credentials": {
                    "mySql": {
                      "id": "46",
                      "name": "MySQL n8n articles"
                    }
                  },
                  "typeVersion": 1
                },
                {
                  "id": "b3270629-35de-4746-aa51-293e7d20660d",
                  "name": "SaveSpreadsheet",
                  "type": "n8n-nodes-base.spreadsheetFile",
                  "position": [
                    1160,
                    300
                  ],
                  "parameters": {
                    "options": {
                      "fileName": "={{ $node[\"TableName\"].json[\"TableName\"] }}.{{ $parameter[\"fileFormat\"] }}",
                      "headerRow": true,
                      "sheetName": "={{ $node[\"TableName\"].json[\"TableName\"] }}"
                    },
                    "operation": "toFile",
                    "fileFormat": "xlsx"
                  },
                  "typeVersion": 1
                },
                {
                  "id": "a7d04632-f47a-40e5-986e-1acf0b0af7c7",
                  "name": "Sticky Note",
                  "type": "n8n-nodes-base.stickyNote",
                  "position": [
                    1100,
                    157
                  ],
                  "parameters": {
                    "width": 450,
                    "height": 305,
                    "content": "## Save SQL table as a binary XLSX file\n### You can send it via e-mail, upload to the file storage or download on your computer.\n### Just connect one or two extra n8n Nodes here!"
                  },
                  "typeVersion": 1
                }
              ],
              "connections": {
                "TableName": {
                  "main": [
                    [
                      {
                        "node": "LoadMySQLData",
                        "type": "main",
                        "index": 0
                      }
                    ]
                  ]
                },
                "LoadMySQLData": {
                  "main": [
                    [
                      {
                        "node": "SaveSpreadsheet",
                        "type": "main",
                        "index": 0
                      }
                    ]
                  ]
                },
                "When clicking \"Execute Workflow\"": {
                  "main": [
                    [
                      {
                        "node": "TableName",
                        "type": "main",
                        "index": 0
                      }
                    ]
                  ]
                }
              }
            }
          },
          "node_count": 5,
          "connection_count": 3,
          "extraction_time": 0.222388,
          "error": null
        },
        "layer3": {
          "success": true,
          "data": {
            "introduction": "This workflow demonstrates how easy it is to export SQL query to Excel automatically!Before running the workflow please make sure you have access to a remote SQL server (MS SQL, MySQL, PostgreSQL etc.) with a sample table:Date,Band,ConcertName,Country,City,Location,LocationAddress,\n2023-05-28,Ozzy Osbourne,No More Tours 2 - Special Guest: Judas Priest,Germany,Berlin,Mercedes-Benz Arena Berlin,\"Mercedes-Platz 1, 10243 Berlin-Friedrichshain\",\n2023-05-08,Elton John,Farewell Yellow Brick Road Tour 2023,Germany,Berlin,Mercedes-Benz Arena Berlin,\"Mercedes-Platz 1, 10243 Berlin-Friedrichshain\",\n2023-05-26,Hans Zimmer Live,Europe Tour 2023,Germany,Berlin,Mercedes-Benz Arena Berlin,\"Mercedes-Platz 1, 10243 Berlin-Friedrichshain\",\n2023-07-07,Depeche Mode,Memento Mori World Tour 2023,Germany,Berlin,Olympiastadion Berlin,\"Olympischer Platz 3, 14053 Berlin-Charlottenburg\",The detailed process is explained in the tutorialhttps://blog.n8n.io/export-sql-to-excel",
            "overview": "",
            "tutorial_text": "This workflow demonstrates how easy it is to export SQL query to Excel automatically!Before running the workflow please make sure you have access to a remote SQL server (MS SQL, MySQL, PostgreSQL etc.) with a sample table:Date,Band,ConcertName,Country,City,Location,LocationAddress,\n2023-05-28,Ozzy Osbourne,No More Tours 2 - Special Guest: Judas Priest,Germany,Berlin,Mercedes-Benz Arena Berlin,\"Mercedes-Platz 1, 10243 Berlin-Friedrichshain\",\n2023-05-08,Elton John,Farewell Yellow Brick Road Tour 2023,Germany,Berlin,Mercedes-Benz Arena Berlin,\"Mercedes-Platz 1, 10243 Berlin-Friedrichshain\",\n2023-05-26,Hans Zimmer Live,Europe Tour 2023,Germany,Berlin,Mercedes-Benz Arena Berlin,\"Mercedes-Platz 1, 10243 Berlin-Friedrichshain\",\n2023-07-07,Depeche Mode,Memento Mori World Tour 2023,Germany,Berlin,Olympiastadion Berlin,\"Olympischer Platz 3, 14053 Berlin-Charlottenburg\",The detailed process is explained in the tutorialhttps://blog.n8n.io/export-sql-to-excel",
            "tutorial_sections": [],
            "step_by_step": [],
            "best_practices": [],
            "common_pitfalls": [],
            "image_urls": [
              "https://n8n.io/nodes/mysql.svg",
              "https://gravatar.com/avatar/a551e67c6fe7affd5f882a527dee154bb6c3ac90cf878326accb3fb3ec77c8a6?r=pg&d=retro&size=200",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/n8n_canvas_small_c342042a70.png",
              "https://n8n.io/nodes/github.svg",
              "https://n8n.io/nodes/http-request.svg",
              "https://n8n.io/nodes/merge.svg",
              "https://gravatar.com/avatar/7ee0febc0cbec2f1f6b24ddec3c4322e27c82c91dc729cfecf6ce12bfddd058d?r=pg&d=retro&size=200",
              "https://n8n.io/nodes/google-drive.svg",
              "https://gravatar.com/avatar/4cda9c7c1c24fdb61896cac588296d1dad03655a439ab71ef34f4c62c0ba8524?r=pg&d=retro&size=200",
              "https://n8n.io/nodes/notion.svg",
              "https://n8n.io/nodes/google-drive-trigger.svg",
              "https://gravatar.com/avatar/a3f78329cbd3f3239726910fb8b0f8e5e7bb340868f57b959989e7f8d8ea1608?r=pg&d=retro&size=200",
              "https://n8n.io/images/stars-footer.svg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/avatar_igordisco_9243b86232_cd9a5c94ce.jpg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/neutral_avatar_purple_fee36bffe3.PNG",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/avatar_anderoav_589989fc39_ceb1c71a0c.jpg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/avatar_maxim_poulsen_48f450887b_852d0439bc.jpeg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/Felix_Leber_f7a5b3c776_130aeca79d.jpeg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/avatar_Ironben_0a4b3e7d12_e35805265c.jpg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/Francois_lassl_d5cfb504c7_710c87121d.jpeg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/twitter_x_62a44e965e.svg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/github_e1f217d7a3_b9a271324f.svg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/discord_253947c90b_191e8f60fa.svg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/linkedin_d710e84d63_6ed0dc28aa.svg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/youtube_de4bdef50a_4b3a8b8aac.svg"
            ],
            "video_urls": [],
            "code_snippets": [
              {
                "id": "snippet-1",
                "language": "unknown",
                "code": "Date,Band,ConcertName,Country,City,Location,LocationAddress,\n2023-05-28,Ozzy Osbourne,No More Tours 2 - Special Guest: Judas Priest,Germany,Berlin,Mercedes-Benz Arena Berlin,\"Mercedes-Platz 1, 10243 Berlin-Friedrichshain\",\n2023-05-08,Elton John,Farewell Yellow Brick Road Tour 2023,Germany,Berlin,Mercedes-Benz Arena Berlin,\"Mercedes-Platz 1, 10243 Berlin-Friedrichshain\",\n2023-05-26,Hans Zimmer Live,Europe Tour 2023,Germany,Berlin,Mercedes-Benz Arena Berlin,\"Mercedes-Platz 1, 10243 Berlin-Friedrichshain\",\n2023-07-07,Depeche Mode,Memento Mori World Tour 2023,Germany,Berlin,Olympiastadion Berlin,\"Olympischer Platz 3, 14053 Berlin-Charlottenburg\",\n\n",
                "description": ""
              }
            ],
            "conclusion": "",
            "troubleshooting": {
              "common_issues": [],
              "error_messages": []
            },
            "related_workflows": []
          },
          "errors": [],
          "extraction_time": 5.586823,
          "metadata": {
            "workflow_id": "1872",
            "url": "https://n8n.io/workflows/1872",
            "extracted_at": "2025-10-11T08:51:41.777155",
            "extractor_version": "1.0.0"
          }
        }
      },
      "multimodal": null,
      "transcripts": null,
      "validation": {
        "layer1": {
          "score": 80,
          "issues": [
            "Difficulty level not set",
            "No engagement metrics available"
          ],
          "valid": true,
          "layer": "layer1"
        },
        "layer2": {
          "score": 100,
          "issues": [],
          "valid": true,
          "layer": "layer2"
        },
        "layer3": {
          "score": 35,
          "issues": [
            "No tutorial sections extracted",
            "No images extracted",
            "Missing required fields: title, description, steps",
            "No step-by-step content extracted"
          ],
          "valid": false,
          "layer": "layer3"
        }
      },
      "quality": {
        "overall_score": 70.0,
        "classification": "Fair",
        "layer1_score": 80,
        "layer2_score": 100,
        "layer3_score": 35,
        "consistency_score": 100.0,
        "total_issues": 6
      },
      "extraction_time": 13.925256967544556,
      "errors": [],
      "timestamp": "2025-10-11T08:51:33.492608"
    },
    {
      "success": true,
      "workflow_id": "2102",
      "url": "https://n8n.io/workflows/2102",
      "layers": {
        "layer1": {
          "success": true,
          "workflow_id": "2102",
          "data": {
            "title": "Save new Files received on Telegram to Google Drive",
            "description": "Effortlessly optimize your workflow by automatically save all files you are receiving on Telegram to a Google Drive Folder. How it works Retrieve a message...",
            "author": "Igor Fediczko@igordisco",
            "use_case": "Effortlessly optimize your workflow by automatically save all files you are receiving on Telegram to a Google Drive Folder.",
            "primary_category": "Strictly necessary",
            "secondary_categories": [
              "Performance",
              "Targeting",
              "Functionality",
              "Strictly necessary cookies allow core website functionality such as user login and account management. The website cannot be used properly without strictly necessary cookies.",
              "Performance cookies are used to see how visitors use the website, eg. analytics cookies. Those cookies cannot be used to directly identify a certain visitor.",
              "Targeting cookies are used to identify visitors between different websites, eg. content partners, banner networks. Those cookies may be used by companies to build a profile of visitor interests or show relevant ads on other websites.",
              "Functionality cookies are used to remember visitor information on the website, eg. language, timezone, enhanced content."
            ],
            "node_tags": [
              "github147,222",
              "hiring"
            ],
            "general_tags": [
              "Targeting",
              "Performance",
              "Strictly necessary",
              "Functionality"
            ],
            "difficulty_level": "intermediate",
            "views": 0,
            "upvotes": 0,
            "created_date": "2025-10-11T08:51:44.840062",
            "updated_date": "2025-10-11T08:51:44.840062",
            "setup_instructions": "Effortlessly optimize your workflow by automatically save all files you are receiving on Telegram to a Google Drive Folder. How it works Retrieve a message...",
            "prerequisites": [
              "token_v2",
              "or website it relates to",
              "{\n\t\tcontent: attr(label);\n\t\tfont-weight: bold;\n\t\twidth: 120px;\n\t\tmin-width: 120px;\n\t}",
              "l_settings&utm_campaign=create_new_credentials_modal#using-bot-access-token)\\n2.  Create a Googl",
              "visiting the said website"
            ],
            "estimated_setup_time": "4 minutes 59 sec",
            "industry": [
              "Strictly necessary"
            ]
          },
          "extraction_time": 8.535495042800903,
          "error": null
        },
        "layer2": {
          "success": true,
          "workflow_id": "2102",
          "data": {
            "id": 2102,
            "name": "Save new Files received on Telegram to Google Drive",
            "workflow": {
              "id": "a4GTp998ENMMfuqK",
              "meta": {
                "instanceId": "24bd2f3b51439b955590389bfa4dd9889fbd30343962de0b7daedce624cf4a71"
              },
              "name": "Save new Files received on Telegram to Google Drive",
              "tags": [],
              "nodes": [
                {
                  "id": "0fcb072b-ea4b-43b2-ad7c-46ad62b1e2ad",
                  "name": "On new Telegram Message",
                  "type": "n8n-nodes-base.telegramTrigger",
                  "position": [
                    900,
                    520
                  ],
                  "webhookId": "1e92584a-dd10-4fec-86a6-3b2691b85bba",
                  "parameters": {
                    "updates": [
                      "message"
                    ],
                    "additionalFields": {
                      "download": true
                    }
                  },
                  "credentials": {
                    "telegramApi": {
                      "id": "EO2PA74ehePPYVFU",
                      "name": "Telegram Notification Bot"
                    }
                  },
                  "typeVersion": 1
                },
                {
                  "id": "08e492f8-b969-4de2-b207-17fcd3cb8787",
                  "name": "If Message contains a File",
                  "type": "n8n-nodes-base.if",
                  "position": [
                    1160,
                    520
                  ],
                  "parameters": {
                    "options": {},
                    "conditions": {
                      "options": {
                        "leftValue": "",
                        "caseSensitive": true,
                        "typeValidation": "strict"
                      },
                      "combinator": "and",
                      "conditions": [
                        {
                          "id": "9b876834-1a86-48f1-9890-df60c739c91c",
                          "operator": {
                            "type": "object",
                            "operation": "exists",
                            "singleValue": true
                          },
                          "leftValue": "={{ $json.message.document }}",
                          "rightValue": ""
                        }
                      ]
                    }
                  },
                  "typeVersion": 2
                },
                {
                  "id": "f155a855-0eac-44c0-a52a-93446b9b3455",
                  "name": "Upload File to GDrive",
                  "type": "n8n-nodes-base.googleDrive",
                  "position": [
                    1500,
                    500
                  ],
                  "parameters": {
                    "name": "={{ $json.message.document.file_name }}",
                    "driveId": {
                      "__rl": true,
                      "mode": "list",
                      "value": "My Drive"
                    },
                    "options": {},
                    "folderId": {
                      "__rl": true,
                      "mode": "list",
                      "value": "11gyG2TvG0sqCG202CN-w9rloGW-CzKBc",
                      "cachedResultUrl": "https://drive.google.com/drive/folders/11gyG2TvG0sqCG202CN-w9rloGW-CzKBc",
                      "cachedResultName": "Demos"
                    }
                  },
                  "credentials": {
                    "googleDriveOAuth2Api": {
                      "id": "lFPZxFgMIaEnEtm9",
                      "name": "Google Drive account (automate everything)"
                    }
                  },
                  "typeVersion": 3
                }
              ],
              "active": true,
              "pinData": {},
              "settings": {
                "executionOrder": "v1"
              },
              "versionId": "f474f0f2-6d57-4bb8-bf1d-15ed35cf8ef2",
              "connections": {
                "On new Telegram Message": {
                  "main": [
                    [
                      {
                        "node": "If Message contains a File",
                        "type": "main",
                        "index": 0
                      }
                    ]
                  ]
                },
                "If Message contains a File": {
                  "main": [
                    [
                      {
                        "node": "Upload File to GDrive",
                        "type": "main",
                        "index": 0
                      }
                    ]
                  ]
                }
              }
            }
          },
          "node_count": 3,
          "connection_count": 2,
          "extraction_time": 0.235163,
          "error": null
        },
        "layer3": {
          "success": true,
          "data": {
            "introduction": "Effortlessly optimize your workflow by automatically save all files you are receiving on Telegram to a Google Drive Folder.How it worksRetrieve a message sent to your Telegram Bot containing a fileUpload the file to your Google Drive FolderSet up StepsCreate a Telegram Account and a Telegram Bot and connect your Telegram Bot to n8n by followingthe official n8n instructionsCreate a Google Drive FolderConnect your Google Drive with n8n followingthe official n8n instructionsSet the right folder in the Google Drive nodeUse case examplesBackup and RecoveryCross-Platform AccessFile Organization and ManagementFile Collaboration and SharingStorage Space Management",
            "overview": "",
            "tutorial_text": "Effortlessly optimize your workflow by automatically save all files you are receiving on Telegram to a Google Drive Folder.How it worksRetrieve a message sent to your Telegram Bot containing a fileUpload the file to your Google Drive FolderSet up StepsCreate a Telegram Account and a Telegram Bot and connect your Telegram Bot to n8n by followingthe official n8n instructionsCreate a Google Drive FolderConnect your Google Drive with n8n followingthe official n8n instructionsSet the right folder in the Google Drive nodeUse case examplesBackup and RecoveryCross-Platform AccessFile Organization and ManagementFile Collaboration and SharingStorage Space Management",
            "tutorial_sections": [],
            "step_by_step": [],
            "best_practices": [],
            "common_pitfalls": [],
            "image_urls": [
              "https://n8n.io/nodes/telegram-trigger.svg",
              "https://n8n.io/nodes/google-drive.svg",
              "https://gravatar.com/avatar/a7d9f6e327b76615463e40984ce452c61b426d599f75373aade121b309f0924d?r=pg&d=retro&size=200",
              "https://n8n.io/nodes/clockify.svg",
              "https://n8n.io/nodes/notion-trigger-beta.svg",
              "https://n8n.io/nodes/google-sheets.svg",
              "https://n8n.io/nodes/http-request.svg",
              "https://n8n.io/nodes/mailjet.svg",
              "https://n8n.io/nodes/webhook.svg",
              "https://n8n.io/nodes/item-lists.svg",
              "https://gravatar.com/avatar/50a86be376ddf464aadcb15d2755c34741e2050270c2269112ad15a955acaa91?r=pg&d=retro&size=200",
              "https://gravatar.com/avatar/b3d1a47322f05a8be3d2e7bad6a80c29161bd58b91e4762cbb3ac25e5d0db5a8?r=pg&d=retro&size=200",
              "https://n8n.io/nodes/merge.svg",
              "https://n8n.io/images/stars-footer.svg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/avatar_igordisco_9243b86232_cd9a5c94ce.jpg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/neutral_avatar_purple_fee36bffe3.PNG",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/avatar_anderoav_589989fc39_ceb1c71a0c.jpg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/avatar_maxim_poulsen_48f450887b_852d0439bc.jpeg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/Felix_Leber_f7a5b3c776_130aeca79d.jpeg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/avatar_Ironben_0a4b3e7d12_e35805265c.jpg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/Francois_lassl_d5cfb504c7_710c87121d.jpeg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/twitter_x_62a44e965e.svg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/github_e1f217d7a3_b9a271324f.svg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/discord_253947c90b_191e8f60fa.svg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/linkedin_d710e84d63_6ed0dc28aa.svg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/youtube_de4bdef50a_4b3a8b8aac.svg"
            ],
            "video_urls": [],
            "code_snippets": [],
            "conclusion": "",
            "troubleshooting": {
              "common_issues": [],
              "error_messages": []
            },
            "related_workflows": []
          },
          "errors": [],
          "extraction_time": 5.911641,
          "metadata": {
            "workflow_id": "2102",
            "url": "https://n8n.io/workflows/2102",
            "extracted_at": "2025-10-11T08:51:46.825333",
            "extractor_version": "1.0.0"
          }
        }
      },
      "multimodal": null,
      "transcripts": null,
      "validation": {
        "layer1": {
          "score": 80,
          "issues": [
            "Difficulty level not set",
            "No engagement metrics available"
          ],
          "valid": true,
          "layer": "layer1"
        },
        "layer2": {
          "score": 100,
          "issues": [],
          "valid": true,
          "layer": "layer2"
        },
        "layer3": {
          "score": 35,
          "issues": [
            "No tutorial sections extracted",
            "No images extracted",
            "Missing required fields: title, description, steps",
            "No step-by-step content extracted"
          ],
          "valid": false,
          "layer": "layer3"
        }
      },
      "quality": {
        "overall_score": 70.0,
        "classification": "Fair",
        "layer1_score": 80,
        "layer2_score": 100,
        "layer3_score": 35,
        "consistency_score": 100.0,
        "total_issues": 6
      },
      "extraction_time": 15.469806909561157,
      "errors": [],
      "timestamp": "2025-10-11T08:51:37.310034"
    },
    {
      "success": true,
      "workflow_id": "1959",
      "url": "https://n8n.io/workflows/1959",
      "layers": {
        "layer1": {
          "success": true,
          "workflow_id": "1959",
          "data": {
            "title": "AI chatbot that can search the web",
            "description": "This workflow is designed for dynamic and intelligent conversational capabilities. It incorporates OpenAI's GPT-4o model for natural language understanding...",
            "author": "Igor Fediczko@igordisco",
            "use_case": "This workflow is designed for dynamic and intelligent conversational capabilities.",
            "primary_category": "Strictly necessary",
            "secondary_categories": [
              "Performance",
              "Targeting",
              "Functionality",
              "Strictly necessary cookies allow core website functionality such as user login and account management. The website cannot be used properly without strictly necessary cookies.",
              "Performance cookies are used to see how visitors use the website, eg. analytics cookies. Those cookies cannot be used to directly identify a certain visitor.",
              "Targeting cookies are used to identify visitors between different websites, eg. content partners, banner networks. Those cookies may be used by companies to build a profile of visitor interests or show relevant ads on other websites.",
              "Functionality cookies are used to remember visitor information on the website, eg. language, timezone, enhanced content."
            ],
            "node_tags": [
              "github147,222",
              "hiring"
            ],
            "general_tags": [
              "Targeting",
              "Performance",
              "Strictly necessary",
              "Functionality"
            ],
            "difficulty_level": "intermediate",
            "views": 0,
            "upvotes": 0,
            "created_date": "2025-10-11T08:51:48.071857",
            "updated_date": "2025-10-11T08:51:48.071857",
            "setup_instructions": "This workflow is designed for dynamic and intelligent conversational capabilities. It incorporates OpenAI's GPT-4o model for natural language understanding...",
            "prerequisites": [
              "token_v2",
              "or website it relates to",
              "{\n\t\tcontent: attr(label);\n\t\tfont-weight: bold;\n\t\twidth: 120px;\n\t\tmin-width: 120px;\n\t}",
              "visiting the said website",
              "__Secure-ROLLOUT_TOKEN"
            ],
            "estimated_setup_time": "4 minutes 59 sec",
            "industry": [
              "Strictly necessary"
            ]
          },
          "extraction_time": 8.07200002670288,
          "error": null
        },
        "layer2": {
          "success": true,
          "workflow_id": "1959",
          "data": {
            "id": 1959,
            "name": "AI chatbot that can search the web",
            "workflow": {
              "meta": {
                "instanceId": "408f9fb9940c3cb18ffdef0e0150fe342d6e655c3a9fac21f0f644e8bedabcd9",
                "templateCredsSetupCompleted": true
              },
              "nodes": [
                {
                  "id": "a8211c61-5ca5-4b0a-adce-b7954a387aba",
                  "name": "Sticky Note4",
                  "type": "n8n-nodes-base.stickyNote",
                  "position": [
                    -540,
                    900
                  ],
                  "parameters": {
                    "width": 300,
                    "height": 225,
                    "content": "### The conversation history (last 20 messages) is stored in a buffer memory"
                  },
                  "typeVersion": 1
                },
                {
                  "id": "639ef27d-3e6e-4d2b-804a-5d1c95d509fc",
                  "name": "Sticky Note3",
                  "type": "n8n-nodes-base.stickyNote",
                  "position": [
                    -200,
                    900
                  ],
                  "parameters": {
                    "width": 340,
                    "height": 225,
                    "content": "### Tools which agent can use to accomplish the task"
                  },
                  "typeVersion": 1
                },
                {
                  "id": "dcb7ade3-005c-44e3-a369-526baa5b8813",
                  "name": "Sticky Note6",
                  "type": "n8n-nodes-base.stickyNote",
                  "position": [
                    -500,
                    500
                  ],
                  "parameters": {
                    "width": 422,
                    "height": 211,
                    "content": "### Conversational agent will utilise available tools to answer the prompt. "
                  },
                  "typeVersion": 1
                },
                {
                  "id": "2830de15-bdd2-48f4-8957-659014cd0a82",
                  "name": "When chat message received",
                  "type": "@n8n/n8n-nodes-langchain.chatTrigger",
                  "position": [
                    -800,
                    580
                  ],
                  "webhookId": "d48f9e07-3c05-4be8-86ca-5cee4c27b78f",
                  "parameters": {
                    "options": {}
                  },
                  "typeVersion": 1.1
                },
                {
                  "id": "bd1865fc-c37f-4b81-8ee1-83205e67e42b",
                  "name": "OpenAI Chat Model",
                  "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
                  "position": [
                    -720,
                    1000
                  ],
                  "parameters": {
                    "model": {
                      "__rl": true,
                      "mode": "list",
                      "value": "gpt-4o-mini"
                    },
                    "options": {}
                  },
                  "credentials": {
                    "openAiApi": {
                      "id": "8gccIjcuf3gvaoEr",
                      "name": "OpenAi account"
                    }
                  },
                  "typeVersion": 1.2
                },
                {
                  "id": "d9ee6da6-f2cd-4077-913c-9215433dfc31",
                  "name": "Simple Memory",
                  "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
                  "position": [
                    -440,
                    1000
                  ],
                  "parameters": {
                    "contextWindowLength": 20
                  },
                  "typeVersion": 1.3
                },
                {
                  "id": "fe8ddba3-37ba-43c3-9797-021b14a1be49",
                  "name": "SerpAPI",
                  "type": "@n8n/n8n-nodes-langchain.toolSerpApi",
                  "position": [
                    -140,
                    1000
                  ],
                  "parameters": {
                    "options": {}
                  },
                  "credentials": {
                    "serpApi": {
                      "id": "aJCKjxx6U3K7ydDe",
                      "name": "SerpAPI account"
                    }
                  },
                  "typeVersion": 1
                },
                {
                  "id": "f7cee7ea-6a21-4eae-a1c6-36716683a3eb",
                  "name": "Wikipedia",
                  "type": "@n8n/n8n-nodes-langchain.toolWikipedia",
                  "position": [
                    0,
                    1000
                  ],
                  "parameters": {},
                  "typeVersion": 1
                },
                {
                  "id": "e6f6fe48-3ad0-4bfe-a2f2-922e4c652306",
                  "name": "AI Agent",
                  "type": "@n8n/n8n-nodes-langchain.agent",
                  "position": [
                    -420,
                    580
                  ],
                  "parameters": {
                    "options": {}
                  },
                  "typeVersion": 1.8
                }
              ],
              "pinData": {},
              "connections": {
                "SerpAPI": {
                  "ai_tool": [
                    [
                      {
                        "node": "AI Agent",
                        "type": "ai_tool",
                        "index": 0
                      }
                    ]
                  ]
                },
                "Wikipedia": {
                  "ai_tool": [
                    [
                      {
                        "node": "AI Agent",
                        "type": "ai_tool",
                        "index": 0
                      }
                    ]
                  ]
                },
                "Simple Memory": {
                  "ai_memory": [
                    [
                      {
                        "node": "AI Agent",
                        "type": "ai_memory",
                        "index": 0
                      }
                    ]
                  ]
                },
                "OpenAI Chat Model": {
                  "ai_languageModel": [
                    [
                      {
                        "node": "AI Agent",
                        "type": "ai_languageModel",
                        "index": 0
                      }
                    ]
                  ]
                },
                "When chat message received": {
                  "main": [
                    [
                      {
                        "node": "AI Agent",
                        "type": "main",
                        "index": 0
                      }
                    ]
                  ]
                }
              }
            }
          },
          "node_count": 9,
          "connection_count": 5,
          "extraction_time": 0.622872,
          "error": null
        },
        "layer3": {
          "success": true,
          "data": {
            "introduction": "This workflow is designed for dynamic and intelligent conversational capabilities. It incorporates OpenAI's GPT-4o model for natural language understanding and generation. Additional tools include SerpAPI and Wikipedia for enriched, data-driven responses. The workflow is triggered manually, and utilizes a 'Window Buffer Memory' to maintain the context of the last 20 interactions for better conversational continuity. All these components are orchestrated through n8n nodes, ensuring seamless interconnectivity.To use this template, you need to be on n8n version 1.50.0 or later.",
            "overview": "",
            "tutorial_text": "This workflow is designed for dynamic and intelligent conversational capabilities. It incorporates OpenAI's GPT-4o model for natural language understanding and generation. Additional tools include SerpAPI and Wikipedia for enriched, data-driven responses. The workflow is triggered manually, and utilizes a 'Window Buffer Memory' to maintain the context of the last 20 interactions for better conversational continuity. All these components are orchestrated through n8n nodes, ensuring seamless interconnectivity.To use this template, you need to be on n8n version 1.50.0 or later.",
            "tutorial_sections": [],
            "step_by_step": [],
            "best_practices": [],
            "common_pitfalls": [],
            "image_urls": [
              "https://n8n.io/nodes/openai-chat-model.svg",
              "https://gravatar.com/avatar/b3d1a47322f05a8be3d2e7bad6a80c29161bd58b91e4762cbb3ac25e5d0db5a8?r=pg&d=retro&size=200",
              "https://n8n.io/nodes/github-trigger.svg",
              "https://n8n.io/nodes/http-request.svg",
              "https://n8n.io/nodes/merge.svg",
              "https://gravatar.com/avatar/74234187cf4a650d53f6a86e7b03d1bcb8cfef4cbd0552eabd8d966cd808cc54?r=pg&d=retro&size=200",
              "https://n8n.io/nodes/telegram.svg",
              "https://gravatar.com/avatar/1d8dbb30401a76425734d4319abbaa38548b7572064ca080740bbfe60324772a?r=pg&d=retro&size=200",
              "https://gravatar.com/avatar/4ab99e51473df76838beeaac908747f7928c625f869794815cabe34016967d51?r=pg&d=retro&size=200",
              "https://gravatar.com/avatar/a551e67c6fe7affd5f882a527dee154bb6c3ac90cf878326accb3fb3ec77c8a6?r=pg&d=retro&size=200",
              "https://n8n.io/images/stars-footer.svg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/avatar_igordisco_9243b86232_cd9a5c94ce.jpg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/neutral_avatar_purple_fee36bffe3.PNG",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/avatar_anderoav_589989fc39_ceb1c71a0c.jpg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/avatar_maxim_poulsen_48f450887b_852d0439bc.jpeg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/Felix_Leber_f7a5b3c776_130aeca79d.jpeg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/avatar_Ironben_0a4b3e7d12_e35805265c.jpg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/Francois_lassl_d5cfb504c7_710c87121d.jpeg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/twitter_x_62a44e965e.svg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/github_e1f217d7a3_b9a271324f.svg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/discord_253947c90b_191e8f60fa.svg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/linkedin_d710e84d63_6ed0dc28aa.svg",
              "https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/youtube_de4bdef50a_4b3a8b8aac.svg"
            ],
            "video_urls": [],
            "code_snippets": [],
            "conclusion": "",
            "troubleshooting": {
              "common_issues": [],
              "error_messages": []
            },
            "related_workflows": []
          },
          "errors": [],
          "extraction_time": 5.744515,
          "metadata": {
            "workflow_id": "1959",
            "url": "https://n8n.io/workflows/1959",
            "extracted_at": "2025-10-11T08:51:49.873731",
            "extractor_version": "1.0.0"
          }
        }
      },
      "multimodal": null,
      "transcripts": null,
      "validation": {
        "layer1": {
          "score": 80,
          "issues": [
            "Difficulty level not set",
            "No engagement metrics available"
          ],
          "valid": true,
          "layer": "layer1"
        },
        "layer2": {
          "score": 100,
          "issues": [],
          "valid": true,
          "layer": "layer2"
        },
        "layer3": {
          "score": 35,
          "issues": [
            "No tutorial sections extracted",
            "No images extracted",
            "Missing required fields: title, description, steps",
            "No step-by-step content extracted"
          ],
          "valid": false,
          "layer": "layer3"
        }
      },
      "quality": {
        "overall_score": 70.0,
        "classification": "Fair",
        "layer1_score": 80,
        "layer2_score": 100,
        "layer3_score": 35,
        "consistency_score": 100.0,
        "total_issues": 6
      },
      "extraction_time": 15.086093187332153,
      "errors": [],
      "timestamp": "2025-10-11T08:51:40.570763"
    }
  ]
}